{
	"info": {
		"_postman_id": "9891d08d-5632-4bc5-ab17-e7efc223195c",
		"name": "Gradebook API Automation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33345931"
	},
	"item": [
		{
			"name": "AssessmentLineItems",
			"item": [
				{
					"name": "Smoke Tests",
					"item": [
						{
							"name": "Happy path",
							"item": [
								{
									"name": "Validate successful creation of Assessment Line Item",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate Status Code, It should be 201 Created\", function () {",
													"    pm.expect([201]).to.include(pm.response.code, \"Unexpected status code\");",
													"});",
													"",
													"",
													"pm.test(\"Response body should be completely empty\", function () {",
													"    pm.expect(pm.response.text()).to.equal(\"\"); // Ensure response body is completely empty",
													"});",
													"",
													"",
													"let body = JSON.parse(pm.environment.get(\"putAssessmentLineitemRequestBody\"));",
													"",
													"let item = {",
													"    sourcedId: pm.environment.get(\"randomUUID\"),",
													"    status: \"active\",",
													"    dateLastModified: pm.environment.get(\"isoDateTime\"),",
													"    title: body.title,",
													"    description: \"This is QA POSTMAN API Automation generated \",",
													"    class: {",
													"        href: \"https://example.com\",",
													"        sourcedId: pm.environment.get(\"classSourcedId\"),",
													"        type: \"class\"",
													"    },",
													"    parentAssessmentLineItem: {",
													"        href: \"/classes/b2a85993-8b03-4560-8ab3-d39b56570823\",",
													"        sourcedId: pm.environment.get(\"assessmentLineItemeSourcedId\"),",
													"        type: \"assessmentLineItem\"",
													"    },",
													"    scoreScale: {",
													"        href: \"https://example.com/scoreScale\",",
													"        sourcedId: pm.environment.get(\"scoreScaleSourcedId\"),",
													"        type: \"scoreScale\"",
													"    },",
													"    resultValueMin: 90,",
													"    resultValueMax: 100",
													"};",
													"",
													"// Save expected object",
													"pm.environment.set(\"expectedAssessmentLineItem\", JSON.stringify(item));",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Set headers dynamically from environment variables",
													"pm.request.headers.upsert({ key: \"Authorization\", value: pm.environment.get(\"Auth\") });",
													"pm.request.headers.upsert({ key: \"x-app-key\", value: pm.environment.get(\"x-app-key\") });",
													"pm.request.headers.upsert({ key: \"x-client-id\", value: pm.environment.get(\"x-client-id\") });",
													"",
													"// Generate a random UUID for sourcedId",
													"function generateUUID() {",
													"    let dt = new Date().getTime();",
													"    let uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {",
													"        let r = (dt + Math.random() * 16) % 16 | 0;",
													"        dt = Math.floor(dt / 16);",
													"        return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);",
													"    });",
													"    return uuid;",
													"}",
													"",
													"const headers = {",
													"    'Authorization': pm.environment.get(\"Auth\"),",
													"    'x-app-key': pm.environment.get(\"x-app-key\"),",
													"    'x-client-id': pm.environment.get(\"x-client-id\"),",
													"    'Content-Type': 'application/json'",
													"};",
													"",
													"// Generate and store courseSourcedId",
													"let courseSourcedId = generateUUID();",
													"pm.environment.set(\"courseSourcedId\", courseSourcedId);",
													"console.log(\"Generated courseSourcedId: \" + courseSourcedId);",
													"",
													"// Generate current UTC timestamp in ISO format: 2025-01-29T06:51:57Z",
													"function getCurrentISOString() {",
													"    return new Date().toISOString().split('.')[0] + \"Z\";",
													"}",
													"",
													"// Set dynamic date variables",
													"let isoDateTime = getCurrentISOString(); // full timestamp",
													"let isoDateOnly = isoDateTime.split('T')[0]; // date only",
													"",
													"pm.environment.set(\"isoDateTime\", isoDateTime);",
													"pm.environment.set(\"isoDateOnly\", isoDateOnly);",
													"",
													"console.log(\"Generated ISO DateTime: \" + isoDateTime);",
													"console.log(\"Generated ISO Date Only: \" + isoDateOnly);",
													"",
													"",
													"// Define Course API URL",
													"let courseUrl = pm.environment.get(\"URL\") + pm.environment.get(\"customPathPrefix\")+\"/courses\";",
													"",
													"// Define Course API Request Body",
													"let courseRequestBody = {",
													"    \"sourcedId\": pm.environment.get(\"courseSourcedId\"), //required",
													"    \"status\": \"active\", //required",
													"    \"title\": \"QA\", //required",
													"    \"courseCode\": \"courseCode\" //required",
													"",
													"}",
													"",
													"",
													"// Make the Course POST request",
													"pm.sendRequest({",
													"    url: courseUrl,",
													"    method: 'POST',",
													"    header: headers,",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify(courseRequestBody)",
													"    }",
													"}, function (err, res) {",
													"    if (err) {",
													"        console.error(\"POST Course API Error: \", err);",
													"        pm.environment.unset(\"courseSourcedId\"); // Clear sourcedId on failure",
													"        throw new Error(\"Course POST API request failed.\");",
													"    }",
													"",
													"    if (res.code !== 201) {  // Ensure status is 201 Created",
													"        console.error(\"Unexpected POST Course API Response Code: \" + res.code);",
													"        pm.environment.unset(\"courseSourcedId\"); // Clear sourcedId on failure",
													"        throw new Error(\"Course POST API did not return 201 Created.\");",
													"    }",
													"",
													"    console.log(\"Course POST API succeeded with status: \" + res.code);",
													"",
													"    // Define getAllOrgs API URL",
													"    let getAllOrgsUrl = pm.environment.get(\"URL\") + pm.environment.get(\"rosterPathPrefix\")+\"/orgs\";",
													"",
													"    // Make getAllOrgs Request",
													"    pm.sendRequest({",
													"        url: getAllOrgsUrl,",
													"        method: 'GET',",
													"        header: headers",
													"    }, function (err, res) {",
													"        if (err || res.code !== 200) {",
													"            console.error(\"GET Orgs API Failed. Code:\", res?.code || \"No response\", \"Error:\", err);",
													"            throw new Error(\"GET Orgs API request failed.\");",
													"        }",
													"",
													"        console.log(\"GET Orgs API succeeded with status:\", res.code);",
													"",
													"        let response = res.json();",
													"        let schoolOrgs = response.orgs.filter(org => org.type === \"SCHOOL\");",
													"",
													"        if (schoolOrgs.length === 0) {",
													"            throw new Error(\"No orgs of type 'SCHOOL' found.\");",
													"        }",
													"",
													"        // Get a random school sourcedId",
													"        let randomIndex = Math.floor(Math.random() * schoolOrgs.length);",
													"        let schoolSourcedId = schoolOrgs[randomIndex].sourcedId;",
													"",
													"        console.log(\"Selected school sourcedId: \" + schoolSourcedId);",
													"",
													"        // Save to environment/collection variable for later use",
													"        pm.environment.set(\"school_sourcedId\", schoolSourcedId);",
													"",
													"        // Define getAllterms API URL",
													"        let getAllTermsUrl = pm.environment.get(\"URL\") + pm.environment.get(\"rosterPathPrefix\")+\"/terms\";",
													"",
													"        // Make getAllterms Request",
													"        pm.sendRequest({",
													"            url: getAllTermsUrl,",
													"            method: 'GET',",
													"            header: headers",
													"        }, function (err, res) {",
													"            if (err || res.code !== 200) {",
													"                console.error(\"GET TERMS API Failed. Code:\", res?.code || \"No response\", \"Error:\", err);",
													"                throw new Error(\"GET TERMS API request failed.\");",
													"            }",
													"",
													"            console.log(\"GET TERMS API succeeded with status:\", res.code);",
													"",
													"            let response = res.json();",
													"            let termSessions = response.academicSessions.filter(session => session.type === \"TERM\");",
													"",
													"            if (termSessions.length === 0) {",
													"                throw new Error(\"No academicSessions of type 'TERM' found.\");",
													"            }",
													"",
													"            // Select a random term sourcedId",
													"            let randomIndex = Math.floor(Math.random() * termSessions.length);",
													"            let termSourcedId = termSessions[randomIndex].sourcedId;",
													"",
													"            console.log(\"Selected TERM sourcedId: \" + termSourcedId);",
													"",
													"            // Save to environment/collection variable",
													"            pm.environment.set(\"term_sourcedId\", termSourcedId);",
													"",
													"            // Generate and store classSourcedId",
													"            let classSourcedId = generateUUID();",
													"            pm.environment.set(\"classSourcedId\", classSourcedId);",
													"            console.log(\"Generated classSourcedId: \" + classSourcedId);",
													"",
													"            // Define Class API URL",
													"            let classUrl = pm.environment.get(\"URL\") + pm.environment.get(\"customPathPrefix\")+\"/classes\";",
													"",
													"            // Define Class API Request Body",
													"            let classRequestBody = {",
													"                \"sourcedId\": pm.environment.get(\"classSourcedId\"), //Required",
													"                \"status\": \"active\", //Required",
													"                \"title\": \"title\", //Required",
													"                \"classType\": \"SCHEDULED\", //Required",
													"                \"course\": { //required",
													"                    \"href\": \"/courses/\" + pm.environment.get(\"courseSourcedId\"),",
													"                    \"sourcedId\": pm.environment.get(\"courseSourcedId\"),",
													"                    \"type\": \"course\"",
													"                },",
													"                \"school\": { //required",
													"                    \"href\": \"/org/\" + pm.environment.get(\"school_sourcedId\"),",
													"                    \"sourcedId\": pm.environment.get(\"school_sourcedId\"),",
													"                    \"type\": \"org\"",
													"                },",
													"                \"terms\": [ //required",
													"                    {",
													"                        \"href\": \"/academicSession/\" + pm.environment.get(\"term_sourcedId\"),",
													"                        \"sourcedId\":pm.environment.get(\"term_sourcedId\"),",
													"                        \"type\": \"academicSession\"",
													"                    }",
													"                ]",
													"            }",
													"",
													"            // Make the Class POST request",
													"            pm.sendRequest({",
													"                url: classUrl,",
													"                method: 'POST',",
													"                header: headers,",
													"                body: {",
													"                    mode: 'raw',",
													"                    raw: JSON.stringify(classRequestBody)",
													"                }",
													"            }, function (err, res) {",
													"                if (err) {",
													"                    console.error(\"POST Class API Error: \", err);",
													"                    pm.environment.unset(\"classSourcedId\"); // Clear sourcedId on failure",
													"                    throw new Error(\"Class POST API request failed.\");",
													"                }",
													"",
													"                if (res.code !== 201) {  // Ensure status is 201 Created",
													"                    console.error(\"Unexpected POST Class API Response Code: \" + res.code);",
													"                    pm.environment.unset(\"classSourcedId\"); // Clear sourcedId on failure",
													"                    throw new Error(\"POST Class API did not return 201 Created.\");",
													"                }",
													"",
													"                console.log(\"POST Class API succeeded with status: \" + res.code);",
													"",
													"                // --- Subsequent Requests (ScoreScale, AssessmentLineItem) ---",
													"                // Place the pm.sendRequest calls for ScoreScale and AssessmentLineItem here,",
													"                // ensuring they run only after the Class POST request is successful.",
													"",
													"                // Generate and store sourcedId for ScoreScale",
													"                let scoreScaleSourcedId = generateUUID();",
													"                pm.environment.set(\"scoreScaleSourcedId\", scoreScaleSourcedId);",
													"                console.log(\"Generated scoreScaleSourcedId: \" + scoreScaleSourcedId);",
													"",
													"                // Define ScoreScale API URL",
													"                let scoreScaleUrl = pm.environment.get(\"URL\") + pm.environment.get(\"pathPrefix\")+\"/scoreScales/\"+ scoreScaleSourcedId;",
													"",
													"                // Define ScoreScale API Request Body",
													"                let scoreScaleRequestBody = {",
													"                    \"scoreScale\": {",
													"                        \"sourcedId\":pm.environment.get(\"scoreScaleSourcedId\"), //required",
													"                        \"status\": \"active\", //required",
													"                        \"dateLastModified\": isoDateTime, //required",
													"                        \"metadata\": {",
													"                            \"test\": \"metadata\"",
													"                        },",
													"                        \"title\": \"QATestProd\", //required",
													"                        \"type\": \"QATestProd\", //required",
													"                        \"course\": {",
													"                            \"href\": \"/course/\" + pm.environment.get(\"courseSourcedId\"),",
													"                            \"sourcedId\": pm.environment.get(\"courseSourcedId\"),",
													"                            \"type\": \"course\"",
													"                        },",
													"                        \"class\": {  //required",
													"                            \"href\": \"/classes/\" + pm.environment.get(\"classSourcedId\"),",
													"                            \"sourcedId\": pm.environment.get(\"classSourcedId\"),",
													"                            \"type\": \"class\"",
													"                        },",
													"                        \"scoreScaleValue\": [ //required",
													"                            {",
													"                                \"itemValueLHS\": \"0-57\",",
													"                                \"itemValueRHS\": \"F\"",
													"                            },",
													"                            {",
													"                                \"itemValueLHS\": \"60-69\",",
													"                                \"itemValueRHS\": \"D\"",
													"                            },",
													"                            {",
													"                                \"itemValueLHS\": \"70-79\",",
													"                                \"itemValueRHS\": \"C\"",
													"                            },",
													"                            {",
													"                                \"itemValueLHS\": \"80-89\",",
													"                                \"itemValueRHS\": \"B\"",
													"                            },",
													"                            {",
													"                                \"itemValueLHS\": \"90-100\",",
													"                                \"itemValueRHS\": \"A\"",
													"                            }",
													"                        ]",
													"                    }",
													"                }",
													"",
													"                // Make the PUT ScoreScale request",
													"                pm.sendRequest({",
													"                    url: scoreScaleUrl,",
													"                    method: 'PUT',",
													"                    header: headers,",
													"                    body: {",
													"                        mode: 'raw',",
													"                        raw: JSON.stringify(scoreScaleRequestBody)",
													"                    }",
													"                }, function (err, res) {",
													"                    if (err) {",
													"                        console.error(\"PUT ScoreScale API Error: \", err);",
													"                        pm.environment.unset(\"scoreScaleSourcedId\"); // Clear sourcedId on failure",
													"                        throw new Error(\"PUT ScoreScale API request failed.\");",
													"                    }",
													"",
													"                    if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
													"                        console.error(\"Unexpected PUT ScoreScale API Response Code: \" + res.code);",
													"                        pm.environment.unset(\"scoreScaleSourcedId\"); // Clear sourcedId on failure",
													"                        throw new Error(\"PUT ScoreScale API did not return 200 or 201.\");",
													"                    }",
													"",
													"                    console.log(\"PUT ScoreScale API succeeded with status: \" + res.code);",
													"",
													"                    // Generate and store sourcedId for AssessmentLineItem",
													"                    let assessmentLineItemeSourcedId = generateUUID();",
													"                    pm.environment.set(\"assessmentLineItemeSourcedId\", assessmentLineItemeSourcedId);",
													"                    console.log(\"Generated assessmentLineItemeSourcedId: \" + assessmentLineItemeSourcedId);",
													"",
													"                    // Define putAssessmentLineItems API URL",
													"                    let assessmentLineItemsUrl = pm.environment.get(\"URL\") + pm.environment.get(\"pathPrefix\")+\"/assessmentLineItems/\"+ assessmentLineItemeSourcedId;",
													"",
													"                    // Define putAssessmentLineItems API Request Body",
													"                    let assessmentLineItemRequestBody = {",
													"                        \"assessmentLineItem\": {",
													"                            \"sourcedId\": pm.environment.get(\"assessmentLineItemeSourcedId\"),",
													"                            \"status\": \"active\",",
													"                            \"dateLastModified\": isoDateTime, // Use the dynamically generated timestamp",
													"                            \"title\": \"Good Effort\"",
													"                        }",
													"                    }",
													"",
													"                    // Make the PUT AssessmentLineItems request",
													"                    pm.sendRequest({",
													"                        url: assessmentLineItemsUrl,",
													"                        method: 'PUT',",
													"                        header: headers,",
													"                        body: {",
													"                            mode: 'raw',",
													"                            raw: JSON.stringify(assessmentLineItemRequestBody)",
													"                        }",
													"                    }, function (err, res) {",
													"                        if (err) {",
													"                            console.error(\"PUT AssessmentLineItems API Error: \", err);",
													"                            pm.environment.unset(\"assessmentLineItemeSourcedId\"); // Clear sourcedId on failure",
													"                            throw new Error(\"PUT AssessmentLineItems API request failed.\");",
													"                        }",
													"",
													"                        if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
													"                            console.error(\"Unexpected PUT AssessmentLineItems API Response Code: \" + res.code);",
													"                            pm.environment.unset(\"assessmentLineItemeSourcedId\"); // Clear sourcedId on failure",
													"                            throw new Error(\"PUT AssessmentLineItems API did not return 200 or 201.\");",
													"                        }",
													"",
													"                        console.log(\"PUT AssessmentLineItems API succeeded with status: \" + res.code);",
													"                    });",
													"                });",
													"            });",
													"        });",
													"    });",
													"});",
													"",
													"",
													"let uuid = generateUUID();",
													"pm.environment.set(\"randomUUID\", uuid);",
													"",
													"",
													"",
													"",
													"let requestBody = JSON.parse(request.data);",
													"let putAssessmentLineitemRequestBody = requestBody.assessmentLineItem;",
													"",
													"// Store full object as a single environment variable",
													"pm.environment.set(\"putAssessmentLineitemRequestBody\", JSON.stringify(putAssessmentLineitemRequestBody));",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"assessmentLineItem\": {\n        \"sourcedId\": \"{{randomUUID}}\",\n        \"status\": \"active\",\n        \"dateLastModified\": \"{{isoDateTime}}\",\n        \"metadata\": {\n            \"extensions\": {\n                \"fields\": {\n                    \"type\": \"PLACEMENT_TEST\",\n                    \"adaptive\": true,\n                    \"storageName\": \"storageName\",\n                    \"subject\": \"subject\",\n                    \"creator\": [],\n                    \"mediaType\": \"mediaType\",\n                    \"keywords\": null,\n                    \"datePublished\": null,\n                    \"dateToActivate\": null,\n                    \"dateToShow\": null,\n                    \"dateToStartOn\": null,\n                    \"maxAttempts\": null,\n                    \"maxSubmits\": null,\n                    \"version\": null,\n                    \"dueDate\": null,\n                    \"assignDate\": null,\n                    \"schoolId\": null,\n                    \"academicSessionId\": null,\n                    \"categoryId\": null,\n                    \"applicationId\": null,\n                    \"competencyId\": null\n                }\n            }\n        },\n        \"title\": \"AssessmentLineItem\",\n        \"description\": \"This is QA POSTMAN API Automation generated \",\n        \"class\": {\n            \"href\": \"https://example.com\",\n            \"sourcedId\": \"{{classSourcedId}}\",\n            \"type\": \"class\"\n        },\n        \"parentAssessmentLineItem\": {\n            \"href\": \"/classes/b2a85993-8b03-4560-8ab3-d39b56570823\",\n            \"sourcedId\": \"{{assessmentLineItemeSourcedId}}\",\n            \"type\": \"assessmentLineItem\"\n        },\n        \"scoreScale\": {\n            \"href\": \"https://example.com/scoreScale\",\n            \"sourcedId\": \"{{scoreScaleSourcedId}}\",\n            \"type\": \"scoreScale\"\n        },\n        \"resultValueMin\": 90,\n        \"resultValueMax\": 100,\n        \"learningObjectiveSet\": null\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}{{pathPrefix}}/assessmentLineItems/{{randomUUID}}",
											"host": [
												"{{URL}}{{pathPrefix}}"
											],
											"path": [
												"assessmentLineItems",
												"{{randomUUID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate successfull retrieval of Assessment Line Item which is exist",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Set headers dynamically from environment variables",
													"pm.request.headers.upsert({ key: \"Authorization\", value: pm.environment.get(\"Auth\") });",
													"pm.request.headers.upsert({ key: \"x-app-key\", value: pm.environment.get(\"x-app-key\") });",
													"pm.request.headers.upsert({ key: \"x-client-id\", value: pm.environment.get(\"x-client-id\") });",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Parse response JSON",
													"let response = pm.response.json();",
													"",
													"// 1. Validate the response status is success",
													"pm.test(\"Response should have success status\", function () {",
													"    pm.expect(response.imsx_codeMajor).to.eql(\"success\");",
													"});",
													"",
													"// 2. Validate the Status code",
													"pm.test(\"Validate Status Code, It should be 200 OK\", function () {",
													"    pm.expect([200]).to.include(pm.response.code, \"Unexpected status code\");",
													"});",
													"",
													"// Retrieve the stored sourcedId from the environment (set in PUT request)",
													"let sourcedId = pm.environment.get(\"randomUUID\");",
													"",
													"",
													"//3. SourcedId should match the request SourcedId",
													"pm.test(\"Response SourcedId should match with requested sourcedId\", function () {",
													"    pm.expect(response.assessmentLineItem.sourcedId).to.eql(sourcedId);",
													"});",
													"",
													"",
													"pm.test(\"Validate JSON Response Structure\", () => {",
													"    const response = pm.response.json();",
													"",
													"    // Check for the top-level keys",
													"    pm.expect(response).to.have.keys(\"imsx_codeMajor\", \"imsx_severity\", \"assessmentLineItem\");",
													"",
													"    // Validate imsx_codeMajor and imsx_severity types and values",
													"    pm.expect(response.imsx_codeMajor).to.be.a(\"string\");",
													"    pm.expect(response.imsx_severity).to.be.a(\"string\");",
													"    pm.expect(response.imsx_codeMajor).to.eql(\"success\");",
													"    pm.expect(response.imsx_severity).to.eql(\"status\");",
													"",
													"    // Validate assessmentLineItem structure",
													"    const assessmentLineItem = response.assessmentLineItem;",
													"    pm.expect(assessmentLineItem).to.be.an(\"object\");",
													"    pm.expect(assessmentLineItem).to.have.keys(",
													"        \"sourcedId\", \"status\", \"dateLastModified\", \"metadata\", \"title\",",
													"        \"description\", \"class\", \"parentAssessmentLineItem\", \"scoreScale\",",
													"        \"resultValueMin\", \"resultValueMax\", \"learningObjectiveSet\"",
													"    );",
													"",
													"    // Validate assessmentLineItem field types",
													"    pm.expect(assessmentLineItem.sourcedId).to.be.a(\"string\");",
													"    pm.expect(assessmentLineItem.status).to.be.a(\"string\");",
													"    pm.expect(assessmentLineItem.dateLastModified).to.be.a(\"string\");",
													"    pm.expect(assessmentLineItem.metadata).to.be.an(\"object\");",
													"    pm.expect(assessmentLineItem.title).to.be.a(\"string\");",
													"    pm.expect(assessmentLineItem.description).to.be.a(\"string\");",
													"    pm.expect(assessmentLineItem.class).to.be.an(\"object\");",
													"    pm.expect(assessmentLineItem.parentAssessmentLineItem).to.be.an(\"object\");",
													"    pm.expect(assessmentLineItem.scoreScale).to.be.an(\"object\");",
													"    pm.expect(assessmentLineItem.resultValueMin).to.be.a(\"number\");",
													"    pm.expect(assessmentLineItem.resultValueMax).to.be.a(\"number\");",
													"  ",
													"",
													"    // Validate metadata structure",
													"    const metadata = assessmentLineItem.metadata;",
													"    pm.expect(metadata).to.have.key(\"extensions\");",
													"",
													"    // Validate extensions structure",
													"    const extensions = metadata.extensions;",
													"    pm.expect(extensions).to.have.key(\"fields\");",
													"",
													"    // Validate fields structure and types",
													"    const fields = extensions.fields;",
													"    pm.expect(fields).to.be.an(\"object\");",
													"    pm.expect(fields).to.have.keys(",
													"        \"type\", \"adaptive\", \"storageName\", \"subject\", \"creator\", \"mediaType\",",
													"        \"keywords\", \"datePublished\", \"dateToActivate\", \"dateToShow\",",
													"        \"dateToStartOn\", \"maxAttempts\", \"maxSubmits\", \"version\", \"dueDate\",",
													"        \"assignDate\", \"schoolId\", \"academicSessionId\", \"categoryId\",",
													"        \"applicationId\", \"competencyId\"",
													"    );",
													"    pm.expect(fields.type).to.be.a(\"string\").that.is.oneOf([\"PLACEMENT_TEST\", null]);",
													"",
													"    // Validate class structure",
													"    const classObj = assessmentLineItem.class;",
													"    pm.expect(classObj).to.have.keys(\"href\", \"sourcedId\", \"type\");",
													"    pm.expect(classObj.href).to.be.a(\"string\");",
													"    pm.expect(classObj.sourcedId).to.be.a(\"string\");",
													"    pm.expect(classObj.type).to.be.a(\"string\");",
													"",
													"    // Validate parentAssessmentLineItem structure",
													"    const parentAssessmentLineItem = assessmentLineItem.parentAssessmentLineItem;",
													"    pm.expect(parentAssessmentLineItem).to.have.keys(\"href\", \"sourcedId\", \"type\");",
													"    pm.expect(parentAssessmentLineItem.href).to.be.a(\"string\");",
													"    pm.expect(parentAssessmentLineItem.sourcedId).to.be.a(\"string\");",
													"    pm.expect(parentAssessmentLineItem.type).to.be.a(\"string\");",
													"",
													"    // Validate scoreScale structure",
													"    const scoreScale = assessmentLineItem.scoreScale;",
													"    pm.expect(scoreScale).to.have.keys(\"href\", \"sourcedId\", \"type\");",
													"    pm.expect(scoreScale.href).to.be.a(\"string\");",
													"    pm.expect(scoreScale.sourcedId).to.be.a(\"string\");",
													"    pm.expect(scoreScale.type).to.be.a(\"string\");",
													"});",
													"",
													"",
													"pm.test(\"Verify dateLastModified is in ISO 8601 format\", () => {",
													"    const response = pm.response.json();",
													"    const dateLastModified = response.assessmentLineItem.dateLastModified;",
													"    const iso8601Regex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?Z$/;",
													"    pm.expect(dateLastModified).to.match(iso8601Regex);",
													"});",
													"",
													"",
													"pm.test(\"Verify object references 'type' properties have correct values\", () => {",
													"    const response = pm.response.json();",
													"    pm.expect(response.assessmentLineItem.class.type).to.equal(\"class\");",
													"    pm.expect(response.assessmentLineItem.parentAssessmentLineItem.type).to.equal(\"assessmentLineItem\");",
													"    pm.expect(response.assessmentLineItem.scoreScale.type).to.equal(\"scoreScale\");",
													"});",
													"",
													"let actual = pm.response.json().assessmentLineItem;",
													"let expected = JSON.parse(pm.environment.get(\"expectedAssessmentLineItem\"));",
													"",
													"",
													"",
													"pm.test(\" verify status matches\", () => {",
													"    pm.expect(actual.status).to.eql(expected.status);",
													"});",
													"",
													"pm.test(\"verify dateLastModified matches\", () => {",
													"    pm.expect(actual.dateLastModified).to.include(expected.dateLastModified);",
													"});",
													"",
													"pm.test(\"verify title matches\", () => {",
													"    pm.expect(actual.title).to.eql(expected.title);",
													"});",
													"",
													"pm.test(\"verify class sourcedId matches\", () => {",
													"    pm.expect(actual.class.sourcedId).to.eql(expected.class.sourcedId);",
													"});",
													"",
													"pm.test(\"verify parentAssessmentLineItem sourcedId matches\", () => {",
													"    pm.expect(actual.parentAssessmentLineItem.sourcedId).to.eql(expected.parentAssessmentLineItem.sourcedId);",
													"});",
													"",
													"pm.test(\"verify scoreScale sourcedId matches\", () => {",
													"    pm.expect(actual.scoreScale.sourcedId).to.eql(expected.scoreScale.sourcedId);",
													"});",
													"",
													"pm.test(\"verify resultValueMin matches\", () => {",
													"    pm.expect(actual.resultValueMin).to.eql(expected.resultValueMin);",
													"});",
													"",
													"pm.test(\"verify resultValueMax matches\", () => {",
													"    pm.expect(actual.resultValueMax).to.eql(expected.resultValueMax);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL}}{{pathPrefix}}/assessmentLineItems/{{randomUUID}}",
											"host": [
												"{{URL}}{{pathPrefix}}"
											],
											"path": [
												"assessmentLineItems",
												"{{randomUUID}}"
											],
											"query": [
												{
													"key": "fields",
													"value": "title",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate successful retrieval of All Assessment LineItems",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Parse response JSON",
													"let response = pm.response.json();",
													"",
													"// 1. Validate the Status code",
													"pm.test(\"Validate Status Code, It should be 200 OK\", function () {",
													"    pm.expect([200]).to.include(pm.response.code, \"Unexpected status code\");",
													"});",
													"",
													"",
													"pm.test(\"All assessmentLineItems should have Type as PLACEMENT_TEST\", function () {",
													"    let responseData = pm.response.json();",
													"",
													"    pm.expect(responseData).to.have.property(\"assessmentLineItems\");",
													"    pm.expect(responseData.assessmentLineItems).to.be.an(\"array\").that.is.not.empty;",
													"",
													"    responseData.assessmentLineItems.forEach((result, index) => {",
													"        let resultTypePath = `assessmentLineItems[${index}].metadata.extensions.fields.type`;",
													"",
													"        pm.expect(result).to.have.nested.property(\"metadata.extensions.fields.type\", \"PLACEMENT_TEST\", ",
													"            `Mismatch at ${resultTypePath}`);",
													"    });",
													"});",
													"",
													"",
													"",
													"let items = response.assessmentLineItems;",
													"",
													"pm.test(\"Each assessmentLineItem contains all expected fields\", function () {",
													"    pm.expect(items).to.be.an(\"array\").that.is.not.empty;",
													"",
													"    items.forEach((item, index) => {",
													"        console.log(`Validating item ${index + 1}`);",
													"",
													"        // Top-level fields",
													"        pm.expect(item).to.have.property(\"sourcedId\");",
													"        pm.expect(item).to.have.property(\"status\");",
													"        pm.expect(item).to.have.property(\"dateLastModified\");",
													"        pm.expect(item).to.have.property(\"metadata\");",
													"        pm.expect(item).to.have.property(\"title\");",
													"        pm.expect(item).to.have.property(\"description\");",
													"        pm.expect(item).to.have.property(\"class\");",
													"        pm.expect(item).to.have.property(\"parentAssessmentLineItem\");",
													"        pm.expect(item).to.have.property(\"scoreScale\");",
													"        pm.expect(item).to.have.property(\"resultValueMin\");",
													"        pm.expect(item).to.have.property(\"resultValueMax\");",
													"        pm.expect(item).to.have.property(\"learningObjectiveSet\");",
													"",
													"        // metadata.extensions.fields",
													"        if (item.metadata && item.metadata.extensions && item.metadata.extensions.fields) {",
													"            const fields = item.metadata.extensions.fields;",
													"",
													"            const expectedFields = [",
													"                \"type\", \"adaptive\", \"storageName\", \"subject\", \"creator\", \"mediaType\", \"keywords\",",
													"                \"datePublished\", \"dateToActivate\", \"dateToShow\", \"dateToStartOn\", \"maxAttempts\", \"maxSubmits\",",
													"                \"version\", \"dueDate\", \"assignDate\", \"schoolId\", \"academicSessionId\", \"categoryId\",",
													"                \"applicationId\", \"competencyId\"",
													"            ];",
													"",
													"            expectedFields.forEach(field => {",
													"                pm.expect(fields).to.have.property(field);",
													"            });",
													"        } else {",
													"            console.warn(`Item ${index + 1} is missing metadata.extensions.fields`);",
													"        }",
													"",
													"        if (item.class !== null) {",
													"            pm.expect(item.class).to.have.property(\"sourcedId\");",
													"            pm.expect(item.class).to.have.property(\"href\");",
													"            pm.expect(item.class).to.have.property(\"type\");",
													"        }",
													"",
													"        if (item.parentAssessmentLineItem !== null) {",
													"            pm.expect(item.parentAssessmentLineItem).to.have.property(\"sourcedId\");",
													"            pm.expect(item.parentAssessmentLineItem).to.have.property(\"href\");",
													"            pm.expect(item.parentAssessmentLineItem).to.have.property(\"type\");",
													"        }",
													"",
													"        if (item.scoreScale !== null) {",
													"            pm.expect(item.scoreScale).to.have.property(\"sourcedId\");",
													"            pm.expect(item.scoreScale).to.have.property(\"href\");",
													"            pm.expect(item.scoreScale).to.have.property(\"type\");",
													"        }",
													"    });",
													"});",
													"",
													"",
													"let iso8601Regex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d{1,3})?Z$/;",
													"",
													"pm.test(\"Validate dateLastModified is ISO formatted in all objects\", function () {",
													"    items.forEach((item, index) => {",
													" pm.expect(item.dateLastModified, `Item ${index + 1}: 'dateLastModified' is not ISO 8601`).to.match(iso8601Regex);",
													"     });",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Set headers dynamically from environment variables",
													"pm.request.headers.upsert({ key: \"Authorization\", value: pm.environment.get(\"Auth\") });",
													"pm.request.headers.upsert({ key: \"x-app-key\", value: pm.environment.get(\"x-app-key\") });",
													"pm.request.headers.upsert({ key: \"x-client-id\", value: pm.environment.get(\"x-client-id\") });",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}{{pathPrefix}}/assessmentLineItems",
											"host": [
												"{{URL}}{{pathPrefix}}"
											],
											"path": [
												"assessmentLineItems"
											],
											"query": [
												{
													"key": "sort",
													"value": "sourcedId",
													"disabled": true
												},
												{
													"key": "orderBy",
													"value": "ASC",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "resultValueMin",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "10",
													"disabled": true
												},
												{
													"key": "filter",
													"value": "resultValueMin<'90'",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "0",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate successful deletion of existing Assessment LineItem",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate Status Code, It should be 204 No Content\", function () {",
													"    pm.expect([204]).to.include(pm.response.code, \"Unexpected status code\");",
													"});",
													"",
													"",
													"pm.test(\"Response body should be completely empty\", function () {",
													"    pm.expect(pm.response.text()).to.equal(\"\"); // Ensure response body is completely empty",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Set headers dynamically from environment variables",
													"pm.request.headers.upsert({ key: \"Authorization\", value: pm.environment.get(\"Auth\") });",
													"pm.request.headers.upsert({ key: \"x-app-key\", value: pm.environment.get(\"x-app-key\") });",
													"pm.request.headers.upsert({ key: \"x-client-id\", value: pm.environment.get(\"x-client-id\") });",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}{{pathPrefix}}/assessmentLineItems/{{randomUUID}}",
											"host": [
												"{{URL}}{{pathPrefix}}"
											],
											"path": [
												"assessmentLineItems",
												"{{randomUUID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate successfull retrieval of Assessment Line Item which is deleted",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Set headers dynamically from environment variables",
													"pm.request.headers.upsert({ key: \"Authorization\", value: pm.environment.get(\"Auth\") });",
													"pm.request.headers.upsert({ key: \"x-app-key\", value: pm.environment.get(\"x-app-key\") });",
													"pm.request.headers.upsert({ key: \"x-client-id\", value: pm.environment.get(\"x-client-id\") });",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Parse response JSON",
													"let response = pm.response.json();",
													"",
													"// 1. Validate the response status is success",
													"pm.test(\"Response should have success status\", function () {",
													"    pm.expect(response.imsx_codeMajor).to.eql(\"success\");",
													"});",
													"",
													"// 2. Validate the Status code",
													"pm.test(\"Validate Status Code, It should be 200 OK\", function () {",
													"    pm.expect([200]).to.include(pm.response.code, \"Unexpected status code\");",
													"});",
													"",
													"// Retrieve the stored sourcedId from the environment (set in PUT request)",
													"let sourcedId = pm.environment.get(\"randomUUID\");",
													"",
													"",
													"//3. SourcedId should match the request SourcedId",
													"pm.test(\"Response SourcedId should match with requested sourcedId\", function () {",
													"    pm.expect(response.assessmentLineItem.sourcedId).to.eql(sourcedId);",
													"});",
													"",
													"",
													"pm.test(\"Validate JSON Response Structure\", () => {",
													"    const response = pm.response.json();",
													"",
													"    // Check for the top-level keys",
													"    pm.expect(response).to.have.keys(\"imsx_codeMajor\", \"imsx_severity\", \"assessmentLineItem\");",
													"",
													"    // Validate imsx_codeMajor and imsx_severity types and values",
													"    pm.expect(response.imsx_codeMajor).to.be.a(\"string\");",
													"    pm.expect(response.imsx_severity).to.be.a(\"string\");",
													"    pm.expect(response.imsx_codeMajor).to.eql(\"success\");",
													"    pm.expect(response.imsx_severity).to.eql(\"status\");",
													"",
													"    // Validate assessmentLineItem structure",
													"    const assessmentLineItem = response.assessmentLineItem;",
													"    pm.expect(assessmentLineItem).to.be.an(\"object\");",
													"    pm.expect(assessmentLineItem).to.have.keys(",
													"        \"sourcedId\", \"status\", \"dateLastModified\", \"metadata\", \"title\",",
													"        \"description\", \"class\", \"parentAssessmentLineItem\", \"scoreScale\",",
													"        \"resultValueMin\", \"resultValueMax\", \"learningObjectiveSet\"",
													"    );",
													"",
													"    // Validate assessmentLineItem field types",
													"    pm.expect(assessmentLineItem.sourcedId).to.be.a(\"string\");",
													"    pm.expect(assessmentLineItem.status).to.be.a(\"string\");",
													"    pm.expect(assessmentLineItem.dateLastModified).to.be.a(\"string\");",
													"    pm.expect(assessmentLineItem.metadata).to.be.an(\"object\");",
													"    pm.expect(assessmentLineItem.title).to.be.a(\"string\");",
													"    pm.expect(assessmentLineItem.description).to.be.a(\"string\");",
													"    pm.expect(assessmentLineItem.class).to.be.an(\"object\");",
													"    pm.expect(assessmentLineItem.parentAssessmentLineItem).to.be.an(\"object\");",
													"    pm.expect(assessmentLineItem.scoreScale).to.be.an(\"object\");",
													"    pm.expect(assessmentLineItem.resultValueMin).to.be.a(\"number\");",
													"    pm.expect(assessmentLineItem.resultValueMax).to.be.a(\"number\");",
													"  ",
													"",
													"    // Validate metadata structure",
													"    const metadata = assessmentLineItem.metadata;",
													"    pm.expect(metadata).to.have.key(\"extensions\");",
													"",
													"    // Validate extensions structure",
													"    const extensions = metadata.extensions;",
													"    pm.expect(extensions).to.have.key(\"fields\");",
													"",
													"    // Validate fields structure and types",
													"    const fields = extensions.fields;",
													"    pm.expect(fields).to.be.an(\"object\");",
													"    pm.expect(fields).to.have.keys(",
													"        \"type\", \"adaptive\", \"storageName\", \"subject\", \"creator\", \"mediaType\",",
													"        \"keywords\", \"datePublished\", \"dateToActivate\", \"dateToShow\",",
													"        \"dateToStartOn\", \"maxAttempts\", \"maxSubmits\", \"version\", \"dueDate\",",
													"        \"assignDate\", \"schoolId\", \"academicSessionId\", \"categoryId\",",
													"        \"applicationId\", \"competencyId\"",
													"    );",
													"    pm.expect(fields.type).to.be.a(\"string\").that.is.oneOf([\"PLACEMENT_TEST\", null]);",
													"",
													"    // Validate class structure",
													"    const classObj = assessmentLineItem.class;",
													"    pm.expect(classObj).to.have.keys(\"href\", \"sourcedId\", \"type\");",
													"    pm.expect(classObj.href).to.be.a(\"string\");",
													"    pm.expect(classObj.sourcedId).to.be.a(\"string\");",
													"    pm.expect(classObj.type).to.be.a(\"string\");",
													"",
													"    // Validate parentAssessmentLineItem structure",
													"    const parentAssessmentLineItem = assessmentLineItem.parentAssessmentLineItem;",
													"    pm.expect(parentAssessmentLineItem).to.have.keys(\"href\", \"sourcedId\", \"type\");",
													"    pm.expect(parentAssessmentLineItem.href).to.be.a(\"string\");",
													"    pm.expect(parentAssessmentLineItem.sourcedId).to.be.a(\"string\");",
													"    pm.expect(parentAssessmentLineItem.type).to.be.a(\"string\");",
													"",
													"    // Validate scoreScale structure",
													"    const scoreScale = assessmentLineItem.scoreScale;",
													"    pm.expect(scoreScale).to.have.keys(\"href\", \"sourcedId\", \"type\");",
													"    pm.expect(scoreScale.href).to.be.a(\"string\");",
													"    pm.expect(scoreScale.sourcedId).to.be.a(\"string\");",
													"    pm.expect(scoreScale.type).to.be.a(\"string\");",
													"});",
													"",
													"",
													"pm.test(\"Verify dateLastModified is in ISO 8601 format\", () => {",
													"    const response = pm.response.json();",
													"    const dateLastModified = response.assessmentLineItem.dateLastModified;",
													"    const iso8601Regex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?Z$/;",
													"    pm.expect(dateLastModified).to.match(iso8601Regex);",
													"});",
													"",
													"",
													"pm.test(\"Verify object references 'type' properties have correct values\", () => {",
													"    const response = pm.response.json();",
													"    pm.expect(response.assessmentLineItem.class.type).to.equal(\"class\");",
													"    pm.expect(response.assessmentLineItem.parentAssessmentLineItem.type).to.equal(\"assessmentLineItem\");",
													"    pm.expect(response.assessmentLineItem.scoreScale.type).to.equal(\"scoreScale\");",
													"});",
													"",
													"let actual = pm.response.json().assessmentLineItem;",
													"let expected = JSON.parse(pm.environment.get(\"expectedAssessmentLineItem\"));",
													"",
													"",
													"",
													"pm.test(\" verify status matches\", () => {",
													"    pm.expect(actual.status).to.eql(\"tobedeleted\");",
													"});",
													"",
													"pm.test(\"verify dateLastModified matches\", () => {",
													"    pm.expect(actual.dateLastModified).to.include(expected.dateLastModified);",
													"});",
													"",
													"pm.test(\"verify title matches\", () => {",
													"    pm.expect(actual.title).to.eql(expected.title);",
													"});",
													"",
													"pm.test(\"verify class sourcedId matches\", () => {",
													"    pm.expect(actual.class.sourcedId).to.eql(expected.class.sourcedId);",
													"});",
													"",
													"pm.test(\"verify parentAssessmentLineItem sourcedId matches\", () => {",
													"    pm.expect(actual.parentAssessmentLineItem.sourcedId).to.eql(expected.parentAssessmentLineItem.sourcedId);",
													"});",
													"",
													"pm.test(\"verify scoreScale sourcedId matches\", () => {",
													"    pm.expect(actual.scoreScale.sourcedId).to.eql(expected.scoreScale.sourcedId);",
													"});",
													"",
													"pm.test(\"verify resultValueMin matches\", () => {",
													"    pm.expect(actual.resultValueMin).to.eql(expected.resultValueMin);",
													"});",
													"",
													"pm.test(\"verify resultValueMax matches\", () => {",
													"    pm.expect(actual.resultValueMax).to.eql(expected.resultValueMax);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL}}{{pathPrefix}}/assessmentLineItems/{{randomUUID}}",
											"host": [
												"{{URL}}{{pathPrefix}}"
											],
											"path": [
												"assessmentLineItems",
												"{{randomUUID}}"
											],
											"query": [
												{
													"key": "fields",
													"value": "title",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Functional",
							"item": [
								{
									"name": "putAssessmentLineItem",
									"item": [
										{
											"name": "Validate successful creation of Assessment LineItem with minimum required field",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Check status code",
															"pm.test(\"Validate Status Code is 201 Created\", function () {",
															"    pm.expect(pm.response.code).to.eql(201);",
															"});",
															"",
															"// Check response body is empty",
															"pm.test(\"Response body should be completely empty\", function () {",
															"    pm.expect(pm.response.text().trim()).to.equal(\"\");",
															"});",
															"",
															"//  Build GET request URL correctly",
															"let getAssessmentLineItemUrl =",
															"    pm.environment.get(\"URL\") +",
															"    pm.environment.get(\"pathPrefix\") +",
															"    \"/assessmentLineItems/\" +",
															"    pm.environment.get(\"sourcedId\");  // used collection variable here",
															"",
															"// Send GET request to validate PUT",
															"pm.sendRequest({",
															"    url: getAssessmentLineItemUrl,",
															"    method: 'GET',",
															"    header: {",
															"        'Authorization': pm.environment.get(\"Auth\"),",
															"        'x-app-key': pm.environment.get(\"x-app-key\"),",
															"        'x-client-id': pm.environment.get(\"x-client-id\"),",
															"        'Content-Type': 'application/json'",
															"    }",
															"}, function (err, res) {",
															"    if (err || res.code !== 200) {",
															"        console.error(\"GET AssessmentLineItem API failed:\", res?.code, err);",
															"        throw new Error(\"GET AssessmentLineItem request failed\");",
															"    }",
															"",
															"    const ali = res.json().assessmentLineItem;",
															"",
															"    //  Parse the original PUT request body",
															"    const originalPut = JSON.parse(pm.environment.get(\"putAssessmentLineitemRequestBody\"));",
															"",
															"    //  Validate required fields match exactly",
															"    pm.test(\"Validate required fields match exactly\", () => {",
															"        pm.expect(ali.sourcedId).to.eql(pm.environment.get(\"sourcedId\"));",
															"        pm.expect(ali.status).to.eql(originalPut.status);",
															"        pm.expect(ali.title).to.eql(originalPut.title);",
															"        pm.expect(ali.description).to.eql(originalPut.description);",
															"",
															"        // ISO date check (we allow time part to differ slightly, so just check it exists)",
															"        pm.expect(ali.dateLastModified).to.not.be.null;",
															"    });",
															"",
															"    //  metadata type check (default behavior)",
															"    pm.test(\"metadata.extensions.fields.type is PLACEMENT_TEST\", () => {",
															"        const type = ali?.metadata?.extensions?.fields?.type;",
															"        pm.expect(type).to.eql(\"PLACEMENT_TEST\");",
															"    });",
															"",
															"    // Optional top-level fields should be null/undefined",
															"    const optionalTopFields = [",
															"        \"class\", \"parentAssessmentLineItem\", \"scoreScale\",",
															"        \"resultValueMin\", \"resultValueMax\", \"learningObjectiveSet\"",
															"    ];",
															"    pm.test(\"Optional fields should be null\", () => {",
															"        optionalTopFields.forEach(field => {",
															"            pm.expect(ali[field], `${field} should be null or undefined`).to.be.oneOf([null, undefined]);",
															"        });",
															"    });",
															"",
															"    // Other metadata fields (excluding type) should be null/empty",
															"    pm.test(\"All metadata fields except `type` should be null\", () => {",
															"        const fields = ali?.metadata?.extensions?.fields || {};",
															"        Object.entries(fields).forEach(([key, value]) => {",
															"            if (key === \"type\") return;",
															"            const isEmpty = [null, \"\", undefined].includes(value) ||",
															"                            (Array.isArray(value) && value.length === 0);",
															"            pm.expect(isEmpty, `${key} should be null or empty`).to.be.true;",
															"        });",
															"    });",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Set headers dynamically from environment variables",
															"pm.request.headers.upsert({ key: \"Authorization\", value: pm.environment.get(\"Auth\") });",
															"pm.request.headers.upsert({ key: \"x-app-key\", value: pm.environment.get(\"x-app-key\") });",
															"pm.request.headers.upsert({ key: \"x-client-id\", value: pm.environment.get(\"x-client-id\") });",
															"",
															"// Generate a random UUID for sourcedId",
															"function generateUUID() {",
															"    let dt = new Date().getTime();",
															"    let uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {",
															"        let r = (dt + Math.random() * 16) % 16 | 0;",
															"        dt = Math.floor(dt / 16);",
															"        return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);",
															"    });",
															"    return uuid;",
															"}",
															"",
															"",
															"// Generate and store sourcedId",
															"let sourcedId = generateUUID();",
															"pm.environment.set(\"sourcedId\", sourcedId);",
															"console.log(\"Generated sourcedId: \" + sourcedId);",
															"",
															"",
															"",
															"",
															"let requestBody = JSON.parse(request.data);",
															"let putAssessmentLineitemRequestBody = requestBody.assessmentLineItem;",
															"",
															"// Store full object as a single collection variable",
															"pm.environment.set(\"putAssessmentLineitemRequestBody\", JSON.stringify(putAssessmentLineitemRequestBody));",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"assessmentLineItem\": {\n        \"sourcedId\": \"{{sourcedId}}\",\n        \"status\": \"active\",\n        \"dateLastModified\": \"{{isoDateTime}}\",\n        \"title\": \"Good Effort\",\n        \"description\": \"This is asdcsd\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}{{pathPrefix}}/assessmentLineItems/{{sourcedId}}",
													"host": [
														"{{URL}}{{pathPrefix}}"
													],
													"path": [
														"assessmentLineItems",
														"{{sourcedId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify API throws an error for parentAssessmentLineItem with of type NON PLACEMENT_TEST",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Parse the JSON response",
															"let jsonData = pm.response.json(); ",
															"",
															"pm.test(\" API should return 404 Not Found\", function () {",
															"  pm.response.to.have.status(404);",
															"});",
															"",
															"",
															"",
															"// Construct expected error message",
															"let parentAssessmentLineItemeSourcedId = pm.environment.get(\"parentAssessmentLineItemeSourcedId\"); // Define the sourcedId here",
															"let expectedErrorMessage = `The ParentAssessmentLine with sourcedId ${parentAssessmentLineItemeSourcedId} was not found or it may have already been deleted.`; // Corrected typo in \"nalready\"",
															"",
															"// Validate the error message exactly",
															"pm.test(\"Verify Error message and it should matches with requested sourcedId \", function () {",
															"    pm.expect(jsonData.imsx_description).to.eql(expectedErrorMessage);",
															"});",
															"",
															"",
															"",
															"pm.test(\"Validate response structure for AsessmentLineItem unknownobject error\", function () {",
															"    const jsonData = pm.response.json();",
															"",
															"    // Top-level fields",
															"    pm.expect(jsonData).to.have.property(\"imsx_codeMajor\", \"failure\");",
															"    pm.expect(jsonData).to.have.property(\"imsx_severity\", \"error\");",
															"    pm.expect(jsonData).to.have.property(\"imsx_description\");",
															"    ",
															"",
															"    // Check imsx_CodeMinor structure",
															"    pm.expect(jsonData).to.have.property(\"imsx_CodeMinor\");",
															"    pm.expect(jsonData.imsx_CodeMinor).to.have.property(\"imsx_codeMinorField\");",
															"    pm.expect(jsonData.imsx_CodeMinor.imsx_codeMinorField).to.be.an(\"array\").that.is.not.empty;",
															"",
															"    // Validate inner fields",
															"    const minorField = jsonData.imsx_CodeMinor.imsx_codeMinorField[0];",
															"    pm.expect(minorField).to.have.property(\"imsx_codeMinorFieldName\", \"TargetEndSystem\");",
															"    pm.expect(minorField).to.have.property(\"imsx_codeMinorFieldValue\", \"unknownobject\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Set headers dynamically from environment variables",
															"pm.request.headers.upsert({ key: \"Authorization\", value: pm.environment.get(\"Auth\") });",
															"pm.request.headers.upsert({ key: \"x-app-key\", value: pm.environment.get(\"x-app-key\") });",
															"pm.request.headers.upsert({ key: \"x-client-id\", value: pm.environment.get(\"x-client-id\") });",
															"",
															"// Generate a random UUID for sourcedId",
															"function generateUUID() {",
															"    let dt = new Date().getTime();",
															"    let uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {",
															"        let r = (dt + Math.random() * 16) % 16 | 0;",
															"        dt = Math.floor(dt / 16);",
															"        return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);",
															"    });",
															"    return uuid;",
															"}",
															"",
															"const headers = {",
															"    'Authorization': pm.environment.get(\"Auth\"),",
															"    'x-app-key': pm.environment.get(\"x-app-key\"),",
															"    'x-client-id': pm.environment.get(\"x-client-id\"),",
															"    'Content-Type': 'application/json'",
															"};",
															"",
															"// Generate and store courseSourcedId",
															"let courseSourcedId = generateUUID();",
															"pm.environment.set(\"courseSourcedId\", courseSourcedId);",
															"console.log(\"Generated courseSourcedId: \" + courseSourcedId);",
															"",
															"// Generate current UTC timestamp in ISO format: 2025-01-29T06:51:57Z",
															"function getCurrentISOString() {",
															"    return new Date().toISOString().split('.')[0] + \"Z\";",
															"}",
															"",
															"// Set dynamic date variables",
															"let isoDateTime = getCurrentISOString(); // full timestamp",
															"let isoDateOnly = isoDateTime.split('T')[0]; // date only",
															"",
															"pm.environment.set(\"isoDateTime\", isoDateTime);",
															"pm.environment.set(\"isoDateOnly\", isoDateOnly);",
															"",
															"console.log(\"Generated ISO DateTime: \" + isoDateTime);",
															"console.log(\"Generated ISO Date Only: \" + isoDateOnly);",
															"",
															"",
															"// Define Course API URL",
															"let courseUrl = pm.environment.get(\"URL\") + pm.environment.get(\"customPathPrefix\")+\"/courses\";",
															"",
															"// Define getAllOrgs API URL",
															"let getAllOrgsUrl = pm.environment.get(\"URL\") + pm.environment.get(\"rosterPathPrefix\")+\"/orgs\";",
															"",
															"// Define Course API Request Body",
															"let courseRequestBody = {",
															"    \"sourcedId\": pm.environment.get(\"courseSourcedId\"), //required",
															"    \"status\": \"active\", //required",
															"    \"title\": \"QA\", //required",
															"    \"courseCode\": \"courseCode\" //required",
															"",
															"}",
															"",
															"",
															"// Make the Course POST request",
															"pm.sendRequest({",
															"    url: courseUrl,",
															"    method: 'POST',",
															"    header: headers,",
															"    body: {",
															"        mode: 'raw',",
															"        raw: JSON.stringify(courseRequestBody)",
															"    }",
															"}, function (err, res) {",
															"    if (err) {",
															"        console.error(\"POST Course API Error: \", err);",
															"        pm.environment.unset(\"courseSourcedId\"); // Clear sourcedId on failure",
															"        throw new Error(\"Course POST API request failed.\");",
															"    }",
															"",
															"    if (res.code !== 201) {  // Ensure status is 201 Created",
															"        console.error(\"Unexpected POST Course API Response Code: \" + res.code);",
															"        pm.environment.unset(\"courseSourcedId\"); // Clear sourcedId on failure",
															"        throw new Error(\"Course POST API did not return 201 Created.\");",
															"    }",
															"",
															"    console.log(\"Course POST API succeeded with status: \" + res.code);",
															"",
															"",
															"",
															"    // Make getAllOrgs Request",
															"    pm.sendRequest({",
															"        url: getAllOrgsUrl,",
															"        method: 'GET',",
															"        header: headers",
															"    }, function (err, res) {",
															"        if (err || res.code !== 200) {",
															"            console.error(\"GET Orgs API Failed. Code:\", res?.code || \"No response\", \"Error:\", err);",
															"            throw new Error(\"GET Orgs API request failed.\");",
															"        }",
															"",
															"        console.log(\"GET Orgs API succeeded with status:\", res.code);",
															"",
															"        let response = res.json();",
															"        let schoolOrgs = response.orgs.filter(org => org.type === \"SCHOOL\");",
															"",
															"        if (schoolOrgs.length === 0) {",
															"            throw new Error(\"No orgs of type 'SCHOOL' found.\");",
															"        }",
															"",
															"        // Get a random school sourcedId",
															"        let randomIndex = Math.floor(Math.random() * schoolOrgs.length);",
															"        let schoolSourcedId = schoolOrgs[randomIndex].sourcedId;",
															"",
															"        console.log(\"Selected school sourcedId: \" + schoolSourcedId);",
															"",
															"        // Save to environment variable for later use",
															"        pm.environment.set(\"school_sourcedId\", schoolSourcedId);",
															"",
															"        // Define getAllterms API URL",
															"        let getAllTermsUrl = pm.environment.get(\"URL\") + pm.environment.get(\"rosterPathPrefix\")+\"/terms\";",
															"",
															"        // Make getAllterms Request",
															"        pm.sendRequest({",
															"            url: getAllTermsUrl,",
															"            method: 'GET',",
															"            header: headers",
															"        }, function (err, res) {",
															"            if (err || res.code !== 200) {",
															"                console.error(\"GET TERMS API Failed. Code:\", res?.code || \"No response\", \"Error:\", err);",
															"                throw new Error(\"GET TERMS API request failed.\");",
															"            }",
															"",
															"            console.log(\"GET TERMS API succeeded with status:\", res.code);",
															"",
															"            let response = res.json();",
															"            let termSessions = response.academicSessions.filter(session => session.type === \"TERM\");",
															"",
															"            if (termSessions.length === 0) {",
															"                throw new Error(\"No academicSessions of type 'TERM' found.\");",
															"            }",
															"",
															"            // Select a random term sourcedId",
															"            let randomIndex = Math.floor(Math.random() * termSessions.length);",
															"            let termSourcedId = termSessions[randomIndex].sourcedId;",
															"",
															"            console.log(\"Selected TERM sourcedId: \" + termSourcedId);",
															"",
															"            // Save to environment variable",
															"            pm.environment.set(\"term_sourcedId\", termSourcedId);",
															"",
															"            // Generate and store classSourcedId",
															"            let classSourcedId = generateUUID();",
															"            pm.environment.set(\"classSourcedId\", classSourcedId);",
															"            console.log(\"Generated classSourcedId: \" + classSourcedId);",
															"",
															"            // Define Class API URL",
															"            let classUrl = pm.environment.get(\"URL\") + pm.environment.get(\"customPathPrefix\")+\"/classes\";",
															"",
															"            // Define Class API Request Body *AFTER* term_sourcedId is set",
															"            let classRequestBody = {",
															"                \"sourcedId\": pm.environment.get(\"classSourcedId\"), //Required",
															"                \"status\": \"active\", //Required",
															"                \"title\": \"title\", //Required",
															"                \"classType\": \"SCHEDULED\", //Required",
															"                \"course\": { //required",
															"                    \"href\": \"/courses/\" + pm.environment.get(\"courseSourcedId\"),",
															"                    \"sourcedId\": pm.environment.get(\"courseSourcedId\"),",
															"                    \"type\": \"course\"",
															"                },",
															"                \"school\": { //required",
															"                    \"href\": \"/org/\" + pm.environment.get(\"school_sourcedId\"),",
															"                    \"sourcedId\": pm.environment.get(\"school_sourcedId\"),",
															"                    \"type\": \"org\"",
															"                },",
															"                \"terms\": [ //required",
															"                    {",
															"                        \"href\": \"/academicSession/\" + pm.environment.get(\"term_sourcedId\"),",
															"                        \"sourcedId\": pm.environment.get(\"term_sourcedId\"),",
															"                        \"type\": \"academicSession\"",
															"                    }",
															"                ]",
															"            }",
															"",
															"            // Make the Class POST request",
															"            pm.sendRequest({",
															"                url: classUrl,",
															"                method: 'POST',",
															"                header: headers,",
															"                body: {",
															"                    mode: 'raw',",
															"                    raw: JSON.stringify(classRequestBody)",
															"                }",
															"            }, function (err, res) {",
															"                if (err) {",
															"                    console.error(\"POST Class API Error: \", err);",
															"                    pm.environment.unset(\"classSourcedId\"); // Clear sourcedId on failure",
															"                    throw new Error(\"Class POST API request failed.\");",
															"                }",
															"",
															"                if (res.code !== 201) {  // Ensure status is 201 Created",
															"                    console.error(\"Unexpected POST Class API Response Code: \" + res.code);",
															"                    pm.environment.unset(\"classSourcedId\"); // Clear sourcedId on failure",
															"                    throw new Error(\"POST Class API did not return 201 Created.\");",
															"                }",
															"",
															"                console.log(\"POST Class API succeeded with status: \" + res.code);",
															"",
															"                // --- Subsequent Requests (Category, ScoreScale, AssessmentLineItem) ---",
															"",
															"                // Generate and store sourcedId for Category",
															"                let categorySourcedId = generateUUID();",
															"                pm.environment.set(\"categorySourcedId\", categorySourcedId);",
															"                console.log(\"Generated categorySourcedId: \" + categorySourcedId);",
															"",
															"                // Define Category API URL",
															"                let categoryUrl = pm.environment.get(\"URL\") + pm.environment.get(\"pathPrefix\")+\"/categories/\"+ categorySourcedId;",
															"",
															"                // Define Category API Request Body",
															"                let categoryRequestBody = {",
															"                    \"category\": {",
															"                        \"sourcedId\": pm.environment.get(\"categorySourcedId\"),",
															"                        \"status\": \"active\",",
															"                        \"dateLastModified\": isoDateTime,",
															"                        \"metadata\": {},",
															"                        \"title\": \"title\",",
															"                        \"weight\": 3",
															"                    }",
															"                }",
															"",
															"                // Make the PUT Category request",
															"                pm.sendRequest({",
															"                    url: categoryUrl,",
															"                    method: 'PUT',",
															"                    header: headers,",
															"                    body: {",
															"                        mode: 'raw',",
															"                        raw: JSON.stringify(categoryRequestBody)",
															"                    }",
															"                }, function (err, res) {",
															"                    if (err) {",
															"                        console.error(\"PUT Category API Error: \", err);",
															"                        pm.environment.unset(\"categorySourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT Category API request failed.\");",
															"                    }",
															"",
															"                    if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
															"                        console.error(\"Unexpected PUT Category API Response Code: \" + res.code);",
															"                        pm.environment.unset(\"categorySourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT Category API did not return 200 or 201.\");",
															"                    }",
															"",
															"                    console.log(\"PUT Category API succeeded with status: \" + res.code);",
															"",
															"                    // Generate and store sourcedId for ScoreScale",
															"                    let scoreScaleSourcedId = generateUUID();",
															"                    pm.environment.set(\"scoreScaleSourcedId\", scoreScaleSourcedId);",
															"                    console.log(\"Generated scoreScaleSourcedId: \" + scoreScaleSourcedId);",
															"",
															"                    // Define ScoreScale API URL",
															"                    let scoreScaleUrl = pm.environment.get(\"URL\") + pm.environment.get(\"pathPrefix\")+\"/scoreScales/\"+ scoreScaleSourcedId;",
															"",
															"                    // Define ScoreScale API Request Body",
															"                    let scoreScaleRequestBody = {",
															"                        \"scoreScale\": {",
															"                            \"sourcedId\":pm.environment.get(\"scoreScaleSourcedId\"), //required",
															"                            \"status\": \"active\", //required",
															"                            \"dateLastModified\": isoDateTime, //required",
															"                            \"metadata\": {",
															"                                \"test\": \"metadata\"",
															"                            },",
															"                            \"title\": \"QATestProd\", //required",
															"                            \"type\": \"QATestProd\", //required",
															"                            \"course\": {",
															"                                \"href\": \"/course/\" + pm.environment.get(\"courseSourcedId\"),",
															"                                \"sourcedId\": pm.environment.get(\"courseSourcedId\"),",
															"                                \"type\": \"course\"",
															"                            },",
															"                            \"class\": {  //required",
															"                                \"href\": \"/classes/\" + pm.environment.get(\"classSourcedId\"),",
															"                                \"sourcedId\": pm.environment.get(\"classSourcedId\"),",
															"                                \"type\": \"class\"",
															"                            },",
															"                            \"scoreScaleValue\": [ //required",
															"                                {",
															"                                    \"itemValueLHS\": \"0-57\",",
															"                                    \"itemValueRHS\": \"F\"",
															"                                },",
															"                                {",
															"                                    \"itemValueLHS\": \"60-69\",",
															"                                    \"itemValueRHS\": \"D\"",
															"                                },",
															"                                {",
															"                                    \"itemValueLHS\": \"70-79\",",
															"                                    \"itemValueRHS\": \"C\"",
															"                                },",
															"                                {",
															"                                    \"itemValueLHS\": \"80-89\",",
															"                                    \"itemValueRHS\": \"B\"",
															"                                },",
															"                                {",
															"                                    \"itemValueLHS\": \"90-100\",",
															"                                    \"itemValueRHS\": \"A\"",
															"                                }",
															"                            ]",
															"                        }",
															"                    }",
															"",
															"                    // Make the PUT ScoreScale request",
															"                    pm.sendRequest({",
															"                        url: scoreScaleUrl,",
															"                        method: 'PUT',",
															"                        header: headers,",
															"                        body: {",
															"                            mode: 'raw',",
															"                            raw: JSON.stringify(scoreScaleRequestBody)",
															"                        }",
															"                    }, function (err, res) {",
															"                        if (err) {",
															"                            console.error(\"PUT ScoreScale API Error: \", err);",
															"                            pm.environment.unset(\"scoreScaleSourcedId\"); // Clear sourcedId on failure",
															"                            throw new Error(\"PUT ScoreScale API request failed.\");",
															"                        }",
															"",
															"                        if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
															"                            console.error(\"Unexpected PUT ScoreScale API Response Code: \" + res.code);",
															"                            pm.environment.unset(\"scoreScaleSourcedId\"); // Clear sourcedId on failure",
															"                            throw new Error(\"PUT ScoreScale API did not return 200 or 201.\");",
															"                        }",
															"",
															"                        console.log(\"PUT ScoreScale API succeeded with status: \" + res.code);",
															"",
															"                        // Generate and store sourcedId for AssessmentLineItem",
															"                        let parentAssessmentLineItemeSourcedId = generateUUID();",
															"                        pm.environment.set(\"parentAssessmentLineItemeSourcedId\", parentAssessmentLineItemeSourcedId);",
															"                        console.log(\"Generated parentAssessmentLineItemeSourcedId: \" + parentAssessmentLineItemeSourcedId);",
															"",
															"                        // Define LineItems API URL",
															"                        let lineItemsUrl = pm.environment.get(\"URL\") + pm.environment.get(\"pathPrefix\")+\"/lineItems/\"+ parentAssessmentLineItemeSourcedId;",
															"",
															"                        // Define putLineItems API Request Body",
															"                        let lineItemRequestBody = {",
															"                            \"lineItem\": {",
															"                                \"sourcedId\": pm.environment.get(\"parentAssessmentLineItemeSourcedId\"), //required",
															"                                \"status\": \"active\", //required",
															"                                \"dateLastModified\": isoDateTime, // Correct UTC ISO8601 format //required",
															"                                \"title\": \"Math\\nTest\", //required",
															"                                \"assignDate\": isoDateTime, // Correct UTC ISO8601 format //required",
															"                                \"dueDate\": isoDateTime, // Correct UTC ISO8601 format //required",
															"                                \"class\": { //required",
															"                                    \"href\": \"/classes/\" + pm.environment.get(\"classSourcedId\"),",
															"                                    \"sourcedId\": pm.environment.get(\"classSourcedId\"),",
															"                                    \"type\": \"class\"",
															"                                },",
															"                                \"school\": { //required",
															"                                    \"href\": \"/org/\" + pm.environment.get(\"school_sourcedId\"),",
															"                                    \"sourcedId\": pm.environment.get(\"school_sourcedId\"),",
															"                                    \"type\": \"org\"",
															"                                },",
															"                                \"category\": { //required",
															"                                    \"href\": \"/categories/\" + pm.environment.get(\"categorySourcedId\"),",
															"                                    \"sourcedId\": pm.environment.get(\"categorySourcedId\"),",
															"                                    \"type\": \"category\"",
															"                                }",
															"                            }",
															"                        }",
															"                        // Make the PUT AssessmentLineItems request",
															"                    pm.sendRequest({",
															"                        url: lineItemsUrl,",
															"                        method: 'PUT',",
															"                        header: headers,",
															"                        body: {",
															"                            mode: 'raw',",
															"                            raw: JSON.stringify(lineItemRequestBody)",
															"                        }",
															"                    }",
															"                        , function (err, res) {",
															"                            if (err) {",
															"                                console.error(\"PUT LineItems API Error: \", err);",
															"                                pm.environment.unset(\"parentAssessmentLineItemeSourcedId\"); // Clear sourcedId on failure",
															"                                throw new Error(\"PUT LineItems API request failed.\");",
															"                            }",
															"",
															"                            if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
															"                                console.error(\"Unexpected PUT LineItems API Response Code: \" + res.code);",
															"                                pm.environment.unset(\"parentAssessmentLineItemeSourcedId\"); // Clear sourcedId on failure",
															"                                throw new Error(\"PUT LineItems API did not return 200 or 201.\");",
															"                            }",
															"",
															"                            console.log(\"PUT LineItems API succeeded with status: \" + res.code);",
															"                        });",
															"                    });",
															"                });",
															"            });",
															"        });",
															"   });",
															"});",
															"",
															"let uuid = generateUUID();",
															"pm.environment.set(\"randomUUID\", uuid);",
															"",
															"let requestBody = JSON.parse(request.data);",
															"let putAssessmentLineitemRequestBody = requestBody.assessmentLineItem;",
															"",
															"// Store full object as a single environment variable",
															"pm.environment.set(\"putAssessmentLineitemRequestBody\", JSON.stringify(putAssessmentLineitemRequestBody));",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJjbGllbnROYW1lIjoiYWxwaGEiLCJjbGllbnRJZCI6Ijk3OGNmNzE4ZjVjMjY2ODQiLCJhZG1pblVzZXIiOiJBZG1pblVzZXIiLCJhZG1pbkVtYWlsIjoiYWxwaGFAYWxwaGEuY29tIiwiY29nbml0b1VzZXJJZCI6ImNvZ25pdG8tMTIzIiwic2NvcGVzIjpbInJlYWQiLCJ3cml0ZSJdLCJpYXQiOjE3MzM3MTM0NzUsImV4cCI6MTc2NTI0OTQ3NSwiaXNzIjoiYWxwaGEifQ.m_XkirIn8QeH9-C0og9CDQyUVD97IAzL6kNoi4GilD3XpwXMVoC6TnkEqxYTqgHsXrtUslY6hCjhLC9ij7xiPSISiWpu66pQ6E93wzM-4VPQHjb2ZdzDSStj3osI4_9dMdWmCjwdXOjLy49K_D8P6NjkxeXkK7erzdZZrg8-hesZT4H2zg_XjDSh6Xj2yWoDPVggLqXc1RtDh324MHaF643eAitd3n-QDul0X0PuXDWxRqm8OISHiM7uzSXX-sjOjiKxvtSjmKGmrGrq3AD8TqAnNbkE-v6mA-gWDPzKYQ9Eykst1Owqnc8Nuvb5rvepKta0gRPKXTrfOZNdLUMJlg",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"assessmentLineItem\": {\n        \"sourcedId\": \"{{randomUUID}}\",\n        \"status\": \"active\",\n        \"dateLastModified\": \"{{isoDateTime}}\",\n        \"metadata\": {\n            \"extensions\": {\n                \"fields\": {\n                    \"type\": \"PLACEMENT_TEST\",\n                    \"adaptive\": true,\n                    \"storageName\": \"storageName\",\n                    \"subject\": \"subject\",\n                    \"creator\": [],\n                    \"mediaType\": \"mediaType\",\n                    \"keywords\": null,\n                    \"datePublished\": null,\n                    \"dateToActivate\": null,\n                    \"dateToShow\": null,\n                    \"dateToStartOn\": null,\n                    \"maxAttempts\": null,\n                    \"maxSubmits\": null,\n                    \"version\": null,\n                    \"dueDate\": null,\n                    \"assignDate\": null,\n                    \"schoolId\": null,\n                    \"academicSessionId\": null,\n                    \"categoryId\": null,\n                    \"applicationId\": null,\n                    \"competencyId\": null\n                }\n            }\n        },\n        \"title\": \"AssessmentLineItem\",\n        \"description\": \"This is QA POSTMAN API Automation generated \",\n        \"class\": {\n            \"href\": \"https://example.com\",\n            \"sourcedId\": \"{{classSourcedId}}\",\n            \"type\": \"class\"\n        },\n        \"parentAssessmentLineItem\": {\n            \"href\": \"/classes/b2a85993-8b03-4560-8ab3-d39b56570823\",\n            \"sourcedId\": \"{{parentAssessmentLineItemeSourcedId}}\", \n            \"type\": \"assessmentLineItem\"\n        },\n        \"scoreScale\": {\n            \"href\": \"https://example.com/scoreScale\",\n            \"sourcedId\": \"{{scoreScaleSourcedId}}\",\n            \"type\": \"scoreScale\"\n        },\n        \"resultValueMin\": 90,\n        \"resultValueMax\": 100,\n        \"learningObjectiveSet\": null\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}{{pathPrefix}}/assessmentLineItems/{{randomUUID}}",
													"host": [
														"{{URL}}{{pathPrefix}}"
													],
													"path": [
														"assessmentLineItems",
														"{{randomUUID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify API throws an error for parentAssessmentLineItem with of type NON PLACEMENT_TEST which is deleted",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Parse the JSON response",
															"let jsonData = pm.response.json(); ",
															"",
															"pm.test(\" API should return 404 Not Found\", function () {",
															"  pm.response.to.have.status(404);",
															"});",
															"",
															"",
															"",
															"// Construct expected error message",
															"let lineItemeSourcedId = pm.environment.get(\"lineItemeSourcedId\"); // Define the sourcedId here",
															"let expectedErrorMessage = `The ParentAssessmentLine with sourcedId ${lineItemeSourcedId} was not found or it may have already been deleted.`; // Corrected typo in \"nalready\"",
															"",
															"// Validate the error message exactly",
															"pm.test(\"Verify Error message and it should matches with requested sourcedId \", function () {",
															"    pm.expect(jsonData.imsx_description).to.eql(expectedErrorMessage);",
															"});",
															"",
															"",
															"",
															"pm.test(\"Validate response structure for AsessmentLineItem unknownobject error\", function () {",
															"    const jsonData = pm.response.json();",
															"",
															"    // Top-level fields",
															"    pm.expect(jsonData).to.have.property(\"imsx_codeMajor\", \"failure\");",
															"    pm.expect(jsonData).to.have.property(\"imsx_severity\", \"error\");",
															"    pm.expect(jsonData).to.have.property(\"imsx_description\");",
															"    ",
															"",
															"    // Check imsx_CodeMinor structure",
															"    pm.expect(jsonData).to.have.property(\"imsx_CodeMinor\");",
															"    pm.expect(jsonData.imsx_CodeMinor).to.have.property(\"imsx_codeMinorField\");",
															"    pm.expect(jsonData.imsx_CodeMinor.imsx_codeMinorField).to.be.an(\"array\").that.is.not.empty;",
															"",
															"    // Validate inner fields",
															"    const minorField = jsonData.imsx_CodeMinor.imsx_codeMinorField[0];",
															"    pm.expect(minorField).to.have.property(\"imsx_codeMinorFieldName\", \"TargetEndSystem\");",
															"    pm.expect(minorField).to.have.property(\"imsx_codeMinorFieldValue\", \"unknownobject\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Set headers dynamically from environment variables",
															"pm.request.headers.upsert({ key: \"Authorization\", value: pm.environment.get(\"Auth\") });",
															"pm.request.headers.upsert({ key: \"x-app-key\", value: pm.environment.get(\"x-app-key\") });",
															"pm.request.headers.upsert({ key: \"x-client-id\", value: pm.environment.get(\"x-client-id\") });",
															"",
															"// Generate a random UUID for sourcedId",
															"function generateUUID() {",
															"    let dt = new Date().getTime();",
															"    let uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {",
															"        let r = (dt + Math.random() * 16) % 16 | 0;",
															"        dt = Math.floor(dt / 16);",
															"        return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);",
															"    });",
															"    return uuid;",
															"}",
															"",
															"const headers = {",
															"    'Authorization': pm.environment.get(\"Auth\"),",
															"    'x-app-key': pm.environment.get(\"x-app-key\"),",
															"    'x-client-id': pm.environment.get(\"x-client-id\"),",
															"    'Content-Type': 'application/json'",
															"};",
															"",
															"// Generate and store courseSourcedId",
															"let courseSourcedId = generateUUID();",
															"pm.environment.set(\"courseSourcedId\", courseSourcedId);",
															"console.log(\"Generated courseSourcedId: \" + courseSourcedId);",
															"",
															"// Generate current UTC timestamp in ISO format: 2025-01-29T06:51:57Z",
															"function getCurrentISOString() {",
															"    return new Date().toISOString().split('.')[0] + \"Z\";",
															"}",
															"",
															"// Set dynamic date variables",
															"let isoDateTime = getCurrentISOString(); // full timestamp",
															"let isoDateOnly = isoDateTime.split('T')[0]; // date only",
															"",
															"pm.environment.set(\"isoDateTime\", isoDateTime);",
															"pm.environment.set(\"isoDateOnly\", isoDateOnly);",
															"",
															"console.log(\"Generated ISO DateTime: \" + isoDateTime);",
															"console.log(\"Generated ISO Date Only: \" + isoDateOnly);",
															"",
															"",
															"// Define Course API URL",
															"let courseUrl = pm.environment.get(\"URL\") + pm.environment.get(\"customPathPrefix\")+\"/courses\";",
															"",
															"// Define Course API Request Body",
															"let courseRequestBody = {",
															"    \"sourcedId\": pm.environment.get(\"courseSourcedId\"), //required",
															"    \"status\": \"active\", //required",
															"    \"title\": \"QA\", //required",
															"    \"courseCode\": \"courseCode\" //required",
															"",
															"}",
															"",
															"",
															"// Make the Course POST request",
															"pm.sendRequest({",
															"    url: courseUrl,",
															"    method: 'POST',",
															"    header: headers,",
															"    body: {",
															"        mode: 'raw',",
															"        raw: JSON.stringify(courseRequestBody)",
															"    }",
															"}, function (err, res) {",
															"    if (err) {",
															"        console.error(\"POST Course API Error: \", err);",
															"        pm.environment.unset(\"courseSourcedId\"); // Clear sourcedId on failure",
															"        throw new Error(\"Course POST API request failed.\");",
															"    }",
															"",
															"    if (res.code !== 201) {  // Ensure status is 201 Created",
															"        console.error(\"Unexpected POST Course API Response Code: \" + res.code);",
															"        pm.environment.unset(\"courseSourcedId\"); // Clear sourcedId on failure",
															"        throw new Error(\"Course POST API did not return 201 Created.\");",
															"    }",
															"",
															"    console.log(\"Course POST API succeeded with status: \" + res.code);",
															"",
															"    // Define getAllOrgs API URL",
															"    let getAllOrgsUrl = pm.environment.get(\"URL\") + pm.environment.get(\"rosterPathPrefix\")+\"/orgs\";",
															"",
															"    // Make getAllOrgs Request",
															"    pm.sendRequest({",
															"        url: getAllOrgsUrl,",
															"        method: 'GET',",
															"        header: headers",
															"    }, function (err, res) {",
															"        if (err || res.code !== 200) {",
															"            console.error(\"GET Orgs API Failed. Code:\", res?.code || \"No response\", \"Error:\", err);",
															"            throw new Error(\"GET Orgs API request failed.\");",
															"        }",
															"",
															"        console.log(\"GET Orgs API succeeded with status:\", res.code);",
															"",
															"        let response = res.json();",
															"        let schoolOrgs = response.orgs.filter(org => org.type === \"SCHOOL\");",
															"",
															"        if (schoolOrgs.length === 0) {",
															"            throw new Error(\"No orgs of type 'SCHOOL' found.\");",
															"        }",
															"",
															"        // Get a random school sourcedId",
															"        let randomIndex = Math.floor(Math.random() * schoolOrgs.length);",
															"        let schoolSourcedId = schoolOrgs[randomIndex].sourcedId;",
															"",
															"        console.log(\"Selected school sourcedId: \" + schoolSourcedId);",
															"",
															"        // Save to environment variable for later use",
															"        pm.environment.set(\"school_sourcedId\", schoolSourcedId);",
															"",
															"        // Define getAllterms API URL",
															"        let getAllTermsUrl = pm.environment.get(\"URL\") + pm.environment.get(\"rosterPathPrefix\")+\"/terms\";",
															"",
															"        // Make getAllterms Request",
															"        pm.sendRequest({",
															"            url: getAllTermsUrl,",
															"            method: 'GET',",
															"            header: headers",
															"        }, function (err, res) {",
															"            if (err || res.code !== 200) {",
															"                console.error(\"GET TERMS API Failed. Code:\", res?.code || \"No response\", \"Error:\", err);",
															"                throw new Error(\"GET TERMS API request failed.\");",
															"            }",
															"",
															"            console.log(\"GET TERMS API succeeded with status:\", res.code);",
															"",
															"            let response = res.json();",
															"            let termSessions = response.academicSessions.filter(session => session.type === \"TERM\");",
															"",
															"            if (termSessions.length === 0) {",
															"                throw new Error(\"No academicSessions of type 'TERM' found.\");",
															"            }",
															"",
															"            // Select a random term sourcedId",
															"            let randomIndex = Math.floor(Math.random() * termSessions.length);",
															"            let termSourcedId = termSessions[randomIndex].sourcedId;",
															"",
															"            console.log(\"Selected TERM sourcedId: \" + termSourcedId);",
															"",
															"            // Save to environment variable",
															"            pm.environment.set(\"term_sourcedId\", termSourcedId);",
															"",
															"            // Generate and store classSourcedId",
															"            let classSourcedId = generateUUID();",
															"            pm.environment.set(\"classSourcedId\", classSourcedId);",
															"            console.log(\"Generated classSourcedId: \" + classSourcedId);",
															"",
															"            // Define Class API URL",
															"            let classUrl = pm.environment.get(\"URL\") + pm.environment.get(\"customPathPrefix\")+\"/classes\";",
															"",
															"            // Define Class API Request Body *AFTER* term_sourcedId is set",
															"            let classRequestBody = {",
															"                \"sourcedId\": pm.environment.get(\"classSourcedId\"), //Required",
															"                \"status\": \"active\", //Required",
															"                \"title\": \"title\", //Required",
															"                \"classType\": \"SCHEDULED\", //Required",
															"                \"course\": { //required",
															"                    \"href\": \"/courses/\" + pm.environment.get(\"courseSourcedId\"),",
															"                    \"sourcedId\": pm.environment.get(\"courseSourcedId\"),",
															"                    \"type\": \"course\"",
															"                },",
															"                \"school\": { //required",
															"                    \"href\": \"/org/\" + pm.environment.get(\"school_sourcedId\"),",
															"                    \"sourcedId\": pm.environment.get(\"school_sourcedId\"),",
															"                    \"type\": \"org\"",
															"                },",
															"                \"terms\": [ //required",
															"                    {",
															"                        \"href\": \"/academicSession/\" + pm.environment.get(\"term_sourcedId\"),",
															"                        \"sourcedId\": pm.environment.get(\"term_sourcedId\"),",
															"                        \"type\": \"academicSession\"",
															"                    }",
															"                ]",
															"            }",
															"",
															"            // Make the Class POST request",
															"            pm.sendRequest({",
															"                url: classUrl,",
															"                method: 'POST',",
															"                header: headers,",
															"                body: {",
															"                    mode: 'raw',",
															"                    raw: JSON.stringify(classRequestBody)",
															"                }",
															"            }, function (err, res) {",
															"                if (err) {",
															"                    console.error(\"POST Class API Error: \", err);",
															"                    pm.environment.unset(\"classSourcedId\"); // Clear sourcedId on failure",
															"                    throw new Error(\"Class POST API request failed.\");",
															"                }",
															"",
															"                if (res.code !== 201) {  // Ensure status is 201 Created",
															"                    console.error(\"Unexpected POST Class API Response Code: \" + res.code);",
															"                    pm.environment.unset(\"classSourcedId\"); // Clear sourcedId on failure",
															"                    throw new Error(\"POST Class API did not return 201 Created.\");",
															"                }",
															"",
															"                console.log(\"POST Class API succeeded with status: \" + res.code);",
															"",
															"                // --- Subsequent Requests (Category, ScoreScale, AssessmentLineItem) ---",
															"",
															"                // Generate and store sourcedId for Category",
															"                let categorySourcedId = generateUUID();",
															"                pm.environment.set(\"categorySourcedId\", categorySourcedId);",
															"                console.log(\"Generated categorySourcedId: \" + categorySourcedId);",
															"",
															"                // Define Category API URL",
															"                let categoryUrl = pm.environment.get(\"URL\") + pm.environment.get(\"pathPrefix\")+\"/categories/\"+ categorySourcedId;",
															"",
															"                // Define Category API Request Body",
															"                let categoryRequestBody = {",
															"                    \"category\": {",
															"                        \"sourcedId\": pm.environment.get(\"categorySourcedId\"),",
															"                        \"status\": \"active\",",
															"                        \"dateLastModified\": isoDateTime,",
															"                        \"metadata\": {},",
															"                        \"title\": \"title\",",
															"                        \"weight\": 3",
															"                    }",
															"                }",
															"",
															"                // Make the PUT Category request",
															"                pm.sendRequest({",
															"                    url: categoryUrl,",
															"                    method: 'PUT',",
															"                    header: headers,",
															"                    body: {",
															"                        mode: 'raw',",
															"                        raw: JSON.stringify(categoryRequestBody)",
															"                    }",
															"                }, function (err, res) {",
															"                    if (err) {",
															"                        console.error(\"PUT Category API Error: \", err);",
															"                        pm.environment.unset(\"categorySourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT Category API request failed.\");",
															"                    }",
															"",
															"                    if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
															"                        console.error(\"Unexpected PUT Category API Response Code: \" + res.code);",
															"                        pm.environment.unset(\"categorySourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT Category API did not return 200 or 201.\");",
															"                    }",
															"",
															"                    console.log(\"PUT Category API succeeded with status: \" + res.code);",
															"",
															"                    // Generate and store sourcedId for ScoreScale",
															"                    let scoreScaleSourcedId = generateUUID();",
															"                    pm.environment.set(\"scoreScaleSourcedId\", scoreScaleSourcedId);",
															"                    console.log(\"Generated scoreScaleSourcedId: \" + scoreScaleSourcedId);",
															"",
															"                    // Define ScoreScale API URL",
															"                    let scoreScaleUrl = pm.environment.get(\"URL\") + pm.environment.get(\"pathPrefix\")+\"/scoreScales/\"+ scoreScaleSourcedId;",
															"",
															"                    // Define ScoreScale API Request Body",
															"                    let scoreScaleRequestBody = {",
															"                        \"scoreScale\": {",
															"                            \"sourcedId\":pm.environment.get(\"scoreScaleSourcedId\"), //required",
															"                            \"status\": \"active\", //required",
															"                            \"dateLastModified\": isoDateTime, //required",
															"                            \"metadata\": {",
															"                                \"test\": \"metadata\"",
															"                            },",
															"                            \"title\": \"QATestProd\", //required",
															"                            \"type\": \"QATestProd\", //required",
															"                            \"course\": {",
															"                                \"href\": \"/course/\" + pm.environment.get(\"courseSourcedId\"),",
															"                                \"sourcedId\": pm.environment.get(\"courseSourcedId\"),",
															"                                \"type\": \"course\"",
															"                            },",
															"                            \"class\": {  //required",
															"                                \"href\": \"/classes/\" + pm.environment.get(\"classSourcedId\"),",
															"                                \"sourcedId\": pm.environment.get(\"classSourcedId\"),",
															"                                \"type\": \"class\"",
															"                            },",
															"                            \"scoreScaleValue\": [ //required",
															"                                {",
															"                                    \"itemValueLHS\": \"0-57\",",
															"                                    \"itemValueRHS\": \"F\"",
															"                                },",
															"                                {",
															"                                    \"itemValueLHS\": \"60-69\",",
															"                                    \"itemValueRHS\": \"D\"",
															"                                },",
															"                                {",
															"                                    \"itemValueLHS\": \"70-79\",",
															"                                    \"itemValueRHS\": \"C\"",
															"                                },",
															"                                {",
															"                                    \"itemValueLHS\": \"80-89\",",
															"                                    \"itemValueRHS\": \"B\"",
															"                                },",
															"                                {",
															"                                    \"itemValueLHS\": \"90-100\",",
															"                                    \"itemValueRHS\": \"A\"",
															"                                }",
															"                            ]",
															"                        }",
															"                    }",
															"",
															"                    // Make the PUT ScoreScale request",
															"                    pm.sendRequest({",
															"                        url: scoreScaleUrl,",
															"                        method: 'PUT',",
															"                        header: headers,",
															"                        body: {",
															"                            mode: 'raw',",
															"                            raw: JSON.stringify(scoreScaleRequestBody)",
															"                        }",
															"                    }, function (err, res) {",
															"                        if (err) {",
															"                            console.error(\"PUT ScoreScale API Error: \", err);",
															"                            pm.environment.unset(\"scoreScaleSourcedId\"); // Clear sourcedId on failure",
															"                            throw new Error(\"PUT ScoreScale API request failed.\");",
															"                        }",
															"",
															"                        if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
															"                            console.error(\"Unexpected PUT ScoreScale API Response Code: \" + res.code);",
															"                            pm.environment.unset(\"scoreScaleSourcedId\"); // Clear sourcedId on failure",
															"                            throw new Error(\"PUT ScoreScale API did not return 200 or 201.\");",
															"                        }",
															"",
															"                        console.log(\"PUT ScoreScale API succeeded with status: \" + res.code);",
															"",
															"                        // Generate and store sourcedId for AssessmentLineItem",
															"                        let lineItemeSourcedId = generateUUID();",
															"                        pm.environment.set(\"lineItemeSourcedId\", lineItemeSourcedId);",
															"                        console.log(\"Generated lineItemeSourcedId: \" + lineItemeSourcedId);",
															"",
															"                        // Define LineItems API URL",
															"                        let lineItemsUrl = pm.environment.get(\"URL\") + pm.environment.get(\"pathPrefix\")+\"/lineItems/\"+ lineItemeSourcedId;",
															"",
															"                        // Define putLineItems API Request Body",
															"                        let lineItemRequestBody = {",
															"                            \"lineItem\": {",
															"                                \"sourcedId\": pm.environment.get(\"lineItemeSourcedId\"), //required",
															"                                \"status\": \"active\", //required",
															"                                \"dateLastModified\": isoDateTime, // Correct UTC ISO8601 format //required",
															"                                \"title\": \"Math\\nTest\", //required",
															"                                \"assignDate\": isoDateTime, // Correct UTC ISO8601 format //required",
															"                                \"dueDate\": isoDateTime, // Correct UTC ISO8601 format //required",
															"                                \"class\": { //required",
															"                                    \"href\": \"/classes/\" + pm.environment.get(\"classSourcedId\"),",
															"                                    \"sourcedId\": pm.environment.get(\"classSourcedId\"),",
															"                                    \"type\": \"class\"",
															"                                },",
															"                                \"school\": { //required",
															"                                    \"href\": \"/org/\" + pm.environment.get(\"school_sourcedId\"),",
															"                                    \"sourcedId\": pm.environment.get(\"school_sourcedId\"),",
															"                                    \"type\": \"org\"",
															"                                },",
															"                                \"category\": { //required",
															"                                    \"href\": \"/categories/\" + pm.environment.get(\"categorySourcedId\"),",
															"                                    \"sourcedId\": pm.environment.get(\"categorySourcedId\"),",
															"                                    \"type\": \"category\"",
															"                                }",
															"                            }",
															"                        }",
															"                        // Make the PUT LineItems request",
															"                    pm.sendRequest({",
															"                        url: lineItemsUrl,",
															"                        method: 'PUT',",
															"                        header: headers,",
															"                        body: {",
															"                            mode: 'raw',",
															"                            raw: JSON.stringify(lineItemRequestBody)",
															"                        }",
															"                    }",
															"                        , function (err, res) {",
															"                            if (err) {",
															"                                console.error(\"PUT LineItems API Error: \", err);",
															"                                pm.environment.unset(\"lineItemeSourcedId\"); // Clear sourcedId on failure",
															"                                throw new Error(\"PUT LineItems API request failed.\");",
															"                            }",
															"",
															"                            if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
															"                                console.error(\"Unexpected PUT LineItems API Response Code: \" + res.code);",
															"                                pm.environment.unset(\"lineItemeSourcedId\"); // Clear sourcedId on failure",
															"                                throw new Error(\"PUT LineItems API did not return 200 or 201.\");",
															"                            }",
															"",
															"                            console.log(\"PUT LineItems API succeeded with status: \" + res.code);",
															"                             // Define DELETE LineItems API URL",
															"                        let deleteLineItemsUrl = pm.environment.get(\"URL\") + pm.environment.get(\"pathPrefix\")+\"/lineItems/\"+ lineItemeSourcedId;",
															"",
															"                        //Make DELETE LineItems API Request",
															"                        pm.sendRequest({",
															"                            url: deleteLineItemsUrl,",
															"                            method: 'DELETE',",
															"                            header: headers",
															"                        }, function (err, res) {",
															"                            if (err || res.code !== 204) {",
															"                             console.error(\"DELETE Line Item API Failed. Code:\", res?.code || \"No response\", \"Error:\", err);",
															"                                throw new Error(\"DELETE Line Item API request failed.\");",
															"                        }",
															"                        });",
															"",
															"                       ",
															"                        });",
															"",
															"                    });    ",
															"                });",
															"            });",
															"        });",
															"   });",
															"});",
															"",
															"",
															"",
															"",
															"",
															"",
															"",
															"let uuid = generateUUID();",
															"pm.environment.set(\"randomUUID\", uuid);",
															"",
															"let requestBody = JSON.parse(request.data);",
															"let putAssessmentLineitemRequestBody = requestBody.assessmentLineItem;",
															"",
															"// Store full object as a single environment variable",
															"pm.environment.set(\"putAssessmentLineitemRequestBody\", JSON.stringify(putAssessmentLineitemRequestBody));",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"assessmentLineItem\": {\n        \"sourcedId\": \"{{randomUUID}}\",\n        \"status\": \"active\",\n        \"dateLastModified\": \"{{isoDateTime}}\",\n        \"metadata\": {\n            \"extensions\": {\n                \"fields\": {\n                    \"type\": \"PLACEMENT_TEST\",\n                    \"adaptive\": true,\n                    \"storageName\": \"storageName\",\n                    \"subject\": \"subject\",\n                    \"creator\": [],\n                    \"mediaType\": \"mediaType\",\n                    \"keywords\": null,\n                    \"datePublished\": null,\n                    \"dateToActivate\": null,\n                    \"dateToShow\": null,\n                    \"dateToStartOn\": null,\n                    \"maxAttempts\": null,\n                    \"maxSubmits\": null,\n                    \"version\": null,\n                    \"dueDate\": null,\n                    \"assignDate\": null,\n                    \"schoolId\": null,\n                    \"academicSessionId\": null,\n                    \"categoryId\": null,\n                    \"applicationId\": null,\n                    \"competencyId\": null\n                }\n            }\n        },\n        \"title\": \"AssessmentLineItem\",\n        \"description\": \"This is QA POSTMAN API Automation generated \",\n        \"class\": {\n            \"href\": \"https://example.com\",\n            \"sourcedId\": \"{{classSourcedId}}\",\n            \"type\": \"class\"\n        },\n        \"parentAssessmentLineItem\": {\n            \"href\": \"/classes/b2a85993-8b03-4560-8ab3-d39b56570823\",\n            \"sourcedId\": \"{{lineItemeSourcedId}}\", \n            \"type\": \"assessmentLineItem\"\n        },\n        \"scoreScale\": {\n            \"href\": \"https://example.com/scoreScale\",\n            \"sourcedId\": \"{{scoreScaleSourcedId}}\",\n            \"type\": \"scoreScale\"\n        },\n        \"resultValueMin\": 90,\n        \"resultValueMax\": 100,\n        \"learningObjectiveSet\": null\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}{{endpoint}}/assessmentLineItems/{{randomUUID}}",
													"host": [
														"{{URL}}{{endpoint}}"
													],
													"path": [
														"assessmentLineItems",
														"{{randomUUID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify API throws an error for parentAssessmentLineItem with of type PLACEMENT_TEST but deleted",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Parse the JSON response",
															"let jsonData = pm.response.json(); ",
															"",
															"pm.test(\" API should return 404 Not Found\", function () {",
															"  pm.response.to.have.status(404);",
															"});",
															"",
															"",
															"",
															"// Construct expected error message",
															"let assessmentLineItemeSourcedId = pm.environment.get(\"assessmentLineItemeSourcedId\"); // Define the sourcedId here",
															"let expectedErrorMessage = `The ParentAssessmentLine with sourcedId ${assessmentLineItemeSourcedId} was not found or it may have already been deleted.`; // Corrected typo in \"nalready\"",
															"",
															"// Validate the error message exactly",
															"pm.test(\"Verify Error message and it should matches with requested sourcedId \", function () {",
															"    pm.expect(jsonData.imsx_description).to.eql(expectedErrorMessage);",
															"});",
															"",
															"",
															"",
															"pm.test(\"Validate response structure for AsessmentLineItem unknownobject error\", function () {",
															"    const jsonData = pm.response.json();",
															"",
															"    // Top-level fields",
															"    pm.expect(jsonData).to.have.property(\"imsx_codeMajor\", \"failure\");",
															"    pm.expect(jsonData).to.have.property(\"imsx_severity\", \"error\");",
															"    pm.expect(jsonData).to.have.property(\"imsx_description\");",
															"    ",
															"",
															"    // Check imsx_CodeMinor structure",
															"    pm.expect(jsonData).to.have.property(\"imsx_CodeMinor\");",
															"    pm.expect(jsonData.imsx_CodeMinor).to.have.property(\"imsx_codeMinorField\");",
															"    pm.expect(jsonData.imsx_CodeMinor.imsx_codeMinorField).to.be.an(\"array\").that.is.not.empty;",
															"",
															"    // Validate inner fields",
															"    const minorField = jsonData.imsx_CodeMinor.imsx_codeMinorField[0];",
															"    pm.expect(minorField).to.have.property(\"imsx_codeMinorFieldName\", \"TargetEndSystem\");",
															"    pm.expect(minorField).to.have.property(\"imsx_codeMinorFieldValue\", \"unknownobject\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Set headers dynamically from environment variables",
															"pm.request.headers.upsert({ key: \"Authorization\", value: pm.environment.get(\"Auth\") });",
															"pm.request.headers.upsert({ key: \"x-app-key\", value: pm.environment.get(\"x-app-key\") });",
															"pm.request.headers.upsert({ key: \"x-client-id\", value: pm.environment.get(\"x-client-id\") });",
															"",
															"// Generate a random UUID for sourcedId",
															"function generateUUID() {",
															"    let dt = new Date().getTime();",
															"    let uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {",
															"        let r = (dt + Math.random() * 16) % 16 | 0;",
															"        dt = Math.floor(dt / 16);",
															"        return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);",
															"    });",
															"    return uuid;",
															"}",
															"",
															"const headers = {",
															"    'Authorization': pm.environment.get(\"Auth\"),",
															"    'x-app-key': pm.environment.get(\"x-app-key\"),",
															"    'x-client-id': pm.environment.get(\"x-client-id\"),",
															"    'Content-Type': 'application/json'",
															"};",
															"",
															"// Generate and store courseSourcedId",
															"let courseSourcedId = generateUUID();",
															"pm.environment.set(\"courseSourcedId\", courseSourcedId);",
															"console.log(\"Generated courseSourcedId: \" + courseSourcedId);",
															"",
															"// Generate current UTC timestamp in ISO format: 2025-01-29T06:51:57Z",
															"function getCurrentISOString() {",
															"    return new Date().toISOString().split('.')[0] + \"Z\";",
															"}",
															"",
															"// Set dynamic date variables",
															"let isoDateTime = getCurrentISOString(); // full timestamp",
															"let isoDateOnly = isoDateTime.split('T')[0]; // date only",
															"",
															"pm.environment.set(\"isoDateTime\", isoDateTime);",
															"pm.environment.set(\"isoDateOnly\", isoDateOnly);",
															"",
															"console.log(\"Generated ISO DateTime: \" + isoDateTime);",
															"console.log(\"Generated ISO Date Only: \" + isoDateOnly);",
															"",
															"",
															"// Define Course API URL",
															"let courseUrl = pm.environment.get(\"URL\") + pm.environment.get(\"customPathPrefix\")+\"/courses\";",
															"",
															"// Define Course API Request Body",
															"let courseRequestBody = {",
															"    \"sourcedId\": pm.environment.get(\"courseSourcedId\"), //required",
															"    \"status\": \"active\", //required",
															"    \"title\": \"QA\", //required",
															"    \"courseCode\": \"courseCode\" //required",
															"",
															"}",
															"",
															"",
															"// Make the Course POST request",
															"pm.sendRequest({",
															"    url: courseUrl,",
															"    method: 'POST',",
															"    header: headers,",
															"    body: {",
															"        mode: 'raw',",
															"        raw: JSON.stringify(courseRequestBody)",
															"    }",
															"}, function (err, res) {",
															"    if (err) {",
															"        console.error(\"POST Course API Error: \", err);",
															"        pm.environment.unset(\"courseSourcedId\"); // Clear sourcedId on failure",
															"        throw new Error(\"Course POST API request failed.\");",
															"    }",
															"",
															"    if (res.code !== 201) {  // Ensure status is 201 Created",
															"        console.error(\"Unexpected POST Course API Response Code: \" + res.code);",
															"        pm.environment.unset(\"courseSourcedId\"); // Clear sourcedId on failure",
															"        throw new Error(\"Course POST API did not return 201 Created.\");",
															"    }",
															"",
															"    console.log(\"Course POST API succeeded with status: \" + res.code);",
															"",
															"    // Define getAllOrgs API URL",
															"    let getAllOrgsUrl = pm.environment.get(\"URL\") + pm.environment.get(\"rosterPathPrefix\")+\"/orgs\";",
															"",
															"    // Make getAllOrgs Request",
															"    pm.sendRequest({",
															"        url: getAllOrgsUrl,",
															"        method: 'GET',",
															"        header: headers",
															"    }, function (err, res) {",
															"        if (err || res.code !== 200) {",
															"            console.error(\"GET Orgs API Failed. Code:\", res?.code || \"No response\", \"Error:\", err);",
															"            throw new Error(\"GET Orgs API request failed.\");",
															"        }",
															"",
															"        console.log(\"GET Orgs API succeeded with status:\", res.code);",
															"",
															"        let response = res.json();",
															"        let schoolOrgs = response.orgs.filter(org => org.type === \"SCHOOL\");",
															"",
															"        if (schoolOrgs.length === 0) {",
															"            throw new Error(\"No orgs of type 'SCHOOL' found.\");",
															"        }",
															"",
															"        // Get a random school sourcedId",
															"        let randomIndex = Math.floor(Math.random() * schoolOrgs.length);",
															"        let schoolSourcedId = schoolOrgs[randomIndex].sourcedId;",
															"",
															"        console.log(\"Selected school sourcedId: \" + schoolSourcedId);",
															"",
															"        // Save to environment variable for later use",
															"        pm.environment.set(\"school_sourcedId\", schoolSourcedId);",
															"",
															"        // Define getAllterms API URL",
															"        let getAllTermsUrl = pm.environment.get(\"URL\") + pm.environment.get(\"rosterPathPrefix\")+\"/terms\";",
															"",
															"        // Make getAllterms Request",
															"        pm.sendRequest({",
															"            url: getAllTermsUrl,",
															"            method: 'GET',",
															"            header: headers",
															"        }, function (err, res) {",
															"            if (err || res.code !== 200) {",
															"                console.error(\"GET TERMS API Failed. Code:\", res?.code || \"No response\", \"Error:\", err);",
															"                throw new Error(\"GET TERMS API request failed.\");",
															"            }",
															"",
															"            console.log(\"GET TERMS API succeeded with status:\", res.code);",
															"",
															"            let response = res.json();",
															"            let termSessions = response.academicSessions.filter(session => session.type === \"TERM\");",
															"",
															"            if (termSessions.length === 0) {",
															"                throw new Error(\"No academicSessions of type 'TERM' found.\");",
															"            }",
															"",
															"            // Select a random term sourcedId",
															"            let randomIndex = Math.floor(Math.random() * termSessions.length);",
															"            let termSourcedId = termSessions[randomIndex].sourcedId;",
															"",
															"            console.log(\"Selected TERM sourcedId: \" + termSourcedId);",
															"",
															"            // Save to environment variable",
															"            pm.environment.set(\"term_sourcedId\", termSourcedId);",
															"",
															"            // Generate and store classSourcedId",
															"            let classSourcedId = generateUUID();",
															"            pm.environment.set(\"classSourcedId\", classSourcedId);",
															"            console.log(\"Generated classSourcedId: \" + classSourcedId);",
															"",
															"            // Define Class API URL",
															"            let classUrl = pm.environment.get(\"URL\") + pm.environment.get(\"customPathPrefix\")+\"/classes\";",
															"",
															"            // Define Class API Request Body",
															"            let classRequestBody = {",
															"                \"sourcedId\": pm.environment.get(\"classSourcedId\"), //Required",
															"                \"status\": \"active\", //Required",
															"                \"title\": \"title\", //Required",
															"                \"classType\": \"SCHEDULED\", //Required",
															"                \"course\": { //required",
															"                    \"href\": \"/courses/\" + pm.environment.get(\"courseSourcedId\"),",
															"                    \"sourcedId\": pm.environment.get(\"courseSourcedId\"),",
															"                    \"type\": \"course\"",
															"                },",
															"                \"school\": { //required",
															"                    \"href\": \"/org/\" + pm.environment.get(\"school_sourcedId\"),",
															"                    \"sourcedId\": pm.environment.get(\"school_sourcedId\"),",
															"                    \"type\": \"org\"",
															"                },",
															"                \"terms\": [ //required",
															"                    {",
															"                        \"href\": \"/academicSession/\" + pm.environment.get(\"term_sourcedId\"),",
															"                        \"sourcedId\":pm.environment.get(\"term_sourcedId\"),",
															"                        \"type\": \"academicSession\"",
															"                    }",
															"                ]",
															"            }",
															"",
															"            // Make the Class POST request",
															"            pm.sendRequest({",
															"                url: classUrl,",
															"                method: 'POST',",
															"                header: headers,",
															"                body: {",
															"                    mode: 'raw',",
															"                    raw: JSON.stringify(classRequestBody)",
															"                }",
															"            }, function (err, res) {",
															"                if (err) {",
															"                    console.error(\"POST Class API Error: \", err);",
															"                    pm.environment.unset(\"classSourcedId\"); // Clear sourcedId on failure",
															"                    throw new Error(\"Class POST API request failed.\");",
															"                }",
															"",
															"                if (res.code !== 201) {  // Ensure status is 201 Created",
															"                    console.error(\"Unexpected POST Class API Response Code: \" + res.code);",
															"                    pm.environment.unset(\"classSourcedId\"); // Clear sourcedId on failure",
															"                    throw new Error(\"POST Class API did not return 201 Created.\");",
															"                }",
															"",
															"                console.log(\"POST Class API succeeded with status: \" + res.code);",
															"",
															"                // --- Subsequent Requests (ScoreScale, AssessmentLineItem) ---",
															"                // Place the pm.sendRequest calls for ScoreScale and AssessmentLineItem here,",
															"                // ensuring they run only after the Class POST request is successful.",
															"",
															"                // Generate and store sourcedId for ScoreScale",
															"                let scoreScaleSourcedId = generateUUID();",
															"                pm.environment.set(\"scoreScaleSourcedId\", scoreScaleSourcedId);",
															"                console.log(\"Generated scoreScaleSourcedId: \" + scoreScaleSourcedId);",
															"",
															"                // Define ScoreScale API URL",
															"                let scoreScaleUrl = pm.environment.get(\"URL\") + pm.environment.get(\"pathPrefix\")+\"/scoreScales/\"+ scoreScaleSourcedId;",
															"",
															"                // Define ScoreScale API Request Body",
															"                let scoreScaleRequestBody = {",
															"                    \"scoreScale\": {",
															"                        \"sourcedId\":pm.environment.get(\"scoreScaleSourcedId\"), //required",
															"                        \"status\": \"active\", //required",
															"                        \"dateLastModified\": isoDateTime, //required",
															"                        \"metadata\": {",
															"                            \"test\": \"metadata\"",
															"                        },",
															"                        \"title\": \"QATestProd\", //required",
															"                        \"type\": \"QATestProd\", //required",
															"                        \"course\": {",
															"                            \"href\": \"/course/\" + pm.environment.get(\"courseSourcedId\"),",
															"                            \"sourcedId\": pm.environment.get(\"courseSourcedId\"),",
															"                            \"type\": \"course\"",
															"                        },",
															"                        \"class\": {  //required",
															"                            \"href\": \"/classes/\" + pm.environment.get(\"classSourcedId\"),",
															"                            \"sourcedId\": pm.environment.get(\"classSourcedId\"),",
															"                            \"type\": \"class\"",
															"                        },",
															"                        \"scoreScaleValue\": [ //required",
															"                            {",
															"                                \"itemValueLHS\": \"0-57\",",
															"                                \"itemValueRHS\": \"F\"",
															"                            },",
															"                            {",
															"                                \"itemValueLHS\": \"60-69\",",
															"                                \"itemValueRHS\": \"D\"",
															"                            },",
															"                            {",
															"                                \"itemValueLHS\": \"70-79\",",
															"                                \"itemValueRHS\": \"C\"",
															"                            },",
															"                            {",
															"                                \"itemValueLHS\": \"80-89\",",
															"                                \"itemValueRHS\": \"B\"",
															"                            },",
															"                            {",
															"                                \"itemValueLHS\": \"90-100\",",
															"                                \"itemValueRHS\": \"A\"",
															"                            }",
															"                        ]",
															"                    }",
															"                }",
															"",
															"                // Make the PUT ScoreScale request",
															"                pm.sendRequest({",
															"                    url: scoreScaleUrl,",
															"                    method: 'PUT',",
															"                    header: headers,",
															"                    body: {",
															"                        mode: 'raw',",
															"                        raw: JSON.stringify(scoreScaleRequestBody)",
															"                    }",
															"                }, function (err, res) {",
															"                    if (err) {",
															"                        console.error(\"PUT ScoreScale API Error: \", err);",
															"                        pm.environment.unset(\"scoreScaleSourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT ScoreScale API request failed.\");",
															"                    }",
															"",
															"                    if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
															"                        console.error(\"Unexpected PUT ScoreScale API Response Code: \" + res.code);",
															"                        pm.environment.unset(\"scoreScaleSourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT ScoreScale API did not return 200 or 201.\");",
															"                    }",
															"",
															"                    console.log(\"PUT ScoreScale API succeeded with status: \" + res.code);",
															"",
															"                    // Generate and store sourcedId for AssessmentLineItem",
															"                    let assessmentLineItemeSourcedId = generateUUID();",
															"                    pm.environment.set(\"assessmentLineItemeSourcedId\", assessmentLineItemeSourcedId);",
															"                    console.log(\"Generated assessmentLineItemeSourcedId: \" + assessmentLineItemeSourcedId);",
															"",
															"                    // Define putAssessmentLineItems API URL",
															"                    let assessmentLineItemsUrl = pm.environment.get(\"URL\") + pm.environment.get(\"pathPrefix\")+\"/assessmentLineItems/\"+ assessmentLineItemeSourcedId;",
															"",
															"                    // Define putAssessmentLineItems API Request Body",
															"                    let assessmentLineItemRequestBody = {",
															"                        \"assessmentLineItem\": {",
															"                            \"sourcedId\": pm.environment.get(\"assessmentLineItemeSourcedId\"),",
															"                            \"status\": \"active\",",
															"                            \"dateLastModified\": isoDateTime, // Use the dynamically generated timestamp",
															"                            \"title\": \"Good Effort\"",
															"                        }",
															"                    }",
															"",
															"                    // Make the PUT AssessmentLineItems request",
															"                    pm.sendRequest({",
															"                        url: assessmentLineItemsUrl,",
															"                        method: 'PUT',",
															"                        header: headers,",
															"                        body: {",
															"                            mode: 'raw',",
															"                            raw: JSON.stringify(assessmentLineItemRequestBody)",
															"                        }",
															"                    }, function (err, res) {",
															"                        if (err) {",
															"                            console.error(\"PUT AssessmentLineItems API Error: \", err);",
															"                            pm.environment.unset(\"assessmentLineItemeSourcedId\"); // Clear sourcedId on failure",
															"                            throw new Error(\"PUT AssessmentLineItems API request failed.\");",
															"                        }",
															"",
															"                        if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
															"                            console.error(\"Unexpected PUT AssessmentLineItems API Response Code: \" + res.code);",
															"                            pm.environment.unset(\"assessmentLineItemeSourcedId\"); // Clear sourcedId on failure",
															"                            throw new Error(\"PUT AssessmentLineItems API did not return 200 or 201.\");",
															"                        }",
															"",
															"                        console.log(\"PUT AssessmentLineItems API succeeded with status: \" + res.code);",
															"",
															"",
															"                         // Define DELETE AssessmentLineItem API URL",
															"                        let deleteAssessmentLineItemUrl = pm.environment.get(\"URL\") + pm.environment.get(\"pathPrefix\")+\"/assessmentLineItems/\"+ pm.environment.get(\"assessmentLineItemeSourcedId\");",
															"",
															"                        //Make DELETE LineItems API Request",
															"                        pm.sendRequest({",
															"                            url: deleteAssessmentLineItemUrl,",
															"                            method: 'DELETE',",
															"                            header: headers",
															"                            }, function (err, res) {",
															"                            if (err || res.code !== 204) {",
															"                             console.error(\"DELETE AssessmentLineItem API Failed. Code:\", res?.code || \"No response\", \"Error:\", err);",
															"                                throw new Error(\"DELETE AssessmentLineItem API request failed.\");",
															"                            }",
															"                            });",
															"                    });",
															"",
															"                     ",
															"                    ",
															"                });",
															"               ",
															"                       ",
															"",
															"            });",
															"        });",
															"    });",
															"});",
															"",
															"",
															"let uuid = generateUUID();",
															"pm.environment.set(\"randomUUID\", uuid);",
															"",
															"",
															"",
															"",
															"let requestBody = JSON.parse(request.data);",
															"let putAssessmentLineitemRequestBody = requestBody.assessmentLineItem;",
															"",
															"// Store full object as a single environment variable",
															"pm.environment.set(\"putAssessmentLineitemRequestBody\", JSON.stringify(putAssessmentLineitemRequestBody));",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"assessmentLineItem\": {\n        \"sourcedId\": \"{{randomUUID}}\",\n        \"status\": \"active\",\n        \"dateLastModified\": \"{{isoDateTime}}\",\n        \"metadata\": {\n            \"extensions\": {\n                \"fields\": {\n                    \"type\": \"PLACEMENT_TEST\",\n                    \"adaptive\": true,\n                    \"storageName\": \"storageName\",\n                    \"subject\": \"subject\",\n                    \"creator\": [],\n                    \"mediaType\": \"mediaType\",\n                    \"keywords\": null,\n                    \"datePublished\": null,\n                    \"dateToActivate\": null,\n                    \"dateToShow\": null,\n                    \"dateToStartOn\": null,\n                    \"maxAttempts\": null,\n                    \"maxSubmits\": null,\n                    \"version\": null,\n                    \"dueDate\": null,\n                    \"assignDate\": null,\n                    \"schoolId\": null,\n                    \"academicSessionId\": null,\n                    \"categoryId\": null,\n                    \"applicationId\": null,\n                    \"competencyId\": null\n                }\n            }\n        },\n        \"title\": \"AssessmentLineItem\",\n        \"description\": \"This is QA POSTMAN API Automation generated \",\n        \"class\": {\n            \"href\": \"https://example.com\",\n            \"sourcedId\": \"{{classSourcedId}}\",\n            \"type\": \"class\"\n        },\n        \"parentAssessmentLineItem\": {\n            \"href\": \"/classes/b2a85993-8b03-4560-8ab3-d39b56570823\",\n            \"sourcedId\": \"{{assessmentLineItemeSourcedId}}\", \n            \"type\": \"assessmentLineItem\"\n        },\n        \"scoreScale\": {\n            \"href\": \"https://example.com/scoreScale\",\n            \"sourcedId\": \"{{scoreScaleSourcedId}}\",\n            \"type\": \"scoreScale\"\n        },\n        \"resultValueMin\": 90,\n        \"resultValueMax\": 100,\n        \"learningObjectiveSet\": null\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}{{endpoint}}/assessmentLineItems/{{randomUUID}}",
													"host": [
														"{{URL}}{{endpoint}}"
													],
													"path": [
														"assessmentLineItems",
														"{{randomUUID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify API throws an error for scoreScale which is deleted",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Parse the JSON response",
															"let jsonData = pm.response.json(); ",
															"",
															"pm.test(\" API should return 404 Not Found\", function () {",
															"  pm.response.to.have.status(404);",
															"});",
															"",
															"",
															"",
															"// Construct expected error message",
															"let scoreScaleSourcedId = pm.environment.get(\"scoreScaleSourcedId\"); // Define the sourcedId here",
															"let expectedErrorMessage = `The ScoreScale with sourcedId ${scoreScaleSourcedId} was not found or it may have already been deleted.`; // Corrected typo in \"nalready\"",
															"",
															"// Validate the error message exactly",
															"pm.test(\"Verify Error message and it should matches with requested sourcedId \", function () {",
															"    pm.expect(jsonData.imsx_description).to.eql(expectedErrorMessage);",
															"});",
															"",
															"",
															"",
															"pm.test(\"Validate response structure for AsessmentLineItem unknownobject error\", function () {",
															"    const jsonData = pm.response.json();",
															"",
															"    // Top-level fields",
															"    pm.expect(jsonData).to.have.property(\"imsx_codeMajor\", \"failure\");",
															"    pm.expect(jsonData).to.have.property(\"imsx_severity\", \"error\");",
															"    pm.expect(jsonData).to.have.property(\"imsx_description\");",
															"    ",
															"",
															"    // Check imsx_CodeMinor structure",
															"    pm.expect(jsonData).to.have.property(\"imsx_CodeMinor\");",
															"    pm.expect(jsonData.imsx_CodeMinor).to.have.property(\"imsx_codeMinorField\");",
															"    pm.expect(jsonData.imsx_CodeMinor.imsx_codeMinorField).to.be.an(\"array\").that.is.not.empty;",
															"",
															"    // Validate inner fields",
															"    const minorField = jsonData.imsx_CodeMinor.imsx_codeMinorField[0];",
															"    pm.expect(minorField).to.have.property(\"imsx_codeMinorFieldName\", \"TargetEndSystem\");",
															"    pm.expect(minorField).to.have.property(\"imsx_codeMinorFieldValue\", \"unknownobject\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Set headers dynamically from environment variables",
															"pm.request.headers.upsert({ key: \"Authorization\", value: pm.environment.get(\"Auth\") });",
															"pm.request.headers.upsert({ key: \"x-app-key\", value: pm.environment.get(\"x-app-key\") });",
															"pm.request.headers.upsert({ key: \"x-client-id\", value: pm.environment.get(\"x-client-id\") });",
															"",
															"// Generate a random UUID for sourcedId",
															"function generateUUID() {",
															"    let dt = new Date().getTime();",
															"    let uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {",
															"        let r = (dt + Math.random() * 16) % 16 | 0;",
															"        dt = Math.floor(dt / 16);",
															"        return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);",
															"    });",
															"    return uuid;",
															"}",
															"",
															"const headers = {",
															"    'Authorization': pm.environment.get(\"Auth\"),",
															"    'x-app-key': pm.environment.get(\"x-app-key\"),",
															"    'x-client-id': pm.environment.get(\"x-client-id\"),",
															"    'Content-Type': 'application/json'",
															"};",
															"",
															"// Generate and store courseSourcedId",
															"let courseSourcedId = generateUUID();",
															"pm.environment.set(\"courseSourcedId\", courseSourcedId);",
															"console.log(\"Generated courseSourcedId: \" + courseSourcedId);",
															"",
															"// Generate current UTC timestamp in ISO format: 2025-01-29T06:51:57Z",
															"function getCurrentISOString() {",
															"    return new Date().toISOString().split('.')[0] + \"Z\";",
															"}",
															"",
															"// Set dynamic date variables",
															"let isoDateTime = getCurrentISOString(); // full timestamp",
															"let isoDateOnly = isoDateTime.split('T')[0]; // date only",
															"",
															"pm.environment.set(\"isoDateTime\", isoDateTime);",
															"pm.environment.set(\"isoDateOnly\", isoDateOnly);",
															"",
															"console.log(\"Generated ISO DateTime: \" + isoDateTime);",
															"console.log(\"Generated ISO Date Only: \" + isoDateOnly);",
															"",
															"",
															"// Define Course API URL",
															"let courseUrl = pm.environment.get(\"URL\") + pm.environment.get(\"customPathPrefix\")+\"/courses\";",
															"",
															"// Define Course API Request Body",
															"let courseRequestBody = {",
															"    \"sourcedId\": pm.environment.get(\"courseSourcedId\"), //required",
															"    \"status\": \"active\", //required",
															"    \"title\": \"QA\", //required",
															"    \"courseCode\": \"courseCode\" //required",
															"",
															"}",
															"",
															"",
															"// Make the Course POST request",
															"pm.sendRequest({",
															"    url: courseUrl,",
															"    method: 'POST',",
															"    header: headers,",
															"    body: {",
															"        mode: 'raw',",
															"        raw: JSON.stringify(courseRequestBody)",
															"    }",
															"}, function (err, res) {",
															"    if (err) {",
															"        console.error(\"POST Course API Error: \", err);",
															"        pm.environment.unset(\"courseSourcedId\"); // Clear sourcedId on failure",
															"        throw new Error(\"Course POST API request failed.\");",
															"    }",
															"",
															"    if (res.code !== 201) {  // Ensure status is 201 Created",
															"        console.error(\"Unexpected POST Course API Response Code: \" + res.code);",
															"        pm.environment.unset(\"courseSourcedId\"); // Clear sourcedId on failure",
															"        throw new Error(\"Course POST API did not return 201 Created.\");",
															"    }",
															"",
															"    console.log(\"Course POST API succeeded with status: \" + res.code);",
															"",
															"    // Define getAllOrgs API URL",
															"    let getAllOrgsUrl = pm.environment.get(\"URL\") + pm.environment.get(\"rosterPathPrefix\")+\"/orgs\";",
															"",
															"    // Make getAllOrgs Request",
															"    pm.sendRequest({",
															"        url: getAllOrgsUrl,",
															"        method: 'GET',",
															"        header: headers",
															"    }, function (err, res) {",
															"        if (err || res.code !== 200) {",
															"            console.error(\"GET Orgs API Failed. Code:\", res?.code || \"No response\", \"Error:\", err);",
															"            throw new Error(\"GET Orgs API request failed.\");",
															"        }",
															"",
															"        console.log(\"GET Orgs API succeeded with status:\", res.code);",
															"",
															"        let response = res.json();",
															"        let schoolOrgs = response.orgs.filter(org => org.type === \"SCHOOL\");",
															"",
															"        if (schoolOrgs.length === 0) {",
															"            throw new Error(\"No orgs of type 'SCHOOL' found.\");",
															"        }",
															"",
															"        // Get a random school sourcedId",
															"        let randomIndex = Math.floor(Math.random() * schoolOrgs.length);",
															"        let schoolSourcedId = schoolOrgs[randomIndex].sourcedId;",
															"",
															"        console.log(\"Selected school sourcedId: \" + schoolSourcedId);",
															"",
															"        // Save to environment variable for later use",
															"        pm.environment.set(\"school_sourcedId\", schoolSourcedId);",
															"",
															"        // Define getAllterms API URL",
															"        let getAllTermsUrl = pm.environment.get(\"URL\") + pm.environment.get(\"rosterPathPrefix\")+\"/terms\";",
															"",
															"        // Make getAllterms Request",
															"        pm.sendRequest({",
															"            url: getAllTermsUrl,",
															"            method: 'GET',",
															"            header: headers",
															"        }, function (err, res) {",
															"            if (err || res.code !== 200) {",
															"                console.error(\"GET TERMS API Failed. Code:\", res?.code || \"No response\", \"Error:\", err);",
															"                throw new Error(\"GET TERMS API request failed.\");",
															"            }",
															"",
															"            console.log(\"GET TERMS API succeeded with status:\", res.code);",
															"",
															"            let response = res.json();",
															"            let termSessions = response.academicSessions.filter(session => session.type === \"TERM\");",
															"",
															"            if (termSessions.length === 0) {",
															"                throw new Error(\"No academicSessions of type 'TERM' found.\");",
															"            }",
															"",
															"            // Select a random term sourcedId",
															"            let randomIndex = Math.floor(Math.random() * termSessions.length);",
															"            let termSourcedId = termSessions[randomIndex].sourcedId;",
															"",
															"            console.log(\"Selected TERM sourcedId: \" + termSourcedId);",
															"",
															"            // Save to environment variable",
															"            pm.environment.set(\"term_sourcedId\", termSourcedId);",
															"",
															"            // Generate and store classSourcedId",
															"            let classSourcedId = generateUUID();",
															"            pm.environment.set(\"classSourcedId\", classSourcedId);",
															"            console.log(\"Generated classSourcedId: \" + classSourcedId);",
															"",
															"            // Define Class API URL",
															"            let classUrl = pm.environment.get(\"URL\") + pm.environment.get(\"customPathPrefix\")+\"/classes\";",
															"",
															"            // Define Class API Request Body",
															"            let classRequestBody = {",
															"                \"sourcedId\": pm.environment.get(\"classSourcedId\"), //Required",
															"                \"status\": \"active\", //Required",
															"                \"title\": \"title\", //Required",
															"                \"classType\": \"SCHEDULED\", //Required",
															"                \"course\": { //required",
															"                    \"href\": \"/courses/\" + pm.environment.get(\"courseSourcedId\"),",
															"                    \"sourcedId\": pm.environment.get(\"courseSourcedId\"),",
															"                    \"type\": \"course\"",
															"                },",
															"                \"school\": { //required",
															"                    \"href\": \"/org/\" + pm.environment.get(\"school_sourcedId\"),",
															"                    \"sourcedId\": pm.environment.get(\"school_sourcedId\"),",
															"                    \"type\": \"org\"",
															"                },",
															"                \"terms\": [ //required",
															"                    {",
															"                        \"href\": \"/academicSession/\" + pm.environment.get(\"term_sourcedId\"),",
															"                        \"sourcedId\":pm.environment.get(\"term_sourcedId\"),",
															"                        \"type\": \"academicSession\"",
															"                    }",
															"                ]",
															"            }",
															"",
															"            // Make the Class POST request",
															"            pm.sendRequest({",
															"                url: classUrl,",
															"                method: 'POST',",
															"                header: headers,",
															"                body: {",
															"                    mode: 'raw',",
															"                    raw: JSON.stringify(classRequestBody)",
															"                }",
															"            }, function (err, res) {",
															"                if (err) {",
															"                    console.error(\"POST Class API Error: \", err);",
															"                    pm.environment.unset(\"classSourcedId\"); // Clear sourcedId on failure",
															"                    throw new Error(\"Class POST API request failed.\");",
															"                }",
															"",
															"                if (res.code !== 201) {  // Ensure status is 201 Created",
															"                    console.error(\"Unexpected POST Class API Response Code: \" + res.code);",
															"                    pm.environment.unset(\"classSourcedId\"); // Clear sourcedId on failure",
															"                    throw new Error(\"POST Class API did not return 201 Created.\");",
															"                }",
															"",
															"                console.log(\"POST Class API succeeded with status: \" + res.code);",
															"",
															"                // --- Subsequent Requests (ScoreScale, AssessmentLineItem) ---",
															"                // Place the pm.sendRequest calls for ScoreScale and AssessmentLineItem here,",
															"                // ensuring they run only after the Class POST request is successful.",
															"",
															"                // Generate and store sourcedId for ScoreScale",
															"                let scoreScaleSourcedId = generateUUID();",
															"                pm.environment.set(\"scoreScaleSourcedId\", scoreScaleSourcedId);",
															"                console.log(\"Generated scoreScaleSourcedId: \" + scoreScaleSourcedId);",
															"",
															"                // Define ScoreScale API URL",
															"                let scoreScaleUrl = pm.environment.get(\"URL\") + pm.environment.get(\"pathPrefix\")+\"/scoreScales/\"+ scoreScaleSourcedId;",
															"",
															"                // Define ScoreScale API Request Body",
															"                let scoreScaleRequestBody = {",
															"                    \"scoreScale\": {",
															"                        \"sourcedId\":pm.environment.get(\"scoreScaleSourcedId\"), //required",
															"                        \"status\": \"active\", //required",
															"                        \"dateLastModified\": isoDateTime, //required",
															"                        \"metadata\": {",
															"                            \"test\": \"metadata\"",
															"                        },",
															"                        \"title\": \"QATestProd\", //required",
															"                        \"type\": \"QATestProd\", //required",
															"                        \"course\": {",
															"                            \"href\": \"/course/\" + pm.environment.get(\"courseSourcedId\"),",
															"                            \"sourcedId\": pm.environment.get(\"courseSourcedId\"),",
															"                            \"type\": \"course\"",
															"                        },",
															"                        \"class\": {  //required",
															"                            \"href\": \"/classes/\" + pm.environment.get(\"classSourcedId\"),",
															"                            \"sourcedId\": pm.environment.get(\"classSourcedId\"),",
															"                            \"type\": \"class\"",
															"                        },",
															"                        \"scoreScaleValue\": [ //required",
															"                            {",
															"                                \"itemValueLHS\": \"0-57\",",
															"                                \"itemValueRHS\": \"F\"",
															"                            },",
															"                            {",
															"                                \"itemValueLHS\": \"60-69\",",
															"                                \"itemValueRHS\": \"D\"",
															"                            },",
															"                            {",
															"                                \"itemValueLHS\": \"70-79\",",
															"                                \"itemValueRHS\": \"C\"",
															"                            },",
															"                            {",
															"                                \"itemValueLHS\": \"80-89\",",
															"                                \"itemValueRHS\": \"B\"",
															"                            },",
															"                            {",
															"                                \"itemValueLHS\": \"90-100\",",
															"                                \"itemValueRHS\": \"A\"",
															"                            }",
															"                        ]",
															"                    }",
															"                }",
															"",
															"                // Make the PUT ScoreScale request",
															"                pm.sendRequest({",
															"                    url: scoreScaleUrl,",
															"                    method: 'PUT',",
															"                    header: headers,",
															"                    body: {",
															"                        mode: 'raw',",
															"                        raw: JSON.stringify(scoreScaleRequestBody)",
															"                    }",
															"                }, function (err, res) {",
															"                    if (err) {",
															"                        console.error(\"PUT ScoreScale API Error: \", err);",
															"                        pm.environment.unset(\"scoreScaleSourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT ScoreScale API request failed.\");",
															"                    }",
															"",
															"                    if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
															"                        console.error(\"Unexpected PUT ScoreScale API Response Code: \" + res.code);",
															"                        pm.environment.unset(\"scoreScaleSourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT ScoreScale API did not return 200 or 201.\");",
															"                    }",
															"",
															"                    console.log(\"PUT ScoreScale API succeeded with status: \" + res.code);",
															"",
															"                    ",
															"",
															"                        //Make DELETE Scorescale API Request",
															"                        pm.sendRequest({",
															"                            url: scoreScaleUrl,",
															"                            method: 'DELETE',",
															"                            header: headers",
															"                            }, function (err, res) {",
															"                            if (err || res.code !== 204) {",
															"                             console.error(\"DELETE scoreScale API Failed. Code:\", res?.code || \"No response\", \"Error:\", err);",
															"                                throw new Error(\"DELETE scoreScale API request failed.\");",
															"                            }",
															"                            ",
															"                    });",
															"",
															"                     ",
															"                    ",
															"                });",
															"               ",
															"                       ",
															"",
															"            });",
															"        });",
															"    });",
															"});",
															"",
															"",
															"let uuid = generateUUID();",
															"pm.environment.set(\"randomUUID\", uuid);",
															"",
															"",
															"",
															"",
															"let requestBody = JSON.parse(request.data);",
															"let putAssessmentLineitemRequestBody = requestBody.assessmentLineItem;",
															"",
															"// Store full object as a single environment variable",
															"pm.environment.set(\"putAssessmentLineitemRequestBody\", JSON.stringify(putAssessmentLineitemRequestBody));",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"assessmentLineItem\": {\n        \"sourcedId\": \"{{randomUUID}}\",\n        \"status\": \"active\",\n        \"dateLastModified\": \"{{isoDateTime}}\",\n        \"metadata\": null,\n        \"title\": \"Good\\n\\nEffort\",\n        \"description\": \"This is asdcsd\",\n        \"class\": {\n            \"href\": \"https://example.com\",\n            \"sourcedId\": \"{{classSourcedId}}\",\n            \"type\": \"class\"\n        },\n        \"parentAssessmentLineItem\": null,\n        \"scoreScale\": {\n            \"href\": \"https://example.com/scoreScale\",\n            \"sourcedId\": \"{{scoreScaleSourcedId}}\",\n            \"type\": \"scoreScale\"\n        },\n        \"resultValueMin\": 90,\n        \"resultValueMax\": 100,\n        \"learningObjectiveSet\": null\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}{{endpoint}}/assessmentLineItems/{{randomUUID}}",
													"host": [
														"{{URL}}{{endpoint}}"
													],
													"path": [
														"assessmentLineItems",
														"{{randomUUID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify API throws an error for scoreScale which is not exist",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Parse the JSON response",
															"let jsonData = pm.response.json(); ",
															"",
															"pm.test(\" API should return 404 Not Found\", function () {",
															"  pm.response.to.have.status(404);",
															"});",
															"",
															"",
															"",
															"// Construct expected error message",
															"let scoreScaleSourcedId = pm.environment.get(\"randomUUID\"); // Define the sourcedId here",
															"let expectedErrorMessage = `The ScoreScale with sourcedId ${scoreScaleSourcedId} was not found or it may have already been deleted.`; // Corrected typo in \"nalready\"",
															"",
															"// Validate the error message exactly",
															"pm.test(\"Verify Error message and it should matches with requested sourcedId \", function () {",
															"    pm.expect(jsonData.imsx_description).to.eql(expectedErrorMessage);",
															"});",
															"",
															"",
															"",
															"pm.test(\"Validate response structure for AsessmentLineItem unknownobject error\", function () {",
															"    const jsonData = pm.response.json();",
															"",
															"    // Top-level fields",
															"    pm.expect(jsonData).to.have.property(\"imsx_codeMajor\", \"failure\");",
															"    pm.expect(jsonData).to.have.property(\"imsx_severity\", \"error\");",
															"    pm.expect(jsonData).to.have.property(\"imsx_description\");",
															"    ",
															"",
															"    // Check imsx_CodeMinor structure",
															"    pm.expect(jsonData).to.have.property(\"imsx_CodeMinor\");",
															"    pm.expect(jsonData.imsx_CodeMinor).to.have.property(\"imsx_codeMinorField\");",
															"    pm.expect(jsonData.imsx_CodeMinor.imsx_codeMinorField).to.be.an(\"array\").that.is.not.empty;",
															"",
															"    // Validate inner fields",
															"    const minorField = jsonData.imsx_CodeMinor.imsx_codeMinorField[0];",
															"    pm.expect(minorField).to.have.property(\"imsx_codeMinorFieldName\", \"TargetEndSystem\");",
															"    pm.expect(minorField).to.have.property(\"imsx_codeMinorFieldValue\", \"unknownobject\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Set headers dynamically from environment variables",
															"pm.request.headers.upsert({ key: \"Authorization\", value: pm.environment.get(\"Auth\") });",
															"pm.request.headers.upsert({ key: \"x-app-key\", value: pm.environment.get(\"x-app-key\") });",
															"pm.request.headers.upsert({ key: \"x-client-id\", value: pm.environment.get(\"x-client-id\") });",
															"",
															"// Generate a random UUID for sourcedId",
															"function generateUUID() {",
															"    let dt = new Date().getTime();",
															"    let uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {",
															"        let r = (dt + Math.random() * 16) % 16 | 0;",
															"        dt = Math.floor(dt / 16);",
															"        return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);",
															"    });",
															"    return uuid;",
															"}",
															"",
															"const headers = {",
															"    'Authorization': pm.environment.get(\"Auth\"),",
															"    'x-app-key': pm.environment.get(\"x-app-key\"),",
															"    'x-client-id': pm.environment.get(\"x-client-id\"),",
															"    'Content-Type': 'application/json'",
															"};",
															"",
															"// Generate and store courseSourcedId",
															"let courseSourcedId = generateUUID();",
															"pm.environment.set(\"courseSourcedId\", courseSourcedId);",
															"console.log(\"Generated courseSourcedId: \" + courseSourcedId);",
															"",
															"// Generate current UTC timestamp in ISO format: 2025-01-29T06:51:57Z",
															"function getCurrentISOString() {",
															"    return new Date().toISOString().split('.')[0] + \"Z\";",
															"}",
															"",
															"// Set dynamic date variables",
															"let isoDateTime = getCurrentISOString(); // full timestamp",
															"let isoDateOnly = isoDateTime.split('T')[0]; // date only",
															"",
															"pm.environment.set(\"isoDateTime\", isoDateTime);",
															"pm.environment.set(\"isoDateOnly\", isoDateOnly);",
															"",
															"console.log(\"Generated ISO DateTime: \" + isoDateTime);",
															"console.log(\"Generated ISO Date Only: \" + isoDateOnly);",
															"",
															"",
															"// Define Course API URL",
															"let courseUrl = pm.environment.get(\"URL\") + pm.environment.get(\"customPathPrefix\")+\"/courses\";",
															"",
															"// Define Course API Request Body",
															"let courseRequestBody = {",
															"    \"sourcedId\": pm.environment.get(\"courseSourcedId\"), //required",
															"    \"status\": \"active\", //required",
															"    \"title\": \"QA\", //required",
															"    \"courseCode\": \"courseCode\" //required",
															"",
															"}",
															"",
															"",
															"// Make the Course POST request",
															"pm.sendRequest({",
															"    url: courseUrl,",
															"    method: 'POST',",
															"    header: headers,",
															"    body: {",
															"        mode: 'raw',",
															"        raw: JSON.stringify(courseRequestBody)",
															"    }",
															"}, function (err, res) {",
															"    if (err) {",
															"        console.error(\"POST Course API Error: \", err);",
															"        pm.environment.unset(\"courseSourcedId\"); // Clear sourcedId on failure",
															"        throw new Error(\"Course POST API request failed.\");",
															"    }",
															"",
															"    if (res.code !== 201) {  // Ensure status is 201 Created",
															"        console.error(\"Unexpected POST Course API Response Code: \" + res.code);",
															"        pm.environment.unset(\"courseSourcedId\"); // Clear sourcedId on failure",
															"        throw new Error(\"Course POST API did not return 201 Created.\");",
															"    }",
															"",
															"    console.log(\"Course POST API succeeded with status: \" + res.code);",
															"",
															"    // Define getAllOrgs API URL",
															"    let getAllOrgsUrl = pm.environment.get(\"URL\") + pm.environment.get(\"rosterPathPrefix\")+\"/orgs\";",
															"",
															"    // Make getAllOrgs Request",
															"    pm.sendRequest({",
															"        url: getAllOrgsUrl,",
															"        method: 'GET',",
															"        header: headers",
															"    }, function (err, res) {",
															"        if (err || res.code !== 200) {",
															"            console.error(\"GET Orgs API Failed. Code:\", res?.code || \"No response\", \"Error:\", err);",
															"            throw new Error(\"GET Orgs API request failed.\");",
															"        }",
															"",
															"        console.log(\"GET Orgs API succeeded with status:\", res.code);",
															"",
															"        let response = res.json();",
															"        let schoolOrgs = response.orgs.filter(org => org.type === \"SCHOOL\");",
															"",
															"        if (schoolOrgs.length === 0) {",
															"            throw new Error(\"No orgs of type 'SCHOOL' found.\");",
															"        }",
															"",
															"        // Get a random school sourcedId",
															"        let randomIndex = Math.floor(Math.random() * schoolOrgs.length);",
															"        let schoolSourcedId = schoolOrgs[randomIndex].sourcedId;",
															"",
															"        console.log(\"Selected school sourcedId: \" + schoolSourcedId);",
															"",
															"        // Save to environment variable for later use",
															"        pm.environment.set(\"school_sourcedId\", schoolSourcedId);",
															"",
															"        // Define getAllterms API URL",
															"        let getAllTermsUrl = pm.environment.get(\"URL\") + pm.environment.get(\"rosterPathPrefix\")+\"/terms\";",
															"",
															"        // Make getAllterms Request",
															"        pm.sendRequest({",
															"            url: getAllTermsUrl,",
															"            method: 'GET',",
															"            header: headers",
															"        }, function (err, res) {",
															"            if (err || res.code !== 200) {",
															"                console.error(\"GET TERMS API Failed. Code:\", res?.code || \"No response\", \"Error:\", err);",
															"                throw new Error(\"GET TERMS API request failed.\");",
															"            }",
															"",
															"            console.log(\"GET TERMS API succeeded with status:\", res.code);",
															"",
															"            let response = res.json();",
															"            let termSessions = response.academicSessions.filter(session => session.type === \"TERM\");",
															"",
															"            if (termSessions.length === 0) {",
															"                throw new Error(\"No academicSessions of type 'TERM' found.\");",
															"            }",
															"",
															"            // Select a random term sourcedId",
															"            let randomIndex = Math.floor(Math.random() * termSessions.length);",
															"            let termSourcedId = termSessions[randomIndex].sourcedId;",
															"",
															"            console.log(\"Selected TERM sourcedId: \" + termSourcedId);",
															"",
															"            // Save to environment variable",
															"            pm.environment.set(\"term_sourcedId\", termSourcedId);",
															"",
															"            // Generate and store classSourcedId",
															"            let classSourcedId = generateUUID();",
															"            pm.environment.set(\"classSourcedId\", classSourcedId);",
															"            console.log(\"Generated classSourcedId: \" + classSourcedId);",
															"",
															"            // Define Class API URL",
															"            let classUrl = pm.environment.get(\"URL\") + pm.environment.get(\"customPathPrefix\")+\"/classes\";",
															"",
															"            // Define Class API Request Body",
															"            let classRequestBody = {",
															"                \"sourcedId\": pm.environment.get(\"classSourcedId\"), //Required",
															"                \"status\": \"active\", //Required",
															"                \"title\": \"title\", //Required",
															"                \"classType\": \"SCHEDULED\", //Required",
															"                \"course\": { //required",
															"                    \"href\": \"/courses/\" + pm.environment.get(\"courseSourcedId\"),",
															"                    \"sourcedId\": pm.environment.get(\"courseSourcedId\"),",
															"                    \"type\": \"course\"",
															"                },",
															"                \"school\": { //required",
															"                    \"href\": \"/org/\" + pm.environment.get(\"school_sourcedId\"),",
															"                    \"sourcedId\": pm.environment.get(\"school_sourcedId\"),",
															"                    \"type\": \"org\"",
															"                },",
															"                \"terms\": [ //required",
															"                    {",
															"                        \"href\": \"/academicSession/\" + pm.environment.get(\"term_sourcedId\"),",
															"                        \"sourcedId\":pm.environment.get(\"term_sourcedId\"),",
															"                        \"type\": \"academicSession\"",
															"                    }",
															"                ]",
															"            }",
															"",
															"            // Make the Class POST request",
															"            pm.sendRequest({",
															"                url: classUrl,",
															"                method: 'POST',",
															"                header: headers,",
															"                body: {",
															"                    mode: 'raw',",
															"                    raw: JSON.stringify(classRequestBody)",
															"                }",
															"            }, function (err, res) {",
															"                if (err) {",
															"                    console.error(\"POST Class API Error: \", err);",
															"                    pm.environment.unset(\"classSourcedId\"); // Clear sourcedId on failure",
															"                    throw new Error(\"Class POST API request failed.\");",
															"                }",
															"",
															"                if (res.code !== 201) {  // Ensure status is 201 Created",
															"                    console.error(\"Unexpected POST Class API Response Code: \" + res.code);",
															"                    pm.environment.unset(\"classSourcedId\"); // Clear sourcedId on failure",
															"                    throw new Error(\"POST Class API did not return 201 Created.\");",
															"                }",
															"",
															"                console.log(\"POST Class API succeeded with status: \" + res.code);",
															"",
															"            });",
															"        });",
															"    });",
															"});",
															"",
															"",
															"let uuid = generateUUID();",
															"pm.environment.set(\"randomUUID\", uuid);",
															"",
															"",
															"",
															"",
															"let requestBody = JSON.parse(request.data);",
															"let putAssessmentLineitemRequestBody = requestBody.assessmentLineItem;",
															"",
															"// Store full object as a single environment variable",
															"pm.environment.set(\"putAssessmentLineitemRequestBody\", JSON.stringify(putAssessmentLineitemRequestBody));",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"assessmentLineItem\": {\n        \"sourcedId\": \"{{randomUUID}}\",\n        \"status\": \"active\",\n        \"dateLastModified\": \"{{isoDateTime}}\",\n        \"metadata\": null,\n        \"title\": \"Good\\n\\nEffort\",\n        \"description\": \"This is asdcsd\",\n        \"class\": {\n            \"href\": \"https://example.com\",\n            \"sourcedId\": \"{{classSourcedId}}\",\n            \"type\": \"class\"\n        },\n        \"parentAssessmentLineItem\": null,\n        \"scoreScale\": {\n            \"href\": \"https://example.com/scoreScale\",\n            \"sourcedId\": \"{{randomUUID}}\",\n            \"type\": \"scoreScale\"\n        },\n        \"resultValueMin\": 90,\n        \"resultValueMax\": 100,\n        \"learningObjectiveSet\": null\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}{{endpoint}}/assessmentLineItems/{{randomUUID}}",
													"host": [
														"{{URL}}{{endpoint}}"
													],
													"path": [
														"assessmentLineItems",
														"{{randomUUID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify API throws an error for class which is not exist",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Parse the JSON response",
															"let jsonData = pm.response.json(); ",
															"",
															"pm.test(\" API should return 404 Not Found\", function () {",
															"  pm.response.to.have.status(404);",
															"});",
															"",
															"",
															"",
															"// Construct expected error message",
															"let classSourcedId = pm.environment.get(\"randomUUID\"); // Define the sourcedId here",
															"let expectedErrorMessage = `The class with sourcedId ${classSourcedId} was not found or has already been deleted.`; // Corrected typo in \"nalready\"",
															"",
															"// Validate the error message exactly",
															"pm.test(\"Verify Error message and it should matches with requested sourcedId \", function () {",
															"    pm.expect(jsonData.imsx_description).to.eql(expectedErrorMessage);",
															"});",
															"",
															"",
															"",
															"pm.test(\"Validate response structure for AsessmentLineItem unknownobject error\", function () {",
															"    const jsonData = pm.response.json();",
															"",
															"    // Top-level fields",
															"    pm.expect(jsonData).to.have.property(\"imsx_codeMajor\", \"failure\");",
															"    pm.expect(jsonData).to.have.property(\"imsx_severity\", \"error\");",
															"    pm.expect(jsonData).to.have.property(\"imsx_description\");",
															"    ",
															"",
															"    // Check imsx_CodeMinor structure",
															"    pm.expect(jsonData).to.have.property(\"imsx_CodeMinor\");",
															"    pm.expect(jsonData.imsx_CodeMinor).to.have.property(\"imsx_codeMinorField\");",
															"    pm.expect(jsonData.imsx_CodeMinor.imsx_codeMinorField).to.be.an(\"array\").that.is.not.empty;",
															"",
															"    // Validate inner fields",
															"    const minorField = jsonData.imsx_CodeMinor.imsx_codeMinorField[0];",
															"    pm.expect(minorField).to.have.property(\"imsx_codeMinorFieldName\", \"TargetEndSystem\");",
															"    pm.expect(minorField).to.have.property(\"imsx_codeMinorFieldValue\", \"unknownobject\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Set headers dynamically from environment variables",
															"pm.request.headers.upsert({ key: \"Authorization\", value: pm.environment.get(\"Auth\") });",
															"pm.request.headers.upsert({ key: \"x-app-key\", value: pm.environment.get(\"x-app-key\") });",
															"pm.request.headers.upsert({ key: \"x-client-id\", value: pm.environment.get(\"x-client-id\") });",
															"",
															"// Generate a random UUID for sourcedId",
															"function generateUUID() {",
															"    let dt = new Date().getTime();",
															"    let uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {",
															"        let r = (dt + Math.random() * 16) % 16 | 0;",
															"        dt = Math.floor(dt / 16);",
															"        return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);",
															"    });",
															"    return uuid;",
															"}",
															"",
															"const headers = {",
															"    'Authorization': pm.environment.get(\"Auth\"),",
															"    'x-app-key': pm.environment.get(\"x-app-key\"),",
															"    'x-client-id': pm.environment.get(\"x-client-id\"),",
															"    'Content-Type': 'application/json'",
															"};",
															"",
															"// Generate and store courseSourcedId",
															"let courseSourcedId = generateUUID();",
															"pm.environment.set(\"courseSourcedId\", courseSourcedId);",
															"console.log(\"Generated courseSourcedId: \" + courseSourcedId);",
															"",
															"// Generate current UTC timestamp in ISO format: 2025-01-29T06:51:57Z",
															"function getCurrentISOString() {",
															"    return new Date().toISOString().split('.')[0] + \"Z\";",
															"}",
															"",
															"// Set dynamic date variables",
															"let isoDateTime = getCurrentISOString(); // full timestamp",
															"let isoDateOnly = isoDateTime.split('T')[0]; // date only",
															"",
															"pm.environment.set(\"isoDateTime\", isoDateTime);",
															"pm.environment.set(\"isoDateOnly\", isoDateOnly);",
															"",
															"console.log(\"Generated ISO DateTime: \" + isoDateTime);",
															"console.log(\"Generated ISO Date Only: \" + isoDateOnly);",
															"",
															"",
															"// Define Course API URL",
															"let courseUrl = pm.environment.get(\"URL\") + pm.environment.get(\"customPathPrefix\")+\"/courses\";",
															"",
															"// Define Course API Request Body",
															"let courseRequestBody = {",
															"    \"sourcedId\": pm.environment.get(\"courseSourcedId\"), //required",
															"    \"status\": \"active\", //required",
															"    \"title\": \"QA\", //required",
															"    \"courseCode\": \"courseCode\" //required",
															"",
															"}",
															"",
															"",
															"// Make the Course POST request",
															"pm.sendRequest({",
															"    url: courseUrl,",
															"    method: 'POST',",
															"    header: headers,",
															"    body: {",
															"        mode: 'raw',",
															"        raw: JSON.stringify(courseRequestBody)",
															"    }",
															"}, function (err, res) {",
															"    if (err) {",
															"        console.error(\"POST Course API Error: \", err);",
															"        pm.environment.unset(\"courseSourcedId\"); // Clear sourcedId on failure",
															"        throw new Error(\"Course POST API request failed.\");",
															"    }",
															"",
															"    if (res.code !== 201) {  // Ensure status is 201 Created",
															"        console.error(\"Unexpected POST Course API Response Code: \" + res.code);",
															"        pm.environment.unset(\"courseSourcedId\"); // Clear sourcedId on failure",
															"        throw new Error(\"Course POST API did not return 201 Created.\");",
															"    }",
															"",
															"    console.log(\"Course POST API succeeded with status: \" + res.code);",
															"",
															"    // Define getAllOrgs API URL",
															"    let getAllOrgsUrl = pm.environment.get(\"URL\") + pm.environment.get(\"rosterPathPrefix\")+\"/orgs\";",
															"",
															"    // Make getAllOrgs Request",
															"    pm.sendRequest({",
															"        url: getAllOrgsUrl,",
															"        method: 'GET',",
															"        header: headers",
															"    }, function (err, res) {",
															"        if (err || res.code !== 200) {",
															"            console.error(\"GET Orgs API Failed. Code:\", res?.code || \"No response\", \"Error:\", err);",
															"            throw new Error(\"GET Orgs API request failed.\");",
															"        }",
															"",
															"        console.log(\"GET Orgs API succeeded with status:\", res.code);",
															"",
															"        let response = res.json();",
															"        let schoolOrgs = response.orgs.filter(org => org.type === \"SCHOOL\");",
															"",
															"        if (schoolOrgs.length === 0) {",
															"            throw new Error(\"No orgs of type 'SCHOOL' found.\");",
															"        }",
															"",
															"        // Get a random school sourcedId",
															"        let randomIndex = Math.floor(Math.random() * schoolOrgs.length);",
															"        let schoolSourcedId = schoolOrgs[randomIndex].sourcedId;",
															"",
															"        console.log(\"Selected school sourcedId: \" + schoolSourcedId);",
															"",
															"        // Save to environment variable for later use",
															"        pm.environment.set(\"school_sourcedId\", schoolSourcedId);",
															"",
															"        // Define getAllterms API URL",
															"        let getAllTermsUrl = pm.environment.get(\"URL\") + pm.environment.get(\"rosterPathPrefix\")+\"/terms\";",
															"",
															"        // Make getAllterms Request",
															"        pm.sendRequest({",
															"            url: getAllTermsUrl,",
															"            method: 'GET',",
															"            header: headers",
															"        }, function (err, res) {",
															"            if (err || res.code !== 200) {",
															"                console.error(\"GET TERMS API Failed. Code:\", res?.code || \"No response\", \"Error:\", err);",
															"                throw new Error(\"GET TERMS API request failed.\");",
															"            }",
															"",
															"            console.log(\"GET TERMS API succeeded with status:\", res.code);",
															"",
															"            let response = res.json();",
															"            let termSessions = response.academicSessions.filter(session => session.type === \"TERM\");",
															"",
															"            if (termSessions.length === 0) {",
															"                throw new Error(\"No academicSessions of type 'TERM' found.\");",
															"            }",
															"",
															"            // Select a random term sourcedId",
															"            let randomIndex = Math.floor(Math.random() * termSessions.length);",
															"            let termSourcedId = termSessions[randomIndex].sourcedId;",
															"",
															"            console.log(\"Selected TERM sourcedId: \" + termSourcedId);",
															"",
															"            // Save to environment variable",
															"            pm.environment.set(\"term_sourcedId\", termSourcedId);",
															"",
															"            // Generate and store classSourcedId",
															"            let classSourcedId = generateUUID();",
															"            pm.environment.set(\"classSourcedId\", classSourcedId);",
															"            console.log(\"Generated classSourcedId: \" + classSourcedId);",
															"",
															"            // Define Class API URL",
															"            let classUrl = pm.environment.get(\"URL\") + pm.environment.get(\"customPathPrefix\")+\"/classes\";",
															"",
															"            // Define Class API Request Body",
															"            let classRequestBody = {",
															"                \"sourcedId\": pm.environment.get(\"classSourcedId\"), //Required",
															"                \"status\": \"active\", //Required",
															"                \"title\": \"title\", //Required",
															"                \"classType\": \"SCHEDULED\", //Required",
															"                \"course\": { //required",
															"                    \"href\": \"/courses/\" + pm.environment.get(\"courseSourcedId\"),",
															"                    \"sourcedId\": pm.environment.get(\"courseSourcedId\"),",
															"                    \"type\": \"course\"",
															"                },",
															"                \"school\": { //required",
															"                    \"href\": \"/org/\" + pm.environment.get(\"school_sourcedId\"),",
															"                    \"sourcedId\": pm.environment.get(\"school_sourcedId\"),",
															"                    \"type\": \"org\"",
															"                },",
															"                \"terms\": [ //required",
															"                    {",
															"                        \"href\": \"/academicSession/\" + pm.environment.get(\"term_sourcedId\"),",
															"                        \"sourcedId\":pm.environment.get(\"term_sourcedId\"),",
															"                        \"type\": \"academicSession\"",
															"                    }",
															"                ]",
															"            }",
															"",
															"            // Make the Class POST request",
															"            pm.sendRequest({",
															"                url: classUrl,",
															"                method: 'POST',",
															"                header: headers,",
															"                body: {",
															"                    mode: 'raw',",
															"                    raw: JSON.stringify(classRequestBody)",
															"                }",
															"            }, function (err, res) {",
															"                if (err) {",
															"                    console.error(\"POST Class API Error: \", err);",
															"                    pm.environment.unset(\"classSourcedId\"); // Clear sourcedId on failure",
															"                    throw new Error(\"Class POST API request failed.\");",
															"                }",
															"",
															"                if (res.code !== 201) {  // Ensure status is 201 Created",
															"                    console.error(\"Unexpected POST Class API Response Code: \" + res.code);",
															"                    pm.environment.unset(\"classSourcedId\"); // Clear sourcedId on failure",
															"                    throw new Error(\"POST Class API did not return 201 Created.\");",
															"                }",
															"",
															"                console.log(\"POST Class API succeeded with status: \" + res.code);",
															"",
															"                // --- Subsequent Requests (ScoreScale, AssessmentLineItem) ---",
															"                // Place the pm.sendRequest calls for ScoreScale and AssessmentLineItem here,",
															"                // ensuring they run only after the Class POST request is successful.",
															"",
															"                // Generate and store sourcedId for ScoreScale",
															"                let scoreScaleSourcedId = generateUUID();",
															"                pm.environment.set(\"scoreScaleSourcedId\", scoreScaleSourcedId);",
															"                console.log(\"Generated scoreScaleSourcedId: \" + scoreScaleSourcedId);",
															"",
															"                // Define ScoreScale API URL",
															"                let scoreScaleUrl = pm.environment.get(\"URL\") + pm.environment.get(\"pathPrefix\")+\"/scoreScales/\"+ scoreScaleSourcedId;",
															"",
															"                // Define ScoreScale API Request Body",
															"                let scoreScaleRequestBody = {",
															"                    \"scoreScale\": {",
															"                        \"sourcedId\":pm.environment.get(\"scoreScaleSourcedId\"), //required",
															"                        \"status\": \"active\", //required",
															"                        \"dateLastModified\": isoDateTime, //required",
															"                        \"metadata\": {",
															"                            \"test\": \"metadata\"",
															"                        },",
															"                        \"title\": \"QATestProd\", //required",
															"                        \"type\": \"QATestProd\", //required",
															"                        \"course\": {",
															"                            \"href\": \"/course/\" + pm.environment.get(\"courseSourcedId\"),",
															"                            \"sourcedId\": pm.environment.get(\"courseSourcedId\"),",
															"                            \"type\": \"course\"",
															"                        },",
															"                        \"class\": {  //required",
															"                            \"href\": \"/classes/\" + pm.environment.get(\"classSourcedId\"),",
															"                            \"sourcedId\": pm.environment.get(\"classSourcedId\"),",
															"                            \"type\": \"class\"",
															"                        },",
															"                        \"scoreScaleValue\": [ //required",
															"                            {",
															"                                \"itemValueLHS\": \"0-57\",",
															"                                \"itemValueRHS\": \"F\"",
															"                            },",
															"                            {",
															"                                \"itemValueLHS\": \"60-69\",",
															"                                \"itemValueRHS\": \"D\"",
															"                            },",
															"                            {",
															"                                \"itemValueLHS\": \"70-79\",",
															"                                \"itemValueRHS\": \"C\"",
															"                            },",
															"                            {",
															"                                \"itemValueLHS\": \"80-89\",",
															"                                \"itemValueRHS\": \"B\"",
															"                            },",
															"                            {",
															"                                \"itemValueLHS\": \"90-100\",",
															"                                \"itemValueRHS\": \"A\"",
															"                            }",
															"                        ]",
															"                    }",
															"                }",
															"",
															"                // Make the PUT ScoreScale request",
															"                pm.sendRequest({",
															"                    url: scoreScaleUrl,",
															"                    method: 'PUT',",
															"                    header: headers,",
															"                    body: {",
															"                        mode: 'raw',",
															"                        raw: JSON.stringify(scoreScaleRequestBody)",
															"                    }",
															"                }, function (err, res) {",
															"                    if (err) {",
															"                        console.error(\"PUT ScoreScale API Error: \", err);",
															"                        pm.environment.unset(\"scoreScaleSourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT ScoreScale API request failed.\");",
															"                    }",
															"",
															"                    if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
															"                        console.error(\"Unexpected PUT ScoreScale API Response Code: \" + res.code);",
															"                        pm.environment.unset(\"scoreScaleSourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT ScoreScale API did not return 200 or 201.\");",
															"                    }",
															"",
															"                    console.log(\"PUT ScoreScale API succeeded with status: \" + res.code);",
															"",
															"                    // Generate and store sourcedId for AssessmentLineItem",
															"                    let assessmentLineItemeSourcedId = generateUUID();",
															"                    pm.environment.set(\"assessmentLineItemeSourcedId\", assessmentLineItemeSourcedId);",
															"                    console.log(\"Generated assessmentLineItemeSourcedId: \" + assessmentLineItemeSourcedId);",
															"",
															"                    // Define putAssessmentLineItems API URL",
															"                    let assessmentLineItemsUrl = pm.environment.get(\"URL\") + pm.environment.get(\"pathPrefix\")+\"/assessmentLineItems/\"+ assessmentLineItemeSourcedId;",
															"",
															"                    // Define putAssessmentLineItems API Request Body",
															"                    let assessmentLineItemRequestBody = {",
															"                        \"assessmentLineItem\": {",
															"                            \"sourcedId\": pm.environment.get(\"assessmentLineItemeSourcedId\"),",
															"                            \"status\": \"active\",",
															"                            \"dateLastModified\": isoDateTime, // Use the dynamically generated timestamp",
															"                            \"title\": \"Good Effort\"",
															"                        }",
															"                    }",
															"",
															"                    // Make the PUT AssessmentLineItems request",
															"                    pm.sendRequest({",
															"                        url: assessmentLineItemsUrl,",
															"                        method: 'PUT',",
															"                        header: headers,",
															"                        body: {",
															"                            mode: 'raw',",
															"                            raw: JSON.stringify(assessmentLineItemRequestBody)",
															"                        }",
															"                    }, function (err, res) {",
															"                        if (err) {",
															"                            console.error(\"PUT AssessmentLineItems API Error: \", err);",
															"                            pm.environment.unset(\"assessmentLineItemeSourcedId\"); // Clear sourcedId on failure",
															"                            throw new Error(\"PUT AssessmentLineItems API request failed.\");",
															"                        }",
															"",
															"                        if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
															"                            console.error(\"Unexpected PUT AssessmentLineItems API Response Code: \" + res.code);",
															"                            pm.environment.unset(\"assessmentLineItemeSourcedId\"); // Clear sourcedId on failure",
															"                            throw new Error(\"PUT AssessmentLineItems API did not return 200 or 201.\");",
															"                        }",
															"",
															"                        console.log(\"PUT AssessmentLineItems API succeeded with status: \" + res.code);",
															"                       ",
															"                    });",
															"",
															"                     ",
															"                    ",
															"                });",
															"               ",
															"                       ",
															"",
															"            });",
															"        });",
															"    });",
															"});",
															"",
															"",
															"let uuid = generateUUID();",
															"pm.environment.set(\"randomUUID\", uuid);",
															"",
															"",
															"",
															"",
															"let requestBody = JSON.parse(request.data);",
															"let putAssessmentLineitemRequestBody = requestBody.assessmentLineItem;",
															"",
															"// Store full object as a single environment variable",
															"pm.environment.set(\"putAssessmentLineitemRequestBody\", JSON.stringify(putAssessmentLineitemRequestBody));",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJjbGllbnROYW1lIjoiYWxwaGEiLCJjbGllbnRJZCI6Ijk3OGNmNzE4ZjVjMjY2ODQiLCJhZG1pblVzZXIiOiJBZG1pblVzZXIiLCJhZG1pbkVtYWlsIjoiYWxwaGFAYWxwaGEuY29tIiwiY29nbml0b1VzZXJJZCI6ImNvZ25pdG8tMTIzIiwic2NvcGVzIjpbInJlYWQiLCJ3cml0ZSJdLCJpYXQiOjE3MzM3MTM0NzUsImV4cCI6MTc2NTI0OTQ3NSwiaXNzIjoiYWxwaGEifQ.m_XkirIn8QeH9-C0og9CDQyUVD97IAzL6kNoi4GilD3XpwXMVoC6TnkEqxYTqgHsXrtUslY6hCjhLC9ij7xiPSISiWpu66pQ6E93wzM-4VPQHjb2ZdzDSStj3osI4_9dMdWmCjwdXOjLy49K_D8P6NjkxeXkK7erzdZZrg8-hesZT4H2zg_XjDSh6Xj2yWoDPVggLqXc1RtDh324MHaF643eAitd3n-QDul0X0PuXDWxRqm8OISHiM7uzSXX-sjOjiKxvtSjmKGmrGrq3AD8TqAnNbkE-v6mA-gWDPzKYQ9Eykst1Owqnc8Nuvb5rvepKta0gRPKXTrfOZNdLUMJlg",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "x-client-id",
														"value": "978cf718f5c26684",
														"type": "text"
													},
													{
														"key": "x-app-key",
														"value": "ytDZfGOdPL4brOtoccbSg4BUYpBQwwDqaLBEAgiM",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"assessmentLineItem\": {\n        \"sourcedId\": \"{{randomUUID}}\",\n        \"status\": \"active\",\n        \"dateLastModified\": \"{{isoDateTime}}\",\n        \"metadata\": null,\n        \"title\": \"title\",\n        \"description\": \"This is asdcsd\",\n        \"class\": {\n            \"href\": \"https://example.com\",\n            \"sourcedId\": \"{{randomUUID}}\",\n            \"type\": \"class\"\n        },\n        \"parentAssessmentLineItem\": {\n            \"href\": \"/classes/b2a85993-8b03-4560-8ab3-d39b56570823\",\n            \"sourcedId\": \"{{assessmentLineItemeSourcedId}}\",\n            \"type\": \"assessmentLineItem\"\n        },\n        \"scoreScale\": {\n            \"href\": \"https://example.com/scoreScale\",\n            \"sourcedId\": \"{{scoreScaleSourcedId}}\",\n            \"type\": \"scoreScale\"\n        },\n        \"resultValueMin\": 90,\n        \"resultValueMax\": 100,\n        \"learningObjectiveSet\": null\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}{{endpoint}}/assessmentLineItems/{{randomUUID}}",
													"host": [
														"{{URL}}{{endpoint}}"
													],
													"path": [
														"assessmentLineItems",
														"{{randomUUID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify API throws an error for class which is deleted",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Parse the JSON response",
															"let jsonData = pm.response.json(); ",
															"",
															"pm.test(\" API should return 404 Not Found\", function () {",
															"  pm.response.to.have.status(404);",
															"});",
															"",
															"",
															"",
															"// Construct expected error message",
															"let classSourcedId = pm.environment.get(\"classSourcedId\"); // Define the sourcedId here",
															"let expectedErrorMessage = `The class with sourcedId ${classSourcedId} was not found or has already been deleted.`; // Corrected typo in \"nalready\"",
															"",
															"// Validate the error message exactly",
															"pm.test(\"Verify Error message and it should matches with requested sourcedId \", function () {",
															"    pm.expect(jsonData.imsx_description).to.eql(expectedErrorMessage);",
															"});",
															"",
															"",
															"",
															"pm.test(\"Validate response structure for AsessmentLineItem unknownobject error\", function () {",
															"    const jsonData = pm.response.json();",
															"",
															"    // Top-level fields",
															"    pm.expect(jsonData).to.have.property(\"imsx_codeMajor\", \"failure\");",
															"    pm.expect(jsonData).to.have.property(\"imsx_severity\", \"error\");",
															"    pm.expect(jsonData).to.have.property(\"imsx_description\");",
															"    ",
															"",
															"    // Check imsx_CodeMinor structure",
															"    pm.expect(jsonData).to.have.property(\"imsx_CodeMinor\");",
															"    pm.expect(jsonData.imsx_CodeMinor).to.have.property(\"imsx_codeMinorField\");",
															"    pm.expect(jsonData.imsx_CodeMinor.imsx_codeMinorField).to.be.an(\"array\").that.is.not.empty;",
															"",
															"    // Validate inner fields",
															"    const minorField = jsonData.imsx_CodeMinor.imsx_codeMinorField[0];",
															"    pm.expect(minorField).to.have.property(\"imsx_codeMinorFieldName\", \"TargetEndSystem\");",
															"    pm.expect(minorField).to.have.property(\"imsx_codeMinorFieldValue\", \"unknownobject\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Set headers dynamically from environment variables",
															"pm.request.headers.upsert({ key: \"Authorization\", value: pm.environment.get(\"Auth\") });",
															"pm.request.headers.upsert({ key: \"x-app-key\", value: pm.environment.get(\"x-app-key\") });",
															"pm.request.headers.upsert({ key: \"x-client-id\", value: pm.environment.get(\"x-client-id\") });",
															"",
															"// Generate a random UUID for sourcedId",
															"function generateUUID() {",
															"    let dt = new Date().getTime();",
															"    let uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {",
															"        let r = (dt + Math.random() * 16) % 16 | 0;",
															"        dt = Math.floor(dt / 16);",
															"        return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);",
															"    });",
															"    return uuid;",
															"}",
															"",
															"const headers = {",
															"    'Authorization': pm.environment.get(\"Auth\"),",
															"    'x-app-key': pm.environment.get(\"x-app-key\"),",
															"    'x-client-id': pm.environment.get(\"x-client-id\"),",
															"    'Content-Type': 'application/json'",
															"};",
															"",
															"// Generate and store courseSourcedId",
															"let courseSourcedId = generateUUID();",
															"pm.environment.set(\"courseSourcedId\", courseSourcedId);",
															"console.log(\"Generated courseSourcedId: \" + courseSourcedId);",
															"",
															"// Generate current UTC timestamp in ISO format: 2025-01-29T06:51:57Z",
															"function getCurrentISOString() {",
															"    return new Date().toISOString().split('.')[0] + \"Z\";",
															"}",
															"",
															"// Set dynamic date variables",
															"let isoDateTime = getCurrentISOString(); // full timestamp",
															"let isoDateOnly = isoDateTime.split('T')[0]; // date only",
															"",
															"pm.environment.set(\"isoDateTime\", isoDateTime);",
															"pm.environment.set(\"isoDateOnly\", isoDateOnly);",
															"",
															"console.log(\"Generated ISO DateTime: \" + isoDateTime);",
															"console.log(\"Generated ISO Date Only: \" + isoDateOnly);",
															"",
															"",
															"// Define Course API URL",
															"let courseUrl = pm.environment.get(\"URL\") + pm.environment.get(\"customPathPrefix\")+\"/courses\";",
															"",
															"// Define Course API Request Body",
															"let courseRequestBody = {",
															"    \"sourcedId\": pm.environment.get(\"courseSourcedId\"), //required",
															"    \"status\": \"active\", //required",
															"    \"title\": \"QA\", //required",
															"    \"courseCode\": \"courseCode\" //required",
															"",
															"}",
															"",
															"",
															"// Make the Course POST request",
															"pm.sendRequest({",
															"    url: courseUrl,",
															"    method: 'POST',",
															"    header: headers,",
															"    body: {",
															"        mode: 'raw',",
															"        raw: JSON.stringify(courseRequestBody)",
															"    }",
															"}, function (err, res) {",
															"    if (err) {",
															"        console.error(\"POST Course API Error: \", err);",
															"        pm.environment.unset(\"courseSourcedId\"); // Clear sourcedId on failure",
															"        throw new Error(\"Course POST API request failed.\");",
															"    }",
															"",
															"    if (res.code !== 201) {  // Ensure status is 201 Created",
															"        console.error(\"Unexpected POST Course API Response Code: \" + res.code);",
															"        pm.environment.unset(\"courseSourcedId\"); // Clear sourcedId on failure",
															"        throw new Error(\"Course POST API did not return 201 Created.\");",
															"    }",
															"",
															"    console.log(\"Course POST API succeeded with status: \" + res.code);",
															"",
															"    // Define getAllOrgs API URL",
															"    let getAllOrgsUrl = pm.environment.get(\"URL\") + pm.environment.get(\"rosterPathPrefix\")+\"/orgs\";",
															"",
															"    // Make getAllOrgs Request",
															"    pm.sendRequest({",
															"        url: getAllOrgsUrl,",
															"        method: 'GET',",
															"        header: headers",
															"    }, function (err, res) {",
															"        if (err || res.code !== 200) {",
															"            console.error(\"GET Orgs API Failed. Code:\", res?.code || \"No response\", \"Error:\", err);",
															"            throw new Error(\"GET Orgs API request failed.\");",
															"        }",
															"",
															"        console.log(\"GET Orgs API succeeded with status:\", res.code);",
															"",
															"        let response = res.json();",
															"        let schoolOrgs = response.orgs.filter(org => org.type === \"SCHOOL\");",
															"",
															"        if (schoolOrgs.length === 0) {",
															"            throw new Error(\"No orgs of type 'SCHOOL' found.\");",
															"        }",
															"",
															"        // Get a random school sourcedId",
															"        let randomIndex = Math.floor(Math.random() * schoolOrgs.length);",
															"        let schoolSourcedId = schoolOrgs[randomIndex].sourcedId;",
															"",
															"        console.log(\"Selected school sourcedId: \" + schoolSourcedId);",
															"",
															"        // Save to environment variable for later use",
															"        pm.environment.set(\"school_sourcedId\", schoolSourcedId);",
															"",
															"        // Define getAllterms API URL",
															"        let getAllTermsUrl = pm.environment.get(\"URL\") + pm.environment.get(\"rosterPathPrefix\")+\"/terms\";",
															"",
															"        // Make getAllterms Request",
															"        pm.sendRequest({",
															"            url: getAllTermsUrl,",
															"            method: 'GET',",
															"            header: headers",
															"        }, function (err, res) {",
															"            if (err || res.code !== 200) {",
															"                console.error(\"GET TERMS API Failed. Code:\", res?.code || \"No response\", \"Error:\", err);",
															"                throw new Error(\"GET TERMS API request failed.\");",
															"            }",
															"",
															"            console.log(\"GET TERMS API succeeded with status:\", res.code);",
															"",
															"            let response = res.json();",
															"            let termSessions = response.academicSessions.filter(session => session.type === \"TERM\");",
															"",
															"            if (termSessions.length === 0) {",
															"                throw new Error(\"No academicSessions of type 'TERM' found.\");",
															"            }",
															"",
															"            // Select a random term sourcedId",
															"            let randomIndex = Math.floor(Math.random() * termSessions.length);",
															"            let termSourcedId = termSessions[randomIndex].sourcedId;",
															"",
															"            console.log(\"Selected TERM sourcedId: \" + termSourcedId);",
															"",
															"            // Save to environment variable",
															"            pm.environment.set(\"term_sourcedId\", termSourcedId);",
															"",
															"            // Generate and store classSourcedId",
															"            let classSourcedId = generateUUID();",
															"            pm.environment.set(\"classSourcedId\", classSourcedId);",
															"            console.log(\"Generated classSourcedId: \" + classSourcedId);",
															"",
															"            // Define Class API URL",
															"            let classUrl = pm.environment.get(\"URL\") + pm.environment.get(\"customPathPrefix\")+\"/classes\";",
															"",
															"            // Define Class API Request Body",
															"            let classRequestBody = {",
															"                \"sourcedId\": pm.environment.get(\"classSourcedId\"), //Required",
															"                \"status\": \"active\", //Required",
															"                \"title\": \"title\", //Required",
															"                \"classType\": \"SCHEDULED\", //Required",
															"                \"course\": { //required",
															"                    \"href\": \"/courses/\" + pm.environment.get(\"courseSourcedId\"),",
															"                    \"sourcedId\": pm.environment.get(\"courseSourcedId\"),",
															"                    \"type\": \"course\"",
															"                },",
															"                \"school\": { //required",
															"                    \"href\": \"/org/\" + pm.environment.get(\"school_sourcedId\"),",
															"                    \"sourcedId\": pm.environment.get(\"school_sourcedId\"),",
															"                    \"type\": \"org\"",
															"                },",
															"                \"terms\": [ //required",
															"                    {",
															"                        \"href\": \"/academicSession/\" + pm.environment.get(\"term_sourcedId\"),",
															"                        \"sourcedId\":pm.environment.get(\"term_sourcedId\"),",
															"                        \"type\": \"academicSession\"",
															"                    }",
															"                ]",
															"            }",
															"",
															"            // Make the Class POST request",
															"            pm.sendRequest({",
															"                url: classUrl,",
															"                method: 'POST',",
															"                header: headers,",
															"                body: {",
															"                    mode: 'raw',",
															"                    raw: JSON.stringify(classRequestBody)",
															"                }",
															"            }, function (err, res) {",
															"                if (err) {",
															"                    console.error(\"POST Class API Error: \", err);",
															"                    pm.environment.unset(\"classSourcedId\"); // Clear sourcedId on failure",
															"                    throw new Error(\"Class POST API request failed.\");",
															"                }",
															"",
															"                if (res.code !== 201) {  // Ensure status is 201 Created",
															"                    console.error(\"Unexpected POST Class API Response Code: \" + res.code);",
															"                    pm.environment.unset(\"classSourcedId\"); // Clear sourcedId on failure",
															"                    throw new Error(\"POST Class API did not return 201 Created.\");",
															"                }",
															"",
															"                console.log(\"POST Class API succeeded with status: \" + res.code);",
															"",
															"                // --- Subsequent Requests (ScoreScale, AssessmentLineItem) ---",
															"                // Place the pm.sendRequest calls for ScoreScale and AssessmentLineItem here,",
															"                // ensuring they run only after the Class POST request is successful.",
															"",
															"                // Generate and store sourcedId for ScoreScale",
															"                let scoreScaleSourcedId = generateUUID();",
															"                pm.environment.set(\"scoreScaleSourcedId\", scoreScaleSourcedId);",
															"                console.log(\"Generated scoreScaleSourcedId: \" + scoreScaleSourcedId);",
															"",
															"                // Define ScoreScale API URL",
															"                let scoreScaleUrl = pm.environment.get(\"URL\") + pm.environment.get(\"pathPrefix\")+\"/scoreScales/\"+ scoreScaleSourcedId;",
															"",
															"                // Define ScoreScale API Request Body",
															"                let scoreScaleRequestBody = {",
															"                    \"scoreScale\": {",
															"                        \"sourcedId\":pm.environment.get(\"scoreScaleSourcedId\"), //required",
															"                        \"status\": \"active\", //required",
															"                        \"dateLastModified\": isoDateTime, //required",
															"                        \"metadata\": {",
															"                            \"test\": \"metadata\"",
															"                        },",
															"                        \"title\": \"QATestProd\", //required",
															"                        \"type\": \"QATestProd\", //required",
															"                        \"course\": {",
															"                            \"href\": \"/course/\" + pm.environment.get(\"courseSourcedId\"),",
															"                            \"sourcedId\": pm.environment.get(\"courseSourcedId\"),",
															"                            \"type\": \"course\"",
															"                        },",
															"                        \"class\": {  //required",
															"                            \"href\": \"/classes/\" + pm.environment.get(\"classSourcedId\"),",
															"                            \"sourcedId\": pm.environment.get(\"classSourcedId\"),",
															"                            \"type\": \"class\"",
															"                        },",
															"                        \"scoreScaleValue\": [ //required",
															"                            {",
															"                                \"itemValueLHS\": \"0-57\",",
															"                                \"itemValueRHS\": \"F\"",
															"                            },",
															"                            {",
															"                                \"itemValueLHS\": \"60-69\",",
															"                                \"itemValueRHS\": \"D\"",
															"                            },",
															"                            {",
															"                                \"itemValueLHS\": \"70-79\",",
															"                                \"itemValueRHS\": \"C\"",
															"                            },",
															"                            {",
															"                                \"itemValueLHS\": \"80-89\",",
															"                                \"itemValueRHS\": \"B\"",
															"                            },",
															"                            {",
															"                                \"itemValueLHS\": \"90-100\",",
															"                                \"itemValueRHS\": \"A\"",
															"                            }",
															"                        ]",
															"                    }",
															"                }",
															"",
															"                // Make the PUT ScoreScale request",
															"                pm.sendRequest({",
															"                    url: scoreScaleUrl,",
															"                    method: 'PUT',",
															"                    header: headers,",
															"                    body: {",
															"                        mode: 'raw',",
															"                        raw: JSON.stringify(scoreScaleRequestBody)",
															"                    }",
															"                }, function (err, res) {",
															"                    if (err) {",
															"                        console.error(\"PUT ScoreScale API Error: \", err);",
															"                        pm.environment.unset(\"scoreScaleSourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT ScoreScale API request failed.\");",
															"                    }",
															"",
															"                    if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
															"                        console.error(\"Unexpected PUT ScoreScale API Response Code: \" + res.code);",
															"                        pm.environment.unset(\"scoreScaleSourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT ScoreScale API did not return 200 or 201.\");",
															"                    }",
															"",
															"                    console.log(\"PUT ScoreScale API succeeded with status: \" + res.code);",
															"",
															"                    // Generate and store sourcedId for AssessmentLineItem",
															"                    let assessmentLineItemeSourcedId = generateUUID();",
															"                    pm.environment.set(\"assessmentLineItemeSourcedId\", assessmentLineItemeSourcedId);",
															"                    console.log(\"Generated assessmentLineItemeSourcedId: \" + assessmentLineItemeSourcedId);",
															"",
															"                    // Define putAssessmentLineItems API URL",
															"                    let assessmentLineItemsUrl = pm.environment.get(\"URL\") + pm.environment.get(\"pathPrefix\")+\"/assessmentLineItems/\"+ assessmentLineItemeSourcedId;",
															"",
															"                    // Define putAssessmentLineItems API Request Body",
															"                    let assessmentLineItemRequestBody = {",
															"                        \"assessmentLineItem\": {",
															"                            \"sourcedId\": pm.environment.get(\"assessmentLineItemeSourcedId\"),",
															"                            \"status\": \"active\",",
															"                            \"dateLastModified\": isoDateTime, // Use the dynamically generated timestamp",
															"                            \"title\": \"Good Effort\"",
															"                        }",
															"                    }",
															"",
															"                    // Make the PUT AssessmentLineItems request",
															"                    pm.sendRequest({",
															"                        url: assessmentLineItemsUrl,",
															"                        method: 'PUT',",
															"                        header: headers,",
															"                        body: {",
															"                            mode: 'raw',",
															"                            raw: JSON.stringify(assessmentLineItemRequestBody)",
															"                        }",
															"                    }, function (err, res) {",
															"                        if (err) {",
															"                            console.error(\"PUT AssessmentLineItems API Error: \", err);",
															"                            pm.environment.unset(\"assessmentLineItemeSourcedId\"); // Clear sourcedId on failure",
															"                            throw new Error(\"PUT AssessmentLineItems API request failed.\");",
															"                        }",
															"",
															"                        if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
															"                            console.error(\"Unexpected PUT AssessmentLineItems API Response Code: \" + res.code);",
															"                            pm.environment.unset(\"assessmentLineItemeSourcedId\"); // Clear sourcedId on failure",
															"                            throw new Error(\"PUT AssessmentLineItems API did not return 200 or 201.\");",
															"                        }",
															"",
															"                        console.log(\"PUT AssessmentLineItems API succeeded with status: \" + res.code);",
															"",
															"",
															"                        // Define Class API URL",
															"                            let deleteClassUrl = pm.environment.get(\"URL\") + pm.environment.get(\"customPathPrefix\")+\"/classes/\"+ pm.environment.get(\"classSourcedId\");               ",
															"",
															"                        //Make DELETE Class API Request",
															"                        pm.sendRequest({",
															"                            url: deleteClassUrl,",
															"                            method: 'DELETE',",
															"                            header: headers",
															"                            }, function (err, res) {",
															"                            if (err || res.code !== 204) {",
															"                             console.error(\"DELETE AssessmentLineItem API Failed. Code:\", res?.code || \"No response\", \"Error:\", err);",
															"                                throw new Error(\"DELETE AssessmentLineItem API request failed.\");",
															"                            }",
															"                            });",
															"                    });",
															"",
															"                     ",
															"                    ",
															"                });",
															"               ",
															"                       ",
															"",
															"            });",
															"        });",
															"    });",
															"});",
															"",
															"",
															"let uuid = generateUUID();",
															"pm.environment.set(\"randomUUID\", uuid);",
															"",
															"",
															"",
															"",
															"let requestBody = JSON.parse(request.data);",
															"let putAssessmentLineitemRequestBody = requestBody.assessmentLineItem;",
															"",
															"// Store full object as a single environment variable",
															"pm.environment.set(\"putAssessmentLineitemRequestBody\", JSON.stringify(putAssessmentLineitemRequestBody));",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"assessmentLineItem\": {\n        \"sourcedId\": \"{{randomUUID}}\",\n        \"status\": \"active\",\n        \"dateLastModified\": \"{{isoDateTime}}\",\n        \"metadata\": null,\n        \"title\": \"Good\\n\\nEffort\",\n        \"description\": \"This is asdcsd\",\n        \"class\": {\n            \"href\": \"https://example.com\",\n            \"sourcedId\": \"{{classSourcedId}}\",\n            \"type\": \"class\"\n        },\n        \"parentAssessmentLineItem\": {\n            \"href\": \"/classes/b2a85993-8b03-4560-8ab3-d39b56570823\",\n            \"sourcedId\": \"{{assessmentLineItemeSourcedId}}\",\n            \"type\": \"assessmentLineItem\"\n        },\n        \"scoreScale\": {\n            \"href\": \"https://example.com/scoreScale\",\n            \"sourcedId\": \"{{scoreScaleSourcedId}}\",\n            \"type\": \"scoreScale\"\n        },\n        \"resultValueMin\": 90,\n        \"resultValueMax\": 100,\n        \"learningObjectiveSet\": null\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}{{endpoint}}/assessmentLineItems/{{randomUUID}}",
													"host": [
														"{{URL}}{{endpoint}}"
													],
													"path": [
														"assessmentLineItems",
														"{{randomUUID}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "getAssessmentLineItem",
									"item": [
										{
											"name": "Validate successfull retrieval of Assessment Line Item which is exist",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Set headers dynamically from environment variables",
															"pm.request.headers.upsert({ key: \"Authorization\", value: pm.environment.get(\"Auth\") });",
															"pm.request.headers.upsert({ key: \"x-app-key\", value: pm.environment.get(\"x-app-key\") });",
															"pm.request.headers.upsert({ key: \"x-client-id\", value: pm.environment.get(\"x-client-id\") });",
															"",
															"// Generate a random UUID for sourcedId",
															"function generateUUID() {",
															"    let dt = new Date().getTime();",
															"    let uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {",
															"        let r = (dt + Math.random() * 16) % 16 | 0;",
															"        dt = Math.floor(dt / 16);",
															"        return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);",
															"    });",
															"    return uuid;",
															"}",
															"",
															"const headers = {",
															"    'Authorization': pm.environment.get(\"Auth\"),",
															"    'x-app-key': pm.environment.get(\"x-app-key\"),",
															"    'x-client-id': pm.environment.get(\"x-client-id\"),",
															"    'Content-Type': 'application/json'",
															"};",
															"",
															"// Generate and store courseSourcedId",
															"let courseSourcedId = generateUUID();",
															"pm.environment.set(\"courseSourcedId\", courseSourcedId);",
															"console.log(\"Generated courseSourcedId: \" + courseSourcedId);",
															"",
															"// Generate current UTC timestamp in ISO format: 2025-01-29T06:51:57Z",
															"function getCurrentISOString() {",
															"    return new Date().toISOString().split('.')[0] + \"Z\";",
															"}",
															"",
															"// Set dynamic date variables",
															"let isoDateTime = getCurrentISOString(); // full timestamp",
															"let isoDateOnly = isoDateTime.split('T')[0]; // date only",
															"",
															"pm.environment.set(\"isoDateTime\", isoDateTime);",
															"pm.environment.set(\"isoDateOnly\", isoDateOnly);",
															"",
															"console.log(\"Generated ISO DateTime: \" + isoDateTime);",
															"console.log(\"Generated ISO Date Only: \" + isoDateOnly);",
															"",
															"",
															"// Define Course API URL",
															"let courseUrl = pm.environment.get(\"URL\") + pm.environment.get(\"customPathPrefix\")+\"/courses\";",
															"",
															"// Define Course API Request Body",
															"let courseRequestBody = {",
															"    \"sourcedId\": pm.environment.get(\"courseSourcedId\"), //required",
															"    \"status\": \"active\", //required",
															"    \"title\": \"QA\", //required",
															"    \"courseCode\": \"courseCode\" //required",
															"",
															"}",
															"",
															"",
															"// Make the Course POST request",
															"pm.sendRequest({",
															"    url: courseUrl,",
															"    method: 'POST',",
															"    header: headers,",
															"    body: {",
															"        mode: 'raw',",
															"        raw: JSON.stringify(courseRequestBody)",
															"    }",
															"}, function (err, res) {",
															"    if (err) {",
															"        console.error(\"POST Course API Error: \", err);",
															"        pm.environment.unset(\"courseSourcedId\"); // Clear sourcedId on failure",
															"        throw new Error(\"Course POST API request failed.\");",
															"    }",
															"",
															"    if (res.code !== 201) {  // Ensure status is 201 Created",
															"        console.error(\"Unexpected POST Course API Response Code: \" + res.code);",
															"        pm.environment.unset(\"courseSourcedId\"); // Clear sourcedId on failure",
															"        throw new Error(\"Course POST API did not return 201 Created.\");",
															"    }",
															"",
															"    console.log(\"Course POST API succeeded with status: \" + res.code);",
															"",
															"    // Define getAllOrgs API URL",
															"    let getAllOrgsUrl = pm.environment.get(\"URL\") + pm.environment.get(\"rosterPathPrefix\")+\"/orgs\";",
															"",
															"    // Make getAllOrgs Request",
															"    pm.sendRequest({",
															"        url: getAllOrgsUrl,",
															"        method: 'GET',",
															"        header: headers",
															"    }, function (err, res) {",
															"        if (err || res.code !== 200) {",
															"            console.error(\"GET Orgs API Failed. Code:\", res?.code || \"No response\", \"Error:\", err);",
															"            throw new Error(\"GET Orgs API request failed.\");",
															"        }",
															"",
															"        console.log(\"GET Orgs API succeeded with status:\", res.code);",
															"",
															"        let response = res.json();",
															"        let schoolOrgs = response.orgs.filter(org => org.type === \"SCHOOL\");",
															"",
															"        if (schoolOrgs.length === 0) {",
															"            throw new Error(\"No orgs of type 'SCHOOL' found.\");",
															"        }",
															"",
															"        // Get a random school sourcedId",
															"        let randomIndex = Math.floor(Math.random() * schoolOrgs.length);",
															"        let schoolSourcedId = schoolOrgs[randomIndex].sourcedId;",
															"",
															"        console.log(\"Selected school sourcedId: \" + schoolSourcedId);",
															"",
															"        // Save to environment variable for later use",
															"        pm.environment.set(\"school_sourcedId\", schoolSourcedId);",
															"",
															"        // Define getAllterms API URL",
															"        let getAllTermsUrl = pm.environment.get(\"URL\") + pm.environment.get(\"rosterPathPrefix\")+\"/terms\";",
															"",
															"        // Make getAllterms Request",
															"        pm.sendRequest({",
															"            url: getAllTermsUrl,",
															"            method: 'GET',",
															"            header: headers",
															"        }, function (err, res) {",
															"            if (err || res.code !== 200) {",
															"                console.error(\"GET TERMS API Failed. Code:\", res?.code || \"No response\", \"Error:\", err);",
															"                throw new Error(\"GET TERMS API request failed.\");",
															"            }",
															"",
															"            console.log(\"GET TERMS API succeeded with status:\", res.code);",
															"",
															"            let response = res.json();",
															"            let termSessions = response.academicSessions.filter(session => session.type === \"TERM\");",
															"",
															"            if (termSessions.length === 0) {",
															"                throw new Error(\"No academicSessions of type 'TERM' found.\");",
															"            }",
															"",
															"            // Select a random term sourcedId",
															"            let randomIndex = Math.floor(Math.random() * termSessions.length);",
															"            let termSourcedId = termSessions[randomIndex].sourcedId;",
															"",
															"            console.log(\"Selected TERM sourcedId: \" + termSourcedId);",
															"",
															"            // Save to environment variable",
															"            pm.environment.set(\"term_sourcedId\", termSourcedId);",
															"",
															"            // Generate and store classSourcedId",
															"            let classSourcedId = generateUUID();",
															"            pm.environment.set(\"classSourcedId\", classSourcedId);",
															"            console.log(\"Generated classSourcedId: \" + classSourcedId);",
															"",
															"            // Define Class API URL",
															"            let classUrl = pm.environment.get(\"URL\") + pm.environment.get(\"customPathPrefix\")+\"/classes\";",
															"",
															"            // Define Class API Request Body",
															"            let classRequestBody = {",
															"                \"sourcedId\": pm.environment.get(\"classSourcedId\"), //Required",
															"                \"status\": \"active\", //Required",
															"                \"title\": \"title\", //Required",
															"                \"classType\": \"SCHEDULED\", //Required",
															"                \"course\": { //required",
															"                    \"href\": \"/courses/\" + pm.environment.get(\"courseSourcedId\"),",
															"                    \"sourcedId\": pm.environment.get(\"courseSourcedId\"),",
															"                    \"type\": \"course\"",
															"                },",
															"                \"school\": { //required",
															"                    \"href\": \"/org/\" + pm.environment.get(\"school_sourcedId\"),",
															"                    \"sourcedId\": pm.environment.get(\"school_sourcedId\"),",
															"                    \"type\": \"org\"",
															"                },",
															"                \"terms\": [ //required",
															"                    {",
															"                        \"href\": \"/academicSession/\" + pm.environment.get(\"term_sourcedId\"),",
															"                        \"sourcedId\":pm.environment.get(\"term_sourcedId\"),",
															"                        \"type\": \"academicSession\"",
															"                    }",
															"                ]",
															"            }",
															"",
															"            // Make the Class POST request",
															"            pm.sendRequest({",
															"                url: classUrl,",
															"                method: 'POST',",
															"                header: headers,",
															"                body: {",
															"                    mode: 'raw',",
															"                    raw: JSON.stringify(classRequestBody)",
															"                }",
															"            }, function (err, res) {",
															"                if (err) {",
															"                    console.error(\"POST Class API Error: \", err);",
															"                    pm.environment.unset(\"classSourcedId\"); // Clear sourcedId on failure",
															"                    throw new Error(\"Class POST API request failed.\");",
															"                }",
															"",
															"                if (res.code !== 201) {  // Ensure status is 201 Created",
															"                    console.error(\"Unexpected POST Class API Response Code: \" + res.code);",
															"                    pm.environment.unset(\"classSourcedId\"); // Clear sourcedId on failure",
															"                    throw new Error(\"POST Class API did not return 201 Created.\");",
															"                }",
															"",
															"                console.log(\"POST Class API succeeded with status: \" + res.code);",
															"",
															"                // --- Subsequent Requests (ScoreScale, AssessmentLineItem) ---",
															"                // Place the pm.sendRequest calls for ScoreScale and AssessmentLineItem here,",
															"                // ensuring they run only after the Class POST request is successful.",
															"",
															"                // Generate and store sourcedId for ScoreScale",
															"                let scoreScaleSourcedId = generateUUID();",
															"                pm.environment.set(\"scoreScaleSourcedId\", scoreScaleSourcedId);",
															"                console.log(\"Generated scoreScaleSourcedId: \" + scoreScaleSourcedId);",
															"",
															"                // Define ScoreScale API URL",
															"                let scoreScaleUrl = pm.environment.get(\"URL\") + pm.environment.get(\"pathPrefix\")+\"/scoreScales/\"+ scoreScaleSourcedId;",
															"",
															"                // Define ScoreScale API Request Body",
															"                let scoreScaleRequestBody = {",
															"                    \"scoreScale\": {",
															"                        \"sourcedId\":pm.environment.get(\"scoreScaleSourcedId\"), //required",
															"                        \"status\": \"active\", //required",
															"                        \"dateLastModified\": isoDateTime, //required",
															"                        \"metadata\": {",
															"                            \"test\": \"metadata\"",
															"                        },",
															"                        \"title\": \"QATestProd\", //required",
															"                        \"type\": \"QATestProd\", //required",
															"                        \"course\": {",
															"                            \"href\": \"/course/\" + pm.environment.get(\"courseSourcedId\"),",
															"                            \"sourcedId\": pm.environment.get(\"courseSourcedId\"),",
															"                            \"type\": \"course\"",
															"                        },",
															"                        \"class\": {  //required",
															"                            \"href\": \"/classes/\" + pm.environment.get(\"classSourcedId\"),",
															"                            \"sourcedId\": pm.environment.get(\"classSourcedId\"),",
															"                            \"type\": \"class\"",
															"                        },",
															"                        \"scoreScaleValue\": [ //required",
															"                            {",
															"                                \"itemValueLHS\": \"0-57\",",
															"                                \"itemValueRHS\": \"F\"",
															"                            },",
															"                            {",
															"                                \"itemValueLHS\": \"60-69\",",
															"                                \"itemValueRHS\": \"D\"",
															"                            },",
															"                            {",
															"                                \"itemValueLHS\": \"70-79\",",
															"                                \"itemValueRHS\": \"C\"",
															"                            },",
															"                            {",
															"                                \"itemValueLHS\": \"80-89\",",
															"                                \"itemValueRHS\": \"B\"",
															"                            },",
															"                            {",
															"                                \"itemValueLHS\": \"90-100\",",
															"                                \"itemValueRHS\": \"A\"",
															"                            }",
															"                        ]",
															"                    }",
															"                }",
															"",
															"                // Make the PUT ScoreScale request",
															"                pm.sendRequest({",
															"                    url: scoreScaleUrl,",
															"                    method: 'PUT',",
															"                    header: headers,",
															"                    body: {",
															"                        mode: 'raw',",
															"                        raw: JSON.stringify(scoreScaleRequestBody)",
															"                    }",
															"                }, function (err, res) {",
															"                    if (err) {",
															"                        console.error(\"PUT ScoreScale API Error: \", err);",
															"                        pm.environment.unset(\"scoreScaleSourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT ScoreScale API request failed.\");",
															"                    }",
															"",
															"                    if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
															"                        console.error(\"Unexpected PUT ScoreScale API Response Code: \" + res.code);",
															"                        pm.environment.unset(\"scoreScaleSourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT ScoreScale API did not return 200 or 201.\");",
															"                    }",
															"",
															"                    console.log(\"PUT ScoreScale API succeeded with status: \" + res.code);",
															"",
															"                    // Generate and store sourcedId for AssessmentLineItem",
															"                    let assessmentLineItemeSourcedId = generateUUID();",
															"                    pm.environment.set(\"assessmentLineItemeSourcedId\", assessmentLineItemeSourcedId);",
															"                    console.log(\"Generated assessmentLineItemeSourcedId: \" + assessmentLineItemeSourcedId);",
															"",
															"                    // Define putAssessmentLineItems API URL",
															"                    let assessmentLineItemsUrl = pm.environment.get(\"URL\") + pm.environment.get(\"pathPrefix\")+\"/assessmentLineItems/\"+ assessmentLineItemeSourcedId;",
															"",
															"                    // Define putAssessmentLineItems API Request Body",
															"                    let assessmentLineItemRequestBody = {",
															"                        \"assessmentLineItem\": {",
															"                            \"sourcedId\": pm.environment.get(\"assessmentLineItemeSourcedId\"),",
															"                            \"status\": \"active\",",
															"                            \"dateLastModified\": isoDateTime, // Use the dynamically generated timestamp",
															"                            \"title\": \"Good Effort\"",
															"                        }",
															"                    }",
															"",
															"                    // Make the PUT AssessmentLineItems request",
															"                    pm.sendRequest({",
															"                        url: assessmentLineItemsUrl,",
															"                        method: 'PUT',",
															"                        header: headers,",
															"                        body: {",
															"                            mode: 'raw',",
															"                            raw: JSON.stringify(assessmentLineItemRequestBody)",
															"                        }",
															"                    }, function (err, res) {",
															"                        if (err) {",
															"                            console.error(\"PUT AssessmentLineItems API Error: \", err);",
															"                            pm.environment.unset(\"assessmentLineItemeSourcedId\"); // Clear sourcedId on failure",
															"                            throw new Error(\"PUT AssessmentLineItems API request failed.\");",
															"                        }",
															"",
															"                        if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
															"                            console.error(\"Unexpected PUT AssessmentLineItems API Response Code: \" + res.code);",
															"                            pm.environment.unset(\"assessmentLineItemeSourcedId\"); // Clear sourcedId on failure",
															"                            throw new Error(\"PUT AssessmentLineItems API did not return 200 or 201.\");",
															"                        }",
															"",
															"                        console.log(\"PUT AssessmentLineItems API succeeded with status: \" + res.code);",
															"",
															"",
															"                        ",
															"",
															"                        let uuid = generateUUID();",
															"                        pm.environment.set(\"sourcedId\", uuid);",
															"",
															"                         // Define putAssessmentLineItem API URL",
															"                        let Url = pm.environment.get(\"URL\") + pm.environment.get(\"pathPrefix\")+\"/assessmentLineItems/\"+ pm.environment.get(\"sourcedId\");",
															"",
															"                        // Define putAssessmentLineItems API Request Body",
															"                    let putAssessmentLineItemRequestBody = {",
															"    \"assessmentLineItem\": {",
															"        \"sourcedId\": pm.environment.get(\"sourcedId\"),",
															"        \"status\": \"active\",",
															"        \"dateLastModified\": isoDateTime,",
															"        \"metadata\": {",
															"            \"extensions\": {",
															"                \"fields\": {",
															"                    \"type\": \"PLACEMENT_TEST\",",
															"                    \"adaptive\": true,",
															"                    \"storageName\": \"storageName\",",
															"                    \"subject\": \"subject\",",
															"                    \"creator\": [],",
															"                    \"mediaType\": \"mediaType\",",
															"                    \"keywords\": null,",
															"                    \"datePublished\": null,",
															"                    \"dateToActivate\": null,",
															"                    \"dateToShow\": null,",
															"                    \"dateToStartOn\": null,",
															"                    \"maxAttempts\": null,",
															"                    \"maxSubmits\": null,",
															"                    \"version\": null,",
															"                    \"dueDate\": null,",
															"                    \"assignDate\": null,",
															"                    \"schoolId\": null,",
															"                    \"academicSessionId\": null,",
															"                    \"categoryId\": null,",
															"                    \"applicationId\": null,",
															"                    \"competencyId\": null",
															"                }",
															"            }",
															"        },",
															"        \"title\": \"AssessmentLineItem\",",
															"        \"description\": \"This is QA POSTMAN API Automation generated \",",
															"        \"class\": {",
															"            \"href\": \"https://example.com\",",
															"            \"sourcedId\": pm.environment.get(\"classSourcedId\"),",
															"            \"type\": \"class\"",
															"        },",
															"        \"parentAssessmentLineItem\": {",
															"            \"href\": \"/classes/b2a85993-8b03-4560-8ab3-d39b56570823\",",
															"            \"sourcedId\": pm.environment.get(\"assessmentLineItemeSourcedId\"), ",
															"            \"type\": \"assessmentLineItem\"",
															"        },",
															"        \"scoreScale\": {",
															"            \"href\": \"https://example.com/scoreScale\",",
															"            \"sourcedId\": pm.environment.get(\"scoreScaleSourcedId\"),",
															"            \"type\": \"scoreScale\"",
															"        },",
															"        \"resultValueMin\": 90,",
															"        \"resultValueMax\": 100,",
															"        \"learningObjectiveSet\": null",
															"    }",
															"}",
															"        let putAssessmentLineitemRequestBody = putAssessmentLineItemRequestBody.assessmentLineItem;",
															"",
															"        pm.environment.set(\"putAssessmentLineitemRequestBody\", JSON.stringify(putAssessmentLineitemRequestBody)); ",
															"",
															"                    // Make the PUT AssessmentLineItems request",
															"                    pm.sendRequest({",
															"                        url: Url,",
															"                        method: 'PUT',",
															"                        header: headers,",
															"                        body: {",
															"                            mode: 'raw',",
															"                            raw: JSON.stringify(putAssessmentLineItemRequestBody)",
															"                        }",
															"                        ",
															"                    }, function (err, res) {",
															"                        if (err) {",
															"                            console.error(\"PUT AssessmentLineItems API Error: \", err);",
															"                            pm.environment.unset(\"assessmentLineItemeSourcedId\"); // Clear sourcedId on failure",
															"                            throw new Error(\"PUT AssessmentLineItems API request failed.\");",
															"                        }",
															"",
															"                        if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
															"                            console.error(\"Unexpected PUT AssessmentLineItems API Response Code: \" + res.code);",
															"                            pm.environment.unset(\"assessmentLineItemeSourcedId\"); // Clear sourcedId on failure",
															"                            throw new Error(\"PUT AssessmentLineItems API did not return 200 or 201.\");",
															"                        }",
															"",
															"                        console.log(\"PUT AssessmentLineItems API succeeded with status: \" + res.code);",
															"",
															"",
															"                    });",
															"                    });   ",
															"                });",
															"            });",
															"        });",
															"    });",
															"});",
															"",
															"",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Parse response JSON",
															"let response = pm.response.json();",
															"let expectedData = JSON.parse(pm.environment.get(\"putAssessmentLineitemRequestBody\"));",
															"",
															"// 1. Validate the response status is success",
															"pm.test(\"Response should have success status\", function () {",
															"    pm.expect(response.imsx_codeMajor).to.eql(\"success\");",
															"});",
															"",
															"// 2. Validate the Status code",
															"pm.test(\"Validate Status Code, It should be 200 OK\", function () {",
															"    pm.expect([200]).to.include(pm.response.code, \"Unexpected status code\");",
															"});",
															"",
															"// 3. Validate Json Response Structure and Types",
															"pm.test(\"Validate JSON Response Structure and Types\", () => {",
															"    // Check for the top-level keys",
															"    pm.expect(response).to.have.keys(\"imsx_codeMajor\", \"imsx_severity\", \"assessmentLineItem\");",
															"",
															"    // Validate imsx_codeMajor and imsx_severity types and values",
															"    pm.expect(response.imsx_codeMajor).to.be.a(\"string\").to.eql(\"success\");",
															"    pm.expect(response.imsx_severity).to.be.a(\"string\").to.eql(\"status\");",
															"",
															"    // Validate assessmentLineItem structure",
															"    const assessmentLineItemResponse = response.assessmentLineItem;",
															"    pm.expect(assessmentLineItemResponse).to.be.an(\"object\").to.have.keys(",
															"        \"sourcedId\", \"status\", \"dateLastModified\", \"metadata\", \"title\",",
															"        \"description\", \"class\", \"parentAssessmentLineItem\", \"scoreScale\",",
															"        \"resultValueMin\", \"resultValueMax\", \"learningObjectiveSet\"",
															"    );",
															"",
															"    // Validate assessmentLineItem field types",
															"    pm.expect(assessmentLineItemResponse.sourcedId).to.be.a(\"string\");",
															"    pm.expect(assessmentLineItemResponse.status).to.be.a(\"string\");",
															"    pm.expect(assessmentLineItemResponse.dateLastModified).to.be.a(\"string\");",
															"    pm.expect(assessmentLineItemResponse.metadata).to.be.an(\"object\");",
															"    pm.expect(assessmentLineItemResponse.title).to.be.a(\"string\");",
															"    pm.expect(assessmentLineItemResponse.description).to.be.a(\"string\");",
															"    pm.expect(assessmentLineItemResponse.class).to.be.an(\"object\");",
															"    pm.expect(assessmentLineItemResponse.parentAssessmentLineItem).to.be.an(\"object\");",
															"    pm.expect(assessmentLineItemResponse.scoreScale).to.be.an(\"object\");",
															"    pm.expect(assessmentLineItemResponse.resultValueMin).to.satisfy(value => value === null || typeof value === 'number');",
															"    pm.expect(assessmentLineItemResponse.resultValueMax).to.satisfy(value => value === null || typeof value === 'number');",
															"    pm.expect(assessmentLineItemResponse.learningObjectiveSet).to.be.a(\"null\");",
															"});",
															"",
															"// 4. Validate the format of dateLastModified",
															"pm.test(\"Verify dateLastModified is in ISO 8601 format\", () => {",
															"    const response = pm.response.json();",
															"    const dateLastModified = response.assessmentLineItem.dateLastModified;",
															"    const iso8601Regex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?Z$/;",
															"    pm.expect(dateLastModified).to.match(iso8601Regex);",
															"});",
															"",
															"// 5. Dynamically Verify assessmentLineItem fields against requested values",
															"pm.test(\"Verify assessmentLineItem fields match requested values\", function () {",
															"    const assessmentLineItemResponse = response.assessmentLineItem;",
															"    const assessmentLineItemExpected = expectedData; // ExpectedData directly contains the assessmentLineItem object",
															"",
															"    for (const key in assessmentLineItemExpected) {",
															"        if (assessmentLineItemExpected.hasOwnProperty(key)) {",
															"            pm.expect(assessmentLineItemResponse[key]).to.eql(assessmentLineItemExpected[key], `Value mismatch for field: ${key}`);",
															"        }",
															"    }",
															"});",
															"",
															"// 6. Dynamically Verify nested fields in assessmentLineItem",
															"pm.test(\"Verify nested fields in assessmentLineItem match requested values\", function () {",
															"    const assessmentLineItemResponse = response.assessmentLineItem;",
															"    const assessmentLineItemExpected = expectedData;",
															"",
															"    const nestedFieldsToCheck = [",
															"        { path: \"class.sourcedId\", expected: assessmentLineItemExpected.class.sourcedId },",
															"        { path: \"parentAssessmentLineItem.sourcedId\", expected: assessmentLineItemExpected.parentAssessmentLineItem.sourcedId },",
															"        { path: \"scoreScale.sourcedId\", expected: assessmentLineItemExpected.scoreScale.sourcedId },",
															"        { path: \"resultValueMin\", expected: assessmentLineItemExpected.resultValueMin },",
															"        { path: \"resultValueMax\", expected: assessmentLineItemExpected.resultValueMax }",
															"    ];",
															"",
															"    nestedFieldsToCheck.forEach(field => {",
															"        const actualValue = field.path.split('.').reduce((obj, key) => obj && obj[key], assessmentLineItemResponse);",
															"        pm.expect(actualValue).to.eql(field.expected, `Value mismatch for nested field: ${field.path}`);",
															"    });",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}{{pathPrefix}}/assessmentLineItems/{{sourcedId}}",
													"host": [
														"{{URL}}{{pathPrefix}}"
													],
													"path": [
														"assessmentLineItems",
														"{{sourcedId}}"
													],
													"query": [
														{
															"key": "fields",
															"value": "title",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Validate API limit the response only for specified field",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Set headers dynamically from environment variables",
															"pm.request.headers.upsert({ key: \"Authorization\", value: pm.environment.get(\"Auth\") });",
															"pm.request.headers.upsert({ key: \"x-app-key\", value: pm.environment.get(\"x-app-key\") });",
															"pm.request.headers.upsert({ key: \"x-client-id\", value: pm.environment.get(\"x-client-id\") });",
															"",
															"// Generate a random UUID for sourcedId",
															"function generateUUID() {",
															"    let dt = new Date().getTime();",
															"    let uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {",
															"        let r = (dt + Math.random() * 16) % 16 | 0;",
															"        dt = Math.floor(dt / 16);",
															"        return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);",
															"    });",
															"    return uuid;",
															"}",
															"",
															"const headers = {",
															"    'Authorization': pm.environment.get(\"Auth\"),",
															"    'x-app-key': pm.environment.get(\"x-app-key\"),",
															"    'x-client-id': pm.environment.get(\"x-client-id\"),",
															"    'Content-Type': 'application/json'",
															"};",
															"",
															"// Generate and store courseSourcedId",
															"let courseSourcedId = generateUUID();",
															"pm.environment.set(\"courseSourcedId\", courseSourcedId);",
															"console.log(\"Generated courseSourcedId: \" + courseSourcedId);",
															"",
															"// Generate current UTC timestamp in ISO format: 2025-01-29T06:51:57Z",
															"function getCurrentISOString() {",
															"    return new Date().toISOString().split('.')[0] + \"Z\";",
															"}",
															"",
															"// Set dynamic date variables",
															"let isoDateTime = getCurrentISOString(); // full timestamp",
															"let isoDateOnly = isoDateTime.split('T')[0]; // date only",
															"",
															"pm.environment.set(\"isoDateTime\", isoDateTime);",
															"pm.environment.set(\"isoDateOnly\", isoDateOnly);",
															"",
															"console.log(\"Generated ISO DateTime: \" + isoDateTime);",
															"console.log(\"Generated ISO Date Only: \" + isoDateOnly);",
															"",
															"",
															"// Define Course API URL",
															"let courseUrl = pm.environment.get(\"URL\") + pm.environment.get(\"customPathPrefix\")+\"/courses\";",
															"",
															"// Define Course API Request Body",
															"let courseRequestBody = {",
															"    \"sourcedId\": pm.environment.get(\"courseSourcedId\"), //required",
															"    \"status\": \"active\", //required",
															"    \"title\": \"QA\", //required",
															"    \"courseCode\": \"courseCode\" //required",
															"",
															"}",
															"",
															"",
															"// Make the Course POST request",
															"pm.sendRequest({",
															"    url: courseUrl,",
															"    method: 'POST',",
															"    header: headers,",
															"    body: {",
															"        mode: 'raw',",
															"        raw: JSON.stringify(courseRequestBody)",
															"    }",
															"}, function (err, res) {",
															"    if (err) {",
															"        console.error(\"POST Course API Error: \", err);",
															"        pm.environment.unset(\"courseSourcedId\"); // Clear sourcedId on failure",
															"        throw new Error(\"Course POST API request failed.\");",
															"    }",
															"",
															"    if (res.code !== 201) {  // Ensure status is 201 Created",
															"        console.error(\"Unexpected POST Course API Response Code: \" + res.code);",
															"        pm.environment.unset(\"courseSourcedId\"); // Clear sourcedId on failure",
															"        throw new Error(\"Course POST API did not return 201 Created.\");",
															"    }",
															"",
															"    console.log(\"Course POST API succeeded with status: \" + res.code);",
															"",
															"    // Define getAllOrgs API URL",
															"    let getAllOrgsUrl = pm.environment.get(\"URL\") + pm.environment.get(\"rosterPathPrefix\")+\"/orgs\";",
															"",
															"    // Make getAllOrgs Request",
															"    pm.sendRequest({",
															"        url: getAllOrgsUrl,",
															"        method: 'GET',",
															"        header: headers",
															"    }, function (err, res) {",
															"        if (err || res.code !== 200) {",
															"            console.error(\"GET Orgs API Failed. Code:\", res?.code || \"No response\", \"Error:\", err);",
															"            throw new Error(\"GET Orgs API request failed.\");",
															"        }",
															"",
															"        console.log(\"GET Orgs API succeeded with status:\", res.code);",
															"",
															"        let response = res.json();",
															"        let schoolOrgs = response.orgs.filter(org => org.type === \"SCHOOL\");",
															"",
															"        if (schoolOrgs.length === 0) {",
															"            throw new Error(\"No orgs of type 'SCHOOL' found.\");",
															"        }",
															"",
															"        // Get a random school sourcedId",
															"        let randomIndex = Math.floor(Math.random() * schoolOrgs.length);",
															"        let schoolSourcedId = schoolOrgs[randomIndex].sourcedId;",
															"",
															"        console.log(\"Selected school sourcedId: \" + schoolSourcedId);",
															"",
															"        // Save to environment variable for later use",
															"        pm.environment.set(\"school_sourcedId\", schoolSourcedId);",
															"",
															"        // Define getAllterms API URL",
															"        let getAllTermsUrl = pm.environment.get(\"URL\") + pm.environment.get(\"rosterPathPrefix\")+\"/terms\";",
															"",
															"        // Make getAllterms Request",
															"        pm.sendRequest({",
															"            url: getAllTermsUrl,",
															"            method: 'GET',",
															"            header: headers",
															"        }, function (err, res) {",
															"            if (err || res.code !== 200) {",
															"                console.error(\"GET TERMS API Failed. Code:\", res?.code || \"No response\", \"Error:\", err);",
															"                throw new Error(\"GET TERMS API request failed.\");",
															"            }",
															"",
															"            console.log(\"GET TERMS API succeeded with status:\", res.code);",
															"",
															"            let response = res.json();",
															"            let termSessions = response.academicSessions.filter(session => session.type === \"TERM\");",
															"",
															"            if (termSessions.length === 0) {",
															"                throw new Error(\"No academicSessions of type 'TERM' found.\");",
															"            }",
															"",
															"            // Select a random term sourcedId",
															"            let randomIndex = Math.floor(Math.random() * termSessions.length);",
															"            let termSourcedId = termSessions[randomIndex].sourcedId;",
															"",
															"            console.log(\"Selected TERM sourcedId: \" + termSourcedId);",
															"",
															"            // Save to environment variable",
															"            pm.environment.set(\"term_sourcedId\", termSourcedId);",
															"",
															"            // Generate and store classSourcedId",
															"            let classSourcedId = generateUUID();",
															"            pm.environment.set(\"classSourcedId\", classSourcedId);",
															"            console.log(\"Generated classSourcedId: \" + classSourcedId);",
															"",
															"            // Define Class API URL",
															"            let classUrl = pm.environment.get(\"URL\") + pm.environment.get(\"customPathPrefix\")+\"/classes\";",
															"",
															"            // Define Class API Request Body",
															"            let classRequestBody = {",
															"                \"sourcedId\": pm.environment.get(\"classSourcedId\"), //Required",
															"                \"status\": \"active\", //Required",
															"                \"title\": \"title\", //Required",
															"                \"classType\": \"SCHEDULED\", //Required",
															"                \"course\": { //required",
															"                    \"href\": \"/courses/\" + pm.environment.get(\"courseSourcedId\"),",
															"                    \"sourcedId\": pm.environment.get(\"courseSourcedId\"),",
															"                    \"type\": \"course\"",
															"                },",
															"                \"school\": { //required",
															"                    \"href\": \"/org/\" + pm.environment.get(\"school_sourcedId\"),",
															"                    \"sourcedId\": pm.environment.get(\"school_sourcedId\"),",
															"                    \"type\": \"org\"",
															"                },",
															"                \"terms\": [ //required",
															"                    {",
															"                        \"href\": \"/academicSession/\" + pm.environment.get(\"term_sourcedId\"),",
															"                        \"sourcedId\":pm.environment.get(\"term_sourcedId\"),",
															"                        \"type\": \"academicSession\"",
															"                    }",
															"                ]",
															"            }",
															"",
															"            // Make the Class POST request",
															"            pm.sendRequest({",
															"                url: classUrl,",
															"                method: 'POST',",
															"                header: headers,",
															"                body: {",
															"                    mode: 'raw',",
															"                    raw: JSON.stringify(classRequestBody)",
															"                }",
															"            }, function (err, res) {",
															"                if (err) {",
															"                    console.error(\"POST Class API Error: \", err);",
															"                    pm.environment.unset(\"classSourcedId\"); // Clear sourcedId on failure",
															"                    throw new Error(\"Class POST API request failed.\");",
															"                }",
															"",
															"                if (res.code !== 201) {  // Ensure status is 201 Created",
															"                    console.error(\"Unexpected POST Class API Response Code: \" + res.code);",
															"                    pm.environment.unset(\"classSourcedId\"); // Clear sourcedId on failure",
															"                    throw new Error(\"POST Class API did not return 201 Created.\");",
															"                }",
															"",
															"                console.log(\"POST Class API succeeded with status: \" + res.code);",
															"",
															"                // --- Subsequent Requests (ScoreScale, AssessmentLineItem) ---",
															"                // Place the pm.sendRequest calls for ScoreScale and AssessmentLineItem here,",
															"                // ensuring they run only after the Class POST request is successful.",
															"",
															"                // Generate and store sourcedId for ScoreScale",
															"                let scoreScaleSourcedId = generateUUID();",
															"                pm.environment.set(\"scoreScaleSourcedId\", scoreScaleSourcedId);",
															"                console.log(\"Generated scoreScaleSourcedId: \" + scoreScaleSourcedId);",
															"",
															"                // Define ScoreScale API URL",
															"                let scoreScaleUrl = pm.environment.get(\"URL\") + pm.environment.get(\"pathPrefix\")+\"/scoreScales/\"+ scoreScaleSourcedId;",
															"",
															"                // Define ScoreScale API Request Body",
															"                let scoreScaleRequestBody = {",
															"                    \"scoreScale\": {",
															"                        \"sourcedId\":pm.environment.get(\"scoreScaleSourcedId\"), //required",
															"                        \"status\": \"active\", //required",
															"                        \"dateLastModified\": isoDateTime, //required",
															"                        \"metadata\": {",
															"                            \"test\": \"metadata\"",
															"                        },",
															"                        \"title\": \"QATestProd\", //required",
															"                        \"type\": \"QATestProd\", //required",
															"                        \"course\": {",
															"                            \"href\": \"/course/\" + pm.environment.get(\"courseSourcedId\"),",
															"                            \"sourcedId\": pm.environment.get(\"courseSourcedId\"),",
															"                            \"type\": \"course\"",
															"                        },",
															"                        \"class\": {  //required",
															"                            \"href\": \"/classes/\" + pm.environment.get(\"classSourcedId\"),",
															"                            \"sourcedId\": pm.environment.get(\"classSourcedId\"),",
															"                            \"type\": \"class\"",
															"                        },",
															"                        \"scoreScaleValue\": [ //required",
															"                            {",
															"                                \"itemValueLHS\": \"0-57\",",
															"                                \"itemValueRHS\": \"F\"",
															"                            },",
															"                            {",
															"                                \"itemValueLHS\": \"60-69\",",
															"                                \"itemValueRHS\": \"D\"",
															"                            },",
															"                            {",
															"                                \"itemValueLHS\": \"70-79\",",
															"                                \"itemValueRHS\": \"C\"",
															"                            },",
															"                            {",
															"                                \"itemValueLHS\": \"80-89\",",
															"                                \"itemValueRHS\": \"B\"",
															"                            },",
															"                            {",
															"                                \"itemValueLHS\": \"90-100\",",
															"                                \"itemValueRHS\": \"A\"",
															"                            }",
															"                        ]",
															"                    }",
															"                }",
															"",
															"                // Make the PUT ScoreScale request",
															"                pm.sendRequest({",
															"                    url: scoreScaleUrl,",
															"                    method: 'PUT',",
															"                    header: headers,",
															"                    body: {",
															"                        mode: 'raw',",
															"                        raw: JSON.stringify(scoreScaleRequestBody)",
															"                    }",
															"                }, function (err, res) {",
															"                    if (err) {",
															"                        console.error(\"PUT ScoreScale API Error: \", err);",
															"                        pm.environment.unset(\"scoreScaleSourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT ScoreScale API request failed.\");",
															"                    }",
															"",
															"                    if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
															"                        console.error(\"Unexpected PUT ScoreScale API Response Code: \" + res.code);",
															"                        pm.environment.unset(\"scoreScaleSourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT ScoreScale API did not return 200 or 201.\");",
															"                    }",
															"",
															"                    console.log(\"PUT ScoreScale API succeeded with status: \" + res.code);",
															"",
															"                    // Generate and store sourcedId for AssessmentLineItem",
															"                    let assessmentLineItemeSourcedId = generateUUID();",
															"                    pm.environment.set(\"assessmentLineItemeSourcedId\", assessmentLineItemeSourcedId);",
															"                    console.log(\"Generated assessmentLineItemeSourcedId: \" + assessmentLineItemeSourcedId);",
															"",
															"                    // Define putAssessmentLineItems API URL",
															"                    let assessmentLineItemsUrl = pm.environment.get(\"URL\") + pm.environment.get(\"pathPrefix\")+\"/assessmentLineItems/\"+ assessmentLineItemeSourcedId;",
															"",
															"                    // Define putAssessmentLineItems API Request Body",
															"                    let assessmentLineItemRequestBody = {",
															"                        \"assessmentLineItem\": {",
															"                            \"sourcedId\": pm.environment.get(\"assessmentLineItemeSourcedId\"),",
															"                            \"status\": \"active\",",
															"                            \"dateLastModified\": isoDateTime, // Use the dynamically generated timestamp",
															"                            \"title\": \"Good Effort\"",
															"                        }",
															"                    }",
															"",
															"                    // Make the PUT AssessmentLineItems request",
															"                    pm.sendRequest({",
															"                        url: assessmentLineItemsUrl,",
															"                        method: 'PUT',",
															"                        header: headers,",
															"                        body: {",
															"                            mode: 'raw',",
															"                            raw: JSON.stringify(assessmentLineItemRequestBody)",
															"                        }",
															"                    }, function (err, res) {",
															"                        if (err) {",
															"                            console.error(\"PUT AssessmentLineItems API Error: \", err);",
															"                            pm.environment.unset(\"assessmentLineItemeSourcedId\"); // Clear sourcedId on failure",
															"                            throw new Error(\"PUT AssessmentLineItems API request failed.\");",
															"                        }",
															"",
															"                        if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
															"                            console.error(\"Unexpected PUT AssessmentLineItems API Response Code: \" + res.code);",
															"                            pm.environment.unset(\"assessmentLineItemeSourcedId\"); // Clear sourcedId on failure",
															"                            throw new Error(\"PUT AssessmentLineItems API did not return 200 or 201.\");",
															"                        }",
															"",
															"                        console.log(\"PUT AssessmentLineItems API succeeded with status: \" + res.code);",
															"",
															"",
															"                        ",
															"",
															"                        let uuid = generateUUID();",
															"                        pm.environment.set(\"sourcedId\", uuid);",
															"",
															"                         // Define putAssessmentLineItem API URL",
															"                        let Url = pm.environment.get(\"URL\") + pm.environment.get(\"pathPrefix\")+\"/assessmentLineItems/\"+ pm.environment.get(\"sourcedId\");",
															"",
															"                        // Define putAssessmentLineItems API Request Body",
															"                    let putAssessmentLineItemRequestBody = {",
															"    \"assessmentLineItem\": {",
															"        \"sourcedId\": pm.environment.get(\"sourcedId\"),",
															"        \"status\": \"active\",",
															"        \"dateLastModified\": isoDateTime,",
															"        \"metadata\": {",
															"            \"extensions\": {",
															"                \"fields\": {",
															"                    \"type\": \"PLACEMENT_TEST\",",
															"                    \"adaptive\": true,",
															"                    \"storageName\": \"storageName\",",
															"                    \"subject\": \"subject\",",
															"                    \"creator\": [],",
															"                    \"mediaType\": \"mediaType\",",
															"                    \"keywords\": null,",
															"                    \"datePublished\": null,",
															"                    \"dateToActivate\": null,",
															"                    \"dateToShow\": null,",
															"                    \"dateToStartOn\": null,",
															"                    \"maxAttempts\": null,",
															"                    \"maxSubmits\": null,",
															"                    \"version\": null,",
															"                    \"dueDate\": null,",
															"                    \"assignDate\": null,",
															"                    \"schoolId\": null,",
															"                    \"academicSessionId\": null,",
															"                    \"categoryId\": null,",
															"                    \"applicationId\": null,",
															"                    \"competencyId\": null",
															"                }",
															"            }",
															"        },",
															"        \"title\": \"AssessmentLineItem\",",
															"        \"description\": \"This is QA POSTMAN API Automation generated \",",
															"        \"class\": {",
															"            \"href\": \"https://example.com\",",
															"            \"sourcedId\": pm.environment.get(\"classSourcedId\"),",
															"            \"type\": \"class\"",
															"        },",
															"        \"parentAssessmentLineItem\": {",
															"            \"href\": \"/classes/b2a85993-8b03-4560-8ab3-d39b56570823\",",
															"            \"sourcedId\": pm.environment.get(\"assessmentLineItemeSourcedId\"), ",
															"            \"type\": \"assessmentLineItem\"",
															"        },",
															"        \"scoreScale\": {",
															"            \"href\": \"https://example.com/scoreScale\",",
															"            \"sourcedId\": pm.environment.get(\"scoreScaleSourcedId\"),",
															"            \"type\": \"scoreScale\"",
															"        },",
															"        \"resultValueMin\": 90,",
															"        \"resultValueMax\": 100,",
															"        \"learningObjectiveSet\": null",
															"    }",
															"}",
															"        let putAssessmentLineitemRequestBody = putAssessmentLineItemRequestBody.assessmentLineItem;",
															"",
															"        pm.environment.set(\"putAssessmentLineitemRequestBody\", JSON.stringify(putAssessmentLineitemRequestBody)); ",
															"",
															"",
															"        // Extract keys from assessmentLineItem",
															"                let allFields = Object.keys(putAssessmentLineItemRequestBody.assessmentLineItem);",
															"",
															"                // Shuffle and pick 3 random fields",
															"                function getRandomFields(fields, count) {",
															"                    let shuffled = fields.sort(() => 0.5 - Math.random());",
															"                    return shuffled.slice(0, count);",
															"                }",
															"",
															"                let selectedFields = getRandomFields(allFields, 3);",
															"                let fieldsParam = selectedFields.join(\",\");",
															"                console.log(\"Randomly selected query fields: \" + fieldsParam);",
															"",
															"",
															"                // Save to environment variable",
															"                pm.environment.set(\"randomFields\", fieldsParam);",
															"                console.log(\"Query param 'fields':\", fieldsParam);",
															"",
															"",
															"",
															"                    // Make the PUT AssessmentLineItems request",
															"                    pm.sendRequest({",
															"                        url: Url,",
															"                        method: 'PUT',",
															"                        header: headers,",
															"                        body: {",
															"                            mode: 'raw',",
															"                            raw: JSON.stringify(putAssessmentLineItemRequestBody)",
															"                        }",
															"                        ",
															"                    }, function (err, res) {",
															"                        if (err) {",
															"                            console.error(\"PUT AssessmentLineItems API Error: \", err);",
															"                            pm.environment.unset(\"assessmentLineItemeSourcedId\"); // Clear sourcedId on failure",
															"                            throw new Error(\"PUT AssessmentLineItems API request failed.\");",
															"                        }",
															"",
															"                        if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
															"                            console.error(\"Unexpected PUT AssessmentLineItems API Response Code: \" + res.code);",
															"                            pm.environment.unset(\"assessmentLineItemeSourcedId\"); // Clear sourcedId on failure",
															"                            throw new Error(\"PUT AssessmentLineItems API did not return 200 or 201.\");",
															"                        }",
															"",
															"                        console.log(\"PUT AssessmentLineItems API succeeded with status: \" + res.code);",
															"",
															"",
															"                    });",
															"                    });   ",
															"                });",
															"            });",
															"        });",
															"    });",
															"});",
															"",
															"",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Parse response JSON",
															"let response = pm.response.json();",
															"",
															"",
															"// 1. Validate the response status is success",
															"pm.test(\"Response should have success status\", function () {",
															"    pm.expect(response.imsx_codeMajor).to.eql(\"success\");",
															"});",
															"",
															"// 2. Validate the Status code",
															"pm.test(\"Validate Status Code, It should be 200 OK\", function () {",
															"    pm.expect([200]).to.include(pm.response.code, \"Unexpected status code\");",
															"});",
															"",
															"",
															"// 3. Validate response fields match the query fields",
															"pm.test(\"Validate response fields match the query fields\", function () {",
															"    console.log(\"Full response body:\", response);",
															"",
															"    const selectedFields = pm.environment.get(\"randomFields\").split(\",\");",
															"    console.log(\"Selected fields from query param:\", selectedFields);",
															"",
															"    const result = response.assessmentLineItem;",
															"    if (!result) {",
															"        throw new Error(\"Missing 'assessmentLineItem' in response\");",
															"    }",
															"",
															"    const responseFields = Object.keys(result);",
															"    console.log(\"Top-level fields in response.assessmentLineItem:\", responseFields);",
															"",
															"    // Ensure each selected field exists in the response",
															"    selectedFields.forEach(field => {",
															"        pm.expect(result, `'${field}' is missing in response`).to.have.property(field);",
															"    });",
															"",
															"    // Optional strict check: Fail if there are extra fields",
															"    const extraFields = responseFields.filter(f => !selectedFields.includes(f));",
															"    if (extraFields.length > 0) {",
															"        console.warn(\"Extra fields in response:\", extraFields);",
															"    }",
															"",
															"    pm.expect(extraFields.length, \"Unexpected fields in response\").to.eql(0);",
															"});",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}{{pathPrefix}}/assessmentLineItems/{{sourcedId}}?fields={{randomFields}}",
													"host": [
														"{{URL}}{{pathPrefix}}"
													],
													"path": [
														"assessmentLineItems",
														"{{sourcedId}}"
													],
													"query": [
														{
															"key": "fields",
															"value": "{{randomFields}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Validate successfull retrieval of Assessment Line Item which is deleted",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Set headers dynamically from environment variables",
															"pm.request.headers.upsert({ key: \"Authorization\", value: pm.environment.get(\"Auth\") });",
															"pm.request.headers.upsert({ key: \"x-app-key\", value: pm.environment.get(\"x-app-key\") });",
															"pm.request.headers.upsert({ key: \"x-client-id\", value: pm.environment.get(\"x-client-id\") });",
															"",
															"// Generate a random UUID for sourcedId",
															"function generateUUID() {",
															"    let dt = new Date().getTime();",
															"    let uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {",
															"        let r = (dt + Math.random() * 16) % 16 | 0;",
															"        dt = Math.floor(dt / 16);",
															"        return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);",
															"    });",
															"    return uuid;",
															"}",
															"",
															"const headers = {",
															"    'Authorization': pm.environment.get(\"Auth\"),",
															"    'x-app-key': pm.environment.get(\"x-app-key\"),",
															"    'x-client-id': pm.environment.get(\"x-client-id\"),",
															"    'Content-Type': 'application/json'",
															"};",
															"",
															"// Generate and store courseSourcedId",
															"let courseSourcedId = generateUUID();",
															"pm.environment.set(\"courseSourcedId\", courseSourcedId);",
															"console.log(\"Generated courseSourcedId: \" + courseSourcedId);",
															"",
															"// Generate current UTC timestamp in ISO format: 2025-01-29T06:51:57Z",
															"function getCurrentISOString() {",
															"    return new Date().toISOString().split('.')[0] + \"Z\";",
															"}",
															"",
															"// Set dynamic date variables",
															"let isoDateTime = getCurrentISOString(); // full timestamp",
															"let isoDateOnly = isoDateTime.split('T')[0]; // date only",
															"",
															"pm.environment.set(\"isoDateTime\", isoDateTime);",
															"pm.environment.set(\"isoDateOnly\", isoDateOnly);",
															"",
															"console.log(\"Generated ISO DateTime: \" + isoDateTime);",
															"console.log(\"Generated ISO Date Only: \" + isoDateOnly);",
															"",
															"",
															"// Define Course API URL",
															"let courseUrl = pm.environment.get(\"URL\") + pm.environment.get(\"customPathPrefix\")+\"/courses\";",
															"",
															"// Define Course API Request Body",
															"let courseRequestBody = {",
															"    \"sourcedId\": pm.environment.get(\"courseSourcedId\"), //required",
															"    \"status\": \"active\", //required",
															"    \"title\": \"QA\", //required",
															"    \"courseCode\": \"courseCode\" //required",
															"",
															"}",
															"",
															"",
															"// Make the Course POST request",
															"pm.sendRequest({",
															"    url: courseUrl,",
															"    method: 'POST',",
															"    header: headers,",
															"    body: {",
															"        mode: 'raw',",
															"        raw: JSON.stringify(courseRequestBody)",
															"    }",
															"}, function (err, res) {",
															"    if (err) {",
															"        console.error(\"POST Course API Error: \", err);",
															"        pm.environment.unset(\"courseSourcedId\"); // Clear sourcedId on failure",
															"        throw new Error(\"Course POST API request failed.\");",
															"    }",
															"",
															"    if (res.code !== 201) {  // Ensure status is 201 Created",
															"        console.error(\"Unexpected POST Course API Response Code: \" + res.code);",
															"        pm.environment.unset(\"courseSourcedId\"); // Clear sourcedId on failure",
															"        throw new Error(\"Course POST API did not return 201 Created.\");",
															"    }",
															"",
															"    console.log(\"Course POST API succeeded with status: \" + res.code);",
															"",
															"    // Define getAllOrgs API URL",
															"    let getAllOrgsUrl = pm.environment.get(\"URL\") + pm.environment.get(\"rosterPathPrefix\")+\"/orgs\";",
															"",
															"    // Make getAllOrgs Request",
															"    pm.sendRequest({",
															"        url: getAllOrgsUrl,",
															"        method: 'GET',",
															"        header: headers",
															"    }, function (err, res) {",
															"        if (err || res.code !== 200) {",
															"            console.error(\"GET Orgs API Failed. Code:\", res?.code || \"No response\", \"Error:\", err);",
															"            throw new Error(\"GET Orgs API request failed.\");",
															"        }",
															"",
															"        console.log(\"GET Orgs API succeeded with status:\", res.code);",
															"",
															"        let response = res.json();",
															"        let schoolOrgs = response.orgs.filter(org => org.type === \"SCHOOL\");",
															"",
															"        if (schoolOrgs.length === 0) {",
															"            throw new Error(\"No orgs of type 'SCHOOL' found.\");",
															"        }",
															"",
															"        // Get a random school sourcedId",
															"        let randomIndex = Math.floor(Math.random() * schoolOrgs.length);",
															"        let schoolSourcedId = schoolOrgs[randomIndex].sourcedId;",
															"",
															"        console.log(\"Selected school sourcedId: \" + schoolSourcedId);",
															"",
															"        // Save to environment variable for later use",
															"        pm.environment.set(\"school_sourcedId\", schoolSourcedId);",
															"",
															"        // Define getAllterms API URL",
															"        let getAllTermsUrl = pm.environment.get(\"URL\") + pm.environment.get(\"rosterPathPrefix\")+\"/terms\";",
															"",
															"        // Make getAllterms Request",
															"        pm.sendRequest({",
															"            url: getAllTermsUrl,",
															"            method: 'GET',",
															"            header: headers",
															"        }, function (err, res) {",
															"            if (err || res.code !== 200) {",
															"                console.error(\"GET TERMS API Failed. Code:\", res?.code || \"No response\", \"Error:\", err);",
															"                throw new Error(\"GET TERMS API request failed.\");",
															"            }",
															"",
															"            console.log(\"GET TERMS API succeeded with status:\", res.code);",
															"",
															"            let response = res.json();",
															"            let termSessions = response.academicSessions.filter(session => session.type === \"TERM\");",
															"",
															"            if (termSessions.length === 0) {",
															"                throw new Error(\"No academicSessions of type 'TERM' found.\");",
															"            }",
															"",
															"            // Select a random term sourcedId",
															"            let randomIndex = Math.floor(Math.random() * termSessions.length);",
															"            let termSourcedId = termSessions[randomIndex].sourcedId;",
															"",
															"            console.log(\"Selected TERM sourcedId: \" + termSourcedId);",
															"",
															"            // Save to environment variable",
															"            pm.environment.set(\"term_sourcedId\", termSourcedId);",
															"",
															"            // Generate and store classSourcedId",
															"            let classSourcedId = generateUUID();",
															"            pm.environment.set(\"classSourcedId\", classSourcedId);",
															"            console.log(\"Generated classSourcedId: \" + classSourcedId);",
															"",
															"            // Define Class API URL",
															"            let classUrl = pm.environment.get(\"URL\") + pm.environment.get(\"customPathPrefix\")+\"/classes\";",
															"",
															"            // Define Class API Request Body",
															"            let classRequestBody = {",
															"                \"sourcedId\": pm.environment.get(\"classSourcedId\"), //Required",
															"                \"status\": \"active\", //Required",
															"                \"title\": \"title\", //Required",
															"                \"classType\": \"SCHEDULED\", //Required",
															"                \"course\": { //required",
															"                    \"href\": \"/courses/\" + pm.environment.get(\"courseSourcedId\"),",
															"                    \"sourcedId\": pm.environment.get(\"courseSourcedId\"),",
															"                    \"type\": \"course\"",
															"                },",
															"                \"school\": { //required",
															"                    \"href\": \"/org/\" + pm.environment.get(\"school_sourcedId\"),",
															"                    \"sourcedId\": pm.environment.get(\"school_sourcedId\"),",
															"                    \"type\": \"org\"",
															"                },",
															"                \"terms\": [ //required",
															"                    {",
															"                        \"href\": \"/academicSession/\" + pm.environment.get(\"term_sourcedId\"),",
															"                        \"sourcedId\":pm.environment.get(\"term_sourcedId\"),",
															"                        \"type\": \"academicSession\"",
															"                    }",
															"                ]",
															"            }",
															"",
															"            // Make the Class POST request",
															"            pm.sendRequest({",
															"                url: classUrl,",
															"                method: 'POST',",
															"                header: headers,",
															"                body: {",
															"                    mode: 'raw',",
															"                    raw: JSON.stringify(classRequestBody)",
															"                }",
															"            }, function (err, res) {",
															"                if (err) {",
															"                    console.error(\"POST Class API Error: \", err);",
															"                    pm.environment.unset(\"classSourcedId\"); // Clear sourcedId on failure",
															"                    throw new Error(\"Class POST API request failed.\");",
															"                }",
															"",
															"                if (res.code !== 201) {  // Ensure status is 201 Created",
															"                    console.error(\"Unexpected POST Class API Response Code: \" + res.code);",
															"                    pm.environment.unset(\"classSourcedId\"); // Clear sourcedId on failure",
															"                    throw new Error(\"POST Class API did not return 201 Created.\");",
															"                }",
															"",
															"                console.log(\"POST Class API succeeded with status: \" + res.code);",
															"",
															"                // --- Subsequent Requests (ScoreScale, AssessmentLineItem) ---",
															"                // Place the pm.sendRequest calls for ScoreScale and AssessmentLineItem here,",
															"                // ensuring they run only after the Class POST request is successful.",
															"",
															"                // Generate and store sourcedId for ScoreScale",
															"                let scoreScaleSourcedId = generateUUID();",
															"                pm.environment.set(\"scoreScaleSourcedId\", scoreScaleSourcedId);",
															"                console.log(\"Generated scoreScaleSourcedId: \" + scoreScaleSourcedId);",
															"",
															"                // Define ScoreScale API URL",
															"                let scoreScaleUrl = pm.environment.get(\"URL\") + pm.environment.get(\"pathPrefix\")+\"/scoreScales/\"+ scoreScaleSourcedId;",
															"",
															"                // Define ScoreScale API Request Body",
															"                let scoreScaleRequestBody = {",
															"                    \"scoreScale\": {",
															"                        \"sourcedId\":pm.environment.get(\"scoreScaleSourcedId\"), //required",
															"                        \"status\": \"active\", //required",
															"                        \"dateLastModified\": isoDateTime, //required",
															"                        \"metadata\": {",
															"                            \"test\": \"metadata\"",
															"                        },",
															"                        \"title\": \"QATestProd\", //required",
															"                        \"type\": \"QATestProd\", //required",
															"                        \"course\": {",
															"                            \"href\": \"/course/\" + pm.environment.get(\"courseSourcedId\"),",
															"                            \"sourcedId\": pm.environment.get(\"courseSourcedId\"),",
															"                            \"type\": \"course\"",
															"                        },",
															"                        \"class\": {  //required",
															"                            \"href\": \"/classes/\" + pm.environment.get(\"classSourcedId\"),",
															"                            \"sourcedId\": pm.environment.get(\"classSourcedId\"),",
															"                            \"type\": \"class\"",
															"                        },",
															"                        \"scoreScaleValue\": [ //required",
															"                            {",
															"                                \"itemValueLHS\": \"0-57\",",
															"                                \"itemValueRHS\": \"F\"",
															"                            },",
															"                            {",
															"                                \"itemValueLHS\": \"60-69\",",
															"                                \"itemValueRHS\": \"D\"",
															"                            },",
															"                            {",
															"                                \"itemValueLHS\": \"70-79\",",
															"                                \"itemValueRHS\": \"C\"",
															"                            },",
															"                            {",
															"                                \"itemValueLHS\": \"80-89\",",
															"                                \"itemValueRHS\": \"B\"",
															"                            },",
															"                            {",
															"                                \"itemValueLHS\": \"90-100\",",
															"                                \"itemValueRHS\": \"A\"",
															"                            }",
															"                        ]",
															"                    }",
															"                }",
															"",
															"                // Make the PUT ScoreScale request",
															"                pm.sendRequest({",
															"                    url: scoreScaleUrl,",
															"                    method: 'PUT',",
															"                    header: headers,",
															"                    body: {",
															"                        mode: 'raw',",
															"                        raw: JSON.stringify(scoreScaleRequestBody)",
															"                    }",
															"                }, function (err, res) {",
															"                    if (err) {",
															"                        console.error(\"PUT ScoreScale API Error: \", err);",
															"                        pm.environment.unset(\"scoreScaleSourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT ScoreScale API request failed.\");",
															"                    }",
															"",
															"                    if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
															"                        console.error(\"Unexpected PUT ScoreScale API Response Code: \" + res.code);",
															"                        pm.environment.unset(\"scoreScaleSourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT ScoreScale API did not return 200 or 201.\");",
															"                    }",
															"",
															"                    console.log(\"PUT ScoreScale API succeeded with status: \" + res.code);",
															"",
															"                    // Generate and store sourcedId for AssessmentLineItem",
															"                    let assessmentLineItemeSourcedId = generateUUID();",
															"                    pm.environment.set(\"assessmentLineItemeSourcedId\", assessmentLineItemeSourcedId);",
															"                    console.log(\"Generated assessmentLineItemeSourcedId: \" + assessmentLineItemeSourcedId);",
															"",
															"                    // Define putAssessmentLineItems API URL",
															"                    let assessmentLineItemsUrl = pm.environment.get(\"URL\") + pm.environment.get(\"pathPrefix\")+\"/assessmentLineItems/\"+ assessmentLineItemeSourcedId;",
															"",
															"                    // Define putAssessmentLineItems API Request Body",
															"                    let assessmentLineItemRequestBody = {",
															"                        \"assessmentLineItem\": {",
															"                            \"sourcedId\": pm.environment.get(\"assessmentLineItemeSourcedId\"),",
															"                            \"status\": \"active\",",
															"                            \"dateLastModified\": isoDateTime, // Use the dynamically generated timestamp",
															"                            \"title\": \"Good Effort\"",
															"                        }",
															"                    }",
															"",
															"                    // Make the PUT AssessmentLineItems request",
															"                    pm.sendRequest({",
															"                        url: assessmentLineItemsUrl,",
															"                        method: 'PUT',",
															"                        header: headers,",
															"                        body: {",
															"                            mode: 'raw',",
															"                            raw: JSON.stringify(assessmentLineItemRequestBody)",
															"                        }",
															"                    }, function (err, res) {",
															"                        if (err) {",
															"                            console.error(\"PUT AssessmentLineItems API Error: \", err);",
															"                            pm.environment.unset(\"assessmentLineItemeSourcedId\"); // Clear sourcedId on failure",
															"                            throw new Error(\"PUT AssessmentLineItems API request failed.\");",
															"                        }",
															"",
															"                        if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
															"                            console.error(\"Unexpected PUT AssessmentLineItems API Response Code: \" + res.code);",
															"                            pm.environment.unset(\"assessmentLineItemeSourcedId\"); // Clear sourcedId on failure",
															"                            throw new Error(\"PUT AssessmentLineItems API did not return 200 or 201.\");",
															"                        }",
															"",
															"                        console.log(\"PUT AssessmentLineItems API succeeded with status: \" + res.code);",
															"",
															"",
															"                        ",
															"",
															"                        let uuid = generateUUID();",
															"                        pm.environment.set(\"sourcedId\", uuid);",
															"",
															"                         // Define putAssessmentLineItem API URL",
															"                        let Url = pm.environment.get(\"URL\") + pm.environment.get(\"pathPrefix\")+\"/assessmentLineItems/\"+ pm.environment.get(\"sourcedId\");",
															"",
															"                        // Define putAssessmentLineItems API Request Body",
															"                    let putAssessmentLineItemRequestBody = {",
															"    \"assessmentLineItem\": {",
															"        \"sourcedId\": pm.environment.get(\"sourcedId\"),",
															"        \"status\": \"active\",",
															"        \"dateLastModified\": isoDateTime,",
															"        \"metadata\": {",
															"            \"extensions\": {",
															"                \"fields\": {",
															"                    \"type\": \"PLACEMENT_TEST\",",
															"                    \"adaptive\": true,",
															"                    \"storageName\": \"storageName\",",
															"                    \"subject\": \"subject\",",
															"                    \"creator\": [],",
															"                    \"mediaType\": \"mediaType\",",
															"                    \"keywords\": null,",
															"                    \"datePublished\": null,",
															"                    \"dateToActivate\": null,",
															"                    \"dateToShow\": null,",
															"                    \"dateToStartOn\": null,",
															"                    \"maxAttempts\": null,",
															"                    \"maxSubmits\": null,",
															"                    \"version\": null,",
															"                    \"dueDate\": null,",
															"                    \"assignDate\": null,",
															"                    \"schoolId\": null,",
															"                    \"academicSessionId\": null,",
															"                    \"categoryId\": null,",
															"                    \"applicationId\": null,",
															"                    \"competencyId\": null",
															"                }",
															"            }",
															"        },",
															"        \"title\": \"AssessmentLineItem\",",
															"        \"description\": \"This is QA POSTMAN API Automation generated \",",
															"        \"class\": {",
															"            \"href\": \"https://example.com\",",
															"            \"sourcedId\": pm.environment.get(\"classSourcedId\"),",
															"            \"type\": \"class\"",
															"        },",
															"        \"parentAssessmentLineItem\": {",
															"            \"href\": \"/classes/b2a85993-8b03-4560-8ab3-d39b56570823\",",
															"            \"sourcedId\": pm.environment.get(\"assessmentLineItemeSourcedId\"), ",
															"            \"type\": \"assessmentLineItem\"",
															"        },",
															"        \"scoreScale\": {",
															"            \"href\": \"https://example.com/scoreScale\",",
															"            \"sourcedId\": pm.environment.get(\"scoreScaleSourcedId\"),",
															"            \"type\": \"scoreScale\"",
															"        },",
															"        \"resultValueMin\": 90,",
															"        \"resultValueMax\": 100,",
															"        \"learningObjectiveSet\": null",
															"    }",
															"}",
															"        let putAssessmentLineitemRequestBody = putAssessmentLineItemRequestBody.assessmentLineItem;",
															"",
															"        pm.environment.set(\"putAssessmentLineitemRequestBody\", JSON.stringify(putAssessmentLineitemRequestBody)); ",
															"",
															"                    // Make the PUT AssessmentLineItems request",
															"                    pm.sendRequest({",
															"                        url: Url,",
															"                        method: 'PUT',",
															"                        header: headers,",
															"                        body: {",
															"                            mode: 'raw',",
															"                            raw: JSON.stringify(putAssessmentLineItemRequestBody)",
															"                        }",
															"                        ",
															"                    }, function (err, res) {",
															"                        if (err) {",
															"                            console.error(\"PUT AssessmentLineItems API Error: \", err);",
															"                            pm.environment.unset(\"assessmentLineItemeSourcedId\"); // Clear sourcedId on failure",
															"                            throw new Error(\"PUT AssessmentLineItems API request failed.\");",
															"                        }",
															"",
															"                        if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
															"                            console.error(\"Unexpected PUT AssessmentLineItems API Response Code: \" + res.code);",
															"                            pm.environment.unset(\"assessmentLineItemeSourcedId\"); // Clear sourcedId on failure",
															"                            throw new Error(\"PUT AssessmentLineItems API did not return 200 or 201.\");",
															"                        }",
															"",
															"                        console.log(\"PUT AssessmentLineItems API succeeded with status: \" + res.code);",
															"",
															"",
															"                         //Make DELETE AssessmentLineItem API Request",
															"                        pm.sendRequest({",
															"                            url: Url,",
															"                            method: 'DELETE',",
															"                            header: headers",
															"                            }, function (err, res) {",
															"                            if (err || res.code !== 204) {",
															"                             console.error(\"DELETE scoreScale API Failed. Code:\", res?.code || \"No response\", \"Error:\", err);",
															"                                throw new Error(\"DELETE scoreScale API request failed.\");",
															"                            }",
															"                            });",
															"",
															"",
															"                    });",
															"                    });   ",
															"                });",
															"            });",
															"        });",
															"    });",
															"});",
															"",
															"",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Parse response JSON",
															"let response = pm.response.json();",
															"let expectedData = JSON.parse(pm.environment.get(\"putAssessmentLineitemRequestBody\"));",
															"",
															"// 1. Validate the response status is success",
															"pm.test(\"Response should have success status\", function () {",
															"    pm.expect(response.imsx_codeMajor).to.eql(\"success\");",
															"});",
															"",
															"// 2. Validate the Status code",
															"pm.test(\"Validate Status Code, It should be 200 OK\", function () {",
															"    pm.expect([200]).to.include(pm.response.code, \"Unexpected status code\");",
															"});",
															"",
															"// 3. Validate Json Response Structure and Types",
															"pm.test(\"Validate JSON Response Structure and Types\", () => {",
															"    // Check for the top-level keys",
															"    pm.expect(response).to.have.keys(\"imsx_codeMajor\", \"imsx_severity\", \"assessmentLineItem\");",
															"",
															"    // Validate imsx_codeMajor and imsx_severity types and values",
															"    pm.expect(response.imsx_codeMajor).to.be.a(\"string\").to.eql(\"success\");",
															"    pm.expect(response.imsx_severity).to.be.a(\"string\").to.eql(\"status\");",
															"",
															"    // Validate assessmentLineItem structure",
															"    const assessmentLineItemResponse = response.assessmentLineItem;",
															"    pm.expect(assessmentLineItemResponse).to.be.an(\"object\").to.have.keys(",
															"        \"sourcedId\", \"status\", \"dateLastModified\", \"metadata\", \"title\",",
															"        \"description\", \"class\", \"parentAssessmentLineItem\", \"scoreScale\",",
															"        \"resultValueMin\", \"resultValueMax\", \"learningObjectiveSet\"",
															"    );",
															"",
															"    // Validate assessmentLineItem field types",
															"    pm.expect(assessmentLineItemResponse.sourcedId).to.be.a(\"string\");",
															"    pm.expect(assessmentLineItemResponse.status).to.be.a(\"string\");",
															"    pm.expect(assessmentLineItemResponse.dateLastModified).to.be.a(\"string\");",
															"    pm.expect(assessmentLineItemResponse.metadata).to.be.an(\"object\");",
															"    pm.expect(assessmentLineItemResponse.title).to.be.a(\"string\");",
															"    pm.expect(assessmentLineItemResponse.description).to.be.a(\"string\");",
															"    pm.expect(assessmentLineItemResponse.class).to.be.an(\"object\");",
															"    pm.expect(assessmentLineItemResponse.parentAssessmentLineItem).to.be.an(\"object\");",
															"    pm.expect(assessmentLineItemResponse.scoreScale).to.be.an(\"object\");",
															"    pm.expect(assessmentLineItemResponse.resultValueMin).to.satisfy(value => value === null || typeof value === 'number');",
															"    pm.expect(assessmentLineItemResponse.resultValueMax).to.satisfy(value => value === null || typeof value === 'number');",
															"    pm.expect(assessmentLineItemResponse.learningObjectiveSet).to.be.a(\"null\");",
															"});",
															"",
															"// 4. Validate the format of dateLastModified",
															"pm.test(\"Verify dateLastModified is in ISO 8601 format\", () => {",
															"    const response = pm.response.json();",
															"    const dateLastModified = response.assessmentLineItem.dateLastModified;",
															"    const iso8601Regex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?Z$/;",
															"    pm.expect(dateLastModified).to.match(iso8601Regex);",
															"});",
															"",
															"// 5. Dynamically Verify assessmentLineItem fields (excluding 'status') against requested values",
															"pm.test(\"Verify assessmentLineItem fields match requested values\", function () {",
															"    const assessmentLineItemResponse = response.assessmentLineItem;",
															"    const assessmentLineItemExpected = expectedData; // ExpectedData directly contains the assessmentLineItem object",
															"",
															"    for (const key in assessmentLineItemExpected) {",
															"        if (assessmentLineItemExpected.hasOwnProperty(key) && key !== \"status\") {",
															"            pm.expect(assessmentLineItemResponse[key]).to.eql(assessmentLineItemExpected[key], `Value mismatch for field: ${key}`);",
															"        }",
															"    }",
															"});",
															"",
															"// 6. Dynamically Verify nested fields in assessmentLineItem",
															"pm.test(\"Verify nested fields in assessmentLineItem match requested values\", function () {",
															"    const assessmentLineItemResponse = response.assessmentLineItem;",
															"    const assessmentLineItemExpected = expectedData;",
															"",
															"    const nestedFieldsToCheck = [",
															"        { path: \"class.sourcedId\", expected: assessmentLineItemExpected.class.sourcedId },",
															"        { path: \"parentAssessmentLineItem.sourcedId\", expected: assessmentLineItemExpected.parentAssessmentLineItem.sourcedId },",
															"        { path: \"scoreScale.sourcedId\", expected: assessmentLineItemExpected.scoreScale.sourcedId },",
															"        { path: \"resultValueMin\", expected: assessmentLineItemExpected.resultValueMin },",
															"        { path: \"resultValueMax\", expected: assessmentLineItemExpected.resultValueMax }",
															"    ];",
															"",
															"    nestedFieldsToCheck.forEach(field => {",
															"        const actualValue = field.path.split('.').reduce((obj, key) => obj && obj[key], assessmentLineItemResponse);",
															"        pm.expect(actualValue).to.eql(field.expected, `Value mismatch for nested field: ${field.path}`);",
															"    });",
															"});",
															"",
															"",
															"// 7. Verify status field",
															"        pm.test(\"Verify status, it should be in 'tobedeleted' state\", function () {",
															"        pm.expect(response.assessmentLineItem.status).to.eql(\"tobedeleted\");",
															"",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}{{pathPrefix}}/assessmentLineItems/{{sourcedId}}",
													"host": [
														"{{URL}}{{pathPrefix}}"
													],
													"path": [
														"assessmentLineItems",
														"{{sourcedId}}"
													],
													"query": [
														{
															"key": "fields",
															"value": "title",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Validate API throws an error for sending non existing sourcedId in the path parameter",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Set headers dynamically from environment variables",
															"pm.request.headers.upsert({ key: \"Authorization\", value: pm.environment.get(\"Auth\") });",
															"pm.request.headers.upsert({ key: \"x-app-key\", value: pm.environment.get(\"x-app-key\") });",
															"pm.request.headers.upsert({ key: \"x-client-id\", value: pm.environment.get(\"x-client-id\") });",
															"",
															"// Generate a random UUID for sourcedId",
															"function generateUUID() {",
															"    let dt = new Date().getTime();",
															"    let uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {",
															"        let r = (dt + Math.random() * 16) % 16 | 0;",
															"        dt = Math.floor(dt / 16);",
															"        return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);",
															"    });",
															"    return uuid;",
															"}",
															"",
															"const headers = {",
															"    'Authorization': pm.environment.get(\"Auth\"),",
															"    'x-app-key': pm.environment.get(\"x-app-key\"),",
															"    'x-client-id': pm.environment.get(\"x-client-id\"),",
															"    'Content-Type': 'application/json'",
															"};",
															"",
															"// Generate and store courseSourcedId",
															"let sourcedId = generateUUID();",
															"pm.environment.set(\"sourcedId\", sourcedId);",
															"console.log(\"Generated sourcedId: \" + sourcedId);",
															"",
															"",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Parse response JSON",
															"let response = pm.response.json();",
															"",
															"// Retrive requested sourcedId",
															"let sourcedId = pm.environment.get(\"sourcedId\");",
															"",
															"// Construct expected error message",
															"let expectedDescription = `AssessmentLineItem with sourcedId ${sourcedId} was not found.`;",
															"",
															"",
															"// 1. Validate the Status code",
															"pm.test(\"Validate Status Code, It should be 404 Not Found\", function () {",
															"    pm.expect([404]).to.include(pm.response.code, \"Unexpected status code\");",
															"});",
															"",
															"// 2. Validate Json Response Structure and Types",
															"pm.test(\"Validate Error Response Structure\", function () {",
															"    const response = pm.response.json();",
															"",
															"    // 2.1. Validate top-level keys",
															"    pm.expect(response).to.have.keys(\"imsx_codeMajor\", \"imsx_severity\", \"imsx_description\", \"imsx_CodeMinor\");",
															"",
															"    // 2.2 Validate imsx_codeMajor",
															"    pm.expect(response.imsx_codeMajor).to.be.a(\"string\");",
															"    pm.expect(response.imsx_codeMajor).to.eql(\"failure\");",
															"",
															"    // 2.3 Validate imsx_severity",
															"    pm.expect(response.imsx_severity).to.be.a(\"string\");",
															"    pm.expect(response.imsx_severity).to.eql(\"error\");",
															"",
															"    // 2.4 Validate imsx_description",
															"    pm.expect(response.imsx_description).to.be.a(\"string\");",
															"    pm.expect(response.imsx_description).to.include(\"AssessmentLineItem with sourcedId\");",
															"    pm.expect(response.imsx_description).to.include(\"was not found.\");",
															"",
															"    // 5. Validate imsx_CodeMinor structure",
															"    pm.expect(response.imsx_CodeMinor).to.be.an(\"object\");",
															"    pm.expect(response.imsx_CodeMinor).to.have.keys(\"imsx_codeMinorField\");",
															"",
															"    // 2.5 Validate imsx_codeMinorField is an array",
															"    pm.expect(response.imsx_CodeMinor.imsx_codeMinorField).to.be.an(\"array\");",
															"    pm.expect(response.imsx_CodeMinor.imsx_codeMinorField).to.have.lengthOf.at.least(1); // Expect at least one item",
															"",
															"    // 2.6 Validate the structure of each item in imsx_codeMinorField",
															"    response.imsx_CodeMinor.imsx_codeMinorField.forEach(minorField => {",
															"        pm.expect(minorField).to.be.an(\"object\");",
															"        pm.expect(minorField).to.have.keys(\"imsx_codeMinorFieldName\", \"imsx_codeMinorFieldValue\");",
															"",
															"        // Validate imsx_codeMinorFieldName and imsx_codeMinorFieldValue types",
															"        pm.expect(minorField.imsx_codeMinorFieldName).to.be.a(\"string\");",
															"        pm.expect(minorField.imsx_codeMinorFieldValue).to.be.a(\"string\");",
															"",
															"        // Optional: Specific value check for imsx_codeMinorFieldName and imsx_codeMinorFieldValue",
															"        // You can add more specific checks if you expect certain values.",
															"        // For example, to check if the first item has specific values:",
															"        if (response.imsx_CodeMinor.imsx_codeMinorField.length > 0) {",
															"            if (response.imsx_CodeMinor.imsx_codeMinorField[0]) {",
															"                pm.expect(response.imsx_CodeMinor.imsx_codeMinorField[0].imsx_codeMinorFieldName).to.eql(\"TargetEndSystem\");",
															"                pm.expect(response.imsx_CodeMinor.imsx_codeMinorField[0].imsx_codeMinorFieldValue).to.eql(\"unknownobject\");",
															"            }",
															"        }",
															"    });",
															"});",
															"",
															"",
															"// 3. Validate the error message exactly",
															"pm.test(\"Verify Error message and it should matches with requested sourcedId and indicates sourcedId is unknown \", function () {",
															"    pm.expect(response.imsx_description).to.eql(expectedDescription);",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}{{pathPrefix}}/assessmentLineItems/{{sourcedId}}",
													"host": [
														"{{URL}}{{pathPrefix}}"
													],
													"path": [
														"assessmentLineItems",
														"{{sourcedId}}"
													],
													"query": [
														{
															"key": "fields",
															"value": "title",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Validate API throws an error for sending sourcedId which is of type NON PLACEMENT_TEST",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Set headers dynamically from environment variables",
															"pm.request.headers.upsert({ key: \"Authorization\", value: pm.environment.get(\"Auth\") });",
															"pm.request.headers.upsert({ key: \"x-app-key\", value: pm.environment.get(\"x-app-key\") });",
															"pm.request.headers.upsert({ key: \"x-client-id\", value: pm.environment.get(\"x-client-id\") });",
															"",
															"// Generate a random UUID for sourcedId",
															"function generateUUID() {",
															"    let dt = new Date().getTime();",
															"    let uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {",
															"        let r = (dt + Math.random() * 16) % 16 | 0;",
															"        dt = Math.floor(dt / 16);",
															"        return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);",
															"    });",
															"    return uuid;",
															"}",
															"",
															"const headers = {",
															"    'Authorization': pm.environment.get(\"Auth\"),",
															"    'x-app-key': pm.environment.get(\"x-app-key\"),",
															"    'x-client-id': pm.environment.get(\"x-client-id\"),",
															"    'Content-Type': 'application/json'",
															"};",
															"",
															"// Generate and store courseSourcedId",
															"let courseSourcedId = generateUUID();",
															"pm.environment.set(\"courseSourcedId\", courseSourcedId);",
															"console.log(\"Generated courseSourcedId: \" + courseSourcedId);",
															"",
															"// Generate current UTC timestamp in ISO format: 2025-01-29T06:51:57Z",
															"function getCurrentISOString() {",
															"    return new Date().toISOString().split('.')[0] + \"Z\";",
															"}",
															"",
															"// Set dynamic date variables",
															"let isoDateTime = getCurrentISOString(); // full timestamp",
															"let isoDateOnly = isoDateTime.split('T')[0]; // date only",
															"",
															"pm.environment.set(\"isoDateTime\", isoDateTime);",
															"pm.environment.set(\"isoDateOnly\", isoDateOnly);",
															"",
															"console.log(\"Generated ISO DateTime: \" + isoDateTime);",
															"console.log(\"Generated ISO Date Only: \" + isoDateOnly);",
															"",
															"",
															"// Define Course API URL",
															"let courseUrl = pm.environment.get(\"URL\") + pm.environment.get(\"customPathPrefix\")+\"/courses\";",
															"",
															"// Define Course API Request Body",
															"let courseRequestBody = {",
															"    \"sourcedId\": pm.environment.get(\"courseSourcedId\"), //required",
															"    \"status\": \"active\", //required",
															"    \"title\": \"QA\", //required",
															"    \"courseCode\": \"courseCode\" //required",
															"",
															"}",
															"",
															"",
															"// Make the Course POST request",
															"pm.sendRequest({",
															"    url: courseUrl,",
															"    method: 'POST',",
															"    header: headers,",
															"    body: {",
															"        mode: 'raw',",
															"        raw: JSON.stringify(courseRequestBody)",
															"    }",
															"}, function (err, res) {",
															"    if (err) {",
															"        console.error(\"POST Course API Error: \", err);",
															"        pm.environment.unset(\"courseSourcedId\"); // Clear sourcedId on failure",
															"        throw new Error(\"Course POST API request failed.\");",
															"    }",
															"",
															"    if (res.code !== 201) {  // Ensure status is 201 Created",
															"        console.error(\"Unexpected POST Course API Response Code: \" + res.code);",
															"        pm.environment.unset(\"courseSourcedId\"); // Clear sourcedId on failure",
															"        throw new Error(\"Course POST API did not return 201 Created.\");",
															"    }",
															"",
															"    console.log(\"Course POST API succeeded with status: \" + res.code);",
															"",
															"    // Define getAllOrgs API URL",
															"    let getAllOrgsUrl = pm.environment.get(\"URL\") + pm.environment.get(\"rosterPathPrefix\")+\"/orgs\";",
															"",
															"    // Make getAllOrgs Request",
															"    pm.sendRequest({",
															"        url: getAllOrgsUrl,",
															"        method: 'GET',",
															"        header: headers",
															"    }, function (err, res) {",
															"        if (err || res.code !== 200) {",
															"            console.error(\"GET Orgs API Failed. Code:\", res?.code || \"No response\", \"Error:\", err);",
															"            throw new Error(\"GET Orgs API request failed.\");",
															"        }",
															"",
															"        console.log(\"GET Orgs API succeeded with status:\", res.code);",
															"",
															"        let response = res.json();",
															"        let schoolOrgs = response.orgs.filter(org => org.type === \"SCHOOL\");",
															"",
															"        if (schoolOrgs.length === 0) {",
															"            throw new Error(\"No orgs of type 'SCHOOL' found.\");",
															"        }",
															"",
															"        // Get a random school sourcedId",
															"        let randomIndex = Math.floor(Math.random() * schoolOrgs.length);",
															"        let schoolSourcedId = schoolOrgs[randomIndex].sourcedId;",
															"",
															"        console.log(\"Selected school sourcedId: \" + schoolSourcedId);",
															"",
															"        // Save to environment variable for later use",
															"        pm.environment.set(\"school_sourcedId\", schoolSourcedId);",
															"",
															"        // Define getAllterms API URL",
															"        let getAllTermsUrl = pm.environment.get(\"URL\") + pm.environment.get(\"rosterPathPrefix\")+\"/terms\";",
															"",
															"        // Make getAllterms Request",
															"        pm.sendRequest({",
															"            url: getAllTermsUrl,",
															"            method: 'GET',",
															"            header: headers",
															"        }, function (err, res) {",
															"            if (err || res.code !== 200) {",
															"                console.error(\"GET TERMS API Failed. Code:\", res?.code || \"No response\", \"Error:\", err);",
															"                throw new Error(\"GET TERMS API request failed.\");",
															"            }",
															"",
															"            console.log(\"GET TERMS API succeeded with status:\", res.code);",
															"",
															"            let response = res.json();",
															"            let termSessions = response.academicSessions.filter(session => session.type === \"TERM\");",
															"",
															"            if (termSessions.length === 0) {",
															"                throw new Error(\"No academicSessions of type 'TERM' found.\");",
															"            }",
															"",
															"            // Select a random term sourcedId",
															"            let randomIndex = Math.floor(Math.random() * termSessions.length);",
															"            let termSourcedId = termSessions[randomIndex].sourcedId;",
															"",
															"            console.log(\"Selected TERM sourcedId: \" + termSourcedId);",
															"",
															"            // Save to environment variable",
															"            pm.environment.set(\"term_sourcedId\", termSourcedId);",
															"",
															"            // Generate and store classSourcedId",
															"            let classSourcedId = generateUUID();",
															"            pm.environment.set(\"classSourcedId\", classSourcedId);",
															"            console.log(\"Generated classSourcedId: \" + classSourcedId);",
															"",
															"            // Define Class API URL",
															"            let classUrl = pm.environment.get(\"URL\") + pm.environment.get(\"customPathPrefix\")+\"/classes\";",
															"",
															"            // Define Class API Request Body",
															"            let classRequestBody = {",
															"                \"sourcedId\": pm.environment.get(\"classSourcedId\"), //Required",
															"                \"status\": \"active\", //Required",
															"                \"title\": \"title\", //Required",
															"                \"classType\": \"SCHEDULED\", //Required",
															"                \"course\": { //required",
															"                    \"href\": \"/courses/\" + pm.environment.get(\"courseSourcedId\"),",
															"                    \"sourcedId\": pm.environment.get(\"courseSourcedId\"),",
															"                    \"type\": \"course\"",
															"                },",
															"                \"school\": { //required",
															"                    \"href\": \"/org/\" + pm.environment.get(\"school_sourcedId\"),",
															"                    \"sourcedId\": pm.environment.get(\"school_sourcedId\"),",
															"                    \"type\": \"org\"",
															"                },",
															"                \"terms\": [ //required",
															"                    {",
															"                        \"href\": \"/academicSession/\" + pm.environment.get(\"term_sourcedId\"),",
															"                        \"sourcedId\":pm.environment.get(\"term_sourcedId\"),",
															"                        \"type\": \"academicSession\"",
															"                    }",
															"                ]",
															"            }",
															"",
															"            // Make the Class POST request",
															"            pm.sendRequest({",
															"                url: classUrl,",
															"                method: 'POST',",
															"                header: headers,",
															"                body: {",
															"                    mode: 'raw',",
															"                    raw: JSON.stringify(classRequestBody)",
															"                }",
															"            }, function (err, res) {",
															"                if (err) {",
															"                    console.error(\"POST Class API Error: \", err);",
															"                    pm.environment.unset(\"classSourcedId\"); // Clear sourcedId on failure",
															"                    throw new Error(\"Class POST API request failed.\");",
															"                }",
															"",
															"                if (res.code !== 201) {  // Ensure status is 201 Created",
															"                    console.error(\"Unexpected POST Class API Response Code: \" + res.code);",
															"                    pm.environment.unset(\"classSourcedId\"); // Clear sourcedId on failure",
															"                    throw new Error(\"POST Class API did not return 201 Created.\");",
															"                }",
															"",
															"                console.log(\"POST Class API succeeded with status: \" + res.code);",
															"",
															"                // --- Subsequent Requests (Category, ScoreScale, LineItem) ---",
															"",
															"                // Generate and store sourcedId for Category",
															"                let categorySourcedId = generateUUID();",
															"                pm.environment.set(\"categorySourcedId\", categorySourcedId);",
															"                console.log(\"Generated categorySourcedId: \" + categorySourcedId);",
															"",
															"                // Define Category API URL",
															"                let categoryUrl = pm.environment.get(\"URL\") + pm.environment.get(\"pathPrefix\")+\"/categories/\"+ categorySourcedId;",
															"",
															"                // Define Category API Request Body",
															"                let categoryRequestBody = {",
															"                    \"category\": {",
															"                        \"sourcedId\": pm.environment.get(\"categorySourcedId\"),",
															"                        \"status\": \"active\",",
															"                        \"dateLastModified\": isoDateTime,",
															"                        \"metadata\": {},",
															"                        \"title\": \"title\",",
															"                        \"weight\": 3",
															"                    }",
															"                }",
															"",
															"                // Make the PUT Category request",
															"                pm.sendRequest({",
															"                    url: categoryUrl,",
															"                    method: 'PUT',",
															"                    header: headers,",
															"                    body: {",
															"                        mode: 'raw',",
															"                        raw: JSON.stringify(categoryRequestBody)",
															"                    }",
															"                }, function (err, res) {",
															"                    if (err) {",
															"                        console.error(\"PUT Category API Error: \", err);",
															"                        pm.environment.unset(\"categorySourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT Category API request failed.\");",
															"                    }",
															"",
															"                    if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
															"                        console.error(\"Unexpected PUT Category API Response Code: \" + res.code);",
															"                        pm.environment.unset(\"categorySourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT Category API did not return 200 or 201.\");",
															"                    }",
															"",
															"                    console.log(\"PUT Category API succeeded with status: \" + res.code);",
															"",
															"                    // Generate and store sourcedId for ScoreScale",
															"                    let scoreScaleSourcedId = generateUUID();",
															"                    pm.environment.set(\"scoreScaleSourcedId\", scoreScaleSourcedId);",
															"                    console.log(\"Generated scoreScaleSourcedId: \" + scoreScaleSourcedId);",
															"",
															"                    // Define ScoreScale API URL",
															"                    let scoreScaleUrl = pm.environment.get(\"URL\") + pm.environment.get(\"pathPrefix\")+\"/scoreScales/\"+ scoreScaleSourcedId;",
															"",
															"                    // Define ScoreScale API Request Body",
															"                    let scoreScaleRequestBody = {",
															"                        \"scoreScale\": {",
															"                            \"sourcedId\":pm.environment.get(\"scoreScaleSourcedId\"), //required",
															"                            \"status\": \"active\", //required",
															"                            \"dateLastModified\": isoDateTime, //required",
															"                            \"metadata\": {",
															"                                \"test\": \"metadata\"",
															"                            },",
															"                            \"title\": \"QATestProd\", //required",
															"                            \"type\": \"QATestProd\", //required",
															"                            \"course\": {",
															"                                \"href\": \"/course/\" + pm.environment.get(\"courseSourcedId\"),",
															"                                \"sourcedId\": pm.environment.get(\"courseSourcedId\"),",
															"                                \"type\": \"course\"",
															"                            },",
															"                            \"class\": {  //required",
															"                                \"href\": \"/classes/\" + pm.environment.get(\"classSourcedId\"),",
															"                                \"sourcedId\": pm.environment.get(\"classSourcedId\"),",
															"                                \"type\": \"class\"",
															"                            },",
															"                            \"scoreScaleValue\": [ //required",
															"                                {",
															"                                    \"itemValueLHS\": \"0-57\",",
															"                                    \"itemValueRHS\": \"F\"",
															"                                },",
															"                                {",
															"                                    \"itemValueLHS\": \"60-69\",",
															"                                    \"itemValueRHS\": \"D\"",
															"                                },",
															"                                {",
															"                                    \"itemValueLHS\": \"70-79\",",
															"                                    \"itemValueRHS\": \"C\"",
															"                                },",
															"                                {",
															"                                    \"itemValueLHS\": \"80-89\",",
															"                                    \"itemValueRHS\": \"B\"",
															"                                },",
															"                                {",
															"                                    \"itemValueLHS\": \"90-100\",",
															"                                    \"itemValueRHS\": \"A\"",
															"                                }",
															"                            ]",
															"                        }",
															"                    }",
															"",
															"                    // Make the PUT ScoreScale request",
															"                    pm.sendRequest({",
															"                        url: scoreScaleUrl,",
															"                        method: 'PUT',",
															"                        header: headers,",
															"                        body: {",
															"                            mode: 'raw',",
															"                            raw: JSON.stringify(scoreScaleRequestBody)",
															"                        }",
															"                    }, function (err, res) {",
															"                        if (err) {",
															"                            console.error(\"PUT ScoreScale API Error: \", err);",
															"                            pm.environment.unset(\"scoreScaleSourcedId\"); // Clear sourcedId on failure",
															"                            throw new Error(\"PUT ScoreScale API request failed.\");",
															"                        }",
															"",
															"                        if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
															"                            console.error(\"Unexpected PUT ScoreScale API Response Code: \" + res.code);",
															"                            pm.environment.unset(\"scoreScaleSourcedId\"); // Clear sourcedId on failure",
															"                            throw new Error(\"PUT ScoreScale API did not return 200 or 201.\");",
															"                        }",
															"",
															"                        console.log(\"PUT ScoreScale API succeeded with status: \" + res.code);",
															"",
															"                        // Generate and store sourcedId for LineItem",
															"                        let lineItemSourcedId = generateUUID();",
															"                        pm.environment.set(\"lineItemSourcedId\", lineItemSourcedId);",
															"                        console.log(\"Generated lineItemSourcedId: \" + lineItemSourcedId);",
															"",
															"                        // Define putLineItem API URL",
															"                        let putLineItemUrl = pm.environment.get(\"URL\") + pm.environment.get(\"pathPrefix\")+\"/lineItems/\"+ lineItemSourcedId;",
															"",
															"                        // Define putAssessmentLineItems API Request Body",
															"                        let putLineItemRequestBody = {",
															"                                \"lineItem\": {",
															"                                    \"sourcedId\": pm.environment.get(\"lineItemSourcedId\"), //required",
															"                                    \"status\": \"active\", //required",
															"                                    \"dateLastModified\": isoDateTime, // Correct UTC ISO8601 format //required",
															"                                    \"title\": \"Math\\nTest\", //required",
															"                                    \"assignDate\": isoDateTime, // Correct UTC ISO8601 format //required",
															"                                    \"dueDate\": isoDateTime, // Correct UTC ISO8601 format //required",
															"                                    \"class\": { //required",
															"                                        \"href\": \"/classes/\" + pm.environment.get(\"classSourcedId\"),",
															"                                        \"sourcedId\": pm.environment.get(\"classSourcedId\"),",
															"                                        \"type\": \"class\"",
															"                                    },",
															"                                    \"school\": { //required",
															"                                        \"href\": \"/org/\" + pm.environment.get(\"school_sourcedId\"),",
															"                                        \"sourcedId\": pm.environment.get(\"school_sourcedId\"),",
															"                                        \"type\": \"org\"",
															"                                    },",
															"                                    \"category\": { //required",
															"                                        \"href\": \"/categories/\" + pm.environment.get(\"categorySourcedId\"),",
															"                                        \"sourcedId\": pm.environment.get(\"categorySourcedId\"),",
															"                                        \"type\": \"category\"",
															"                                    }",
															"                                }",
															"",
															"                        }",
															"",
															"                        // Make the putLineItem request",
															"                        pm.sendRequest({",
															"                            url: putLineItemUrl,",
															"                            method: 'PUT',",
															"                            header: headers,",
															"                            body: {",
															"                                mode: 'raw',",
															"                                raw: JSON.stringify(putLineItemRequestBody)",
															"                            }",
															"                        }, function (err, res) {",
															"                            if (err) {",
															"                                console.error(\"PUT LineItem API Error: \", err);",
															"                                pm.environment.unset(\"lineItemSourcedId\"); // Clear sourcedId on failure",
															"                                throw new Error(\"PUT LineItem API request failed.\");",
															"                            }",
															"",
															"                            if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
															"                                console.error(\"Unexpected PUT LineItem API Response Code: \" + res.code);",
															"                                pm.environment.unset(\"lineItemSourcedId\"); // Clear sourcedId on failure",
															"                                throw new Error(\"PUT LineItem API did not return 200 or 201.\");",
															"                            }",
															"",
															"                            console.log(\"PUT LineItem API succeeded with status: \" + res.code);",
															"                        });",
															"                    });",
															"                });",
															"            });",
															"        });",
															"    });",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Parse response JSON",
															"let response = pm.response.json();",
															"",
															"// Retrive requested sourcedId",
															"let sourcedId = pm.environment.get(\"lineItemSourcedId\");",
															"",
															"// Construct expected error message",
															"let expectedDescription = `AssessmentLineItem with sourcedId ${sourcedId} was not found.`;",
															"",
															"",
															"// 1. Validate the Status code",
															"pm.test(\"Validate Status Code, It should be 404 Not Found\", function () {",
															"    pm.expect([404]).to.include(pm.response.code, \"Unexpected status code\");",
															"});",
															"",
															"// 2. Validate Json Response Structure and Types",
															"pm.test(\"Validate Error Response Structure\", function () {",
															"    const response = pm.response.json();",
															"",
															"    // 2.1. Validate top-level keys",
															"    pm.expect(response).to.have.keys(\"imsx_codeMajor\", \"imsx_severity\", \"imsx_description\", \"imsx_CodeMinor\");",
															"",
															"    // 2.2 Validate imsx_codeMajor",
															"    pm.expect(response.imsx_codeMajor).to.be.a(\"string\");",
															"    pm.expect(response.imsx_codeMajor).to.eql(\"failure\");",
															"",
															"    // 2.3 Validate imsx_severity",
															"    pm.expect(response.imsx_severity).to.be.a(\"string\");",
															"    pm.expect(response.imsx_severity).to.eql(\"error\");",
															"",
															"    // 2.4 Validate imsx_description",
															"    pm.expect(response.imsx_description).to.be.a(\"string\");",
															"    pm.expect(response.imsx_description).to.include(\"AssessmentLineItem with sourcedId\");",
															"    pm.expect(response.imsx_description).to.include(\"was not found.\");",
															"",
															"    // 5. Validate imsx_CodeMinor structure",
															"    pm.expect(response.imsx_CodeMinor).to.be.an(\"object\");",
															"    pm.expect(response.imsx_CodeMinor).to.have.keys(\"imsx_codeMinorField\");",
															"",
															"    // 2.5 Validate imsx_codeMinorField is an array",
															"    pm.expect(response.imsx_CodeMinor.imsx_codeMinorField).to.be.an(\"array\");",
															"    pm.expect(response.imsx_CodeMinor.imsx_codeMinorField).to.have.lengthOf.at.least(1); // Expect at least one item",
															"",
															"    // 2.6 Validate the structure of each item in imsx_codeMinorField",
															"    response.imsx_CodeMinor.imsx_codeMinorField.forEach(minorField => {",
															"        pm.expect(minorField).to.be.an(\"object\");",
															"        pm.expect(minorField).to.have.keys(\"imsx_codeMinorFieldName\", \"imsx_codeMinorFieldValue\");",
															"",
															"        // Validate imsx_codeMinorFieldName and imsx_codeMinorFieldValue types",
															"        pm.expect(minorField.imsx_codeMinorFieldName).to.be.a(\"string\");",
															"        pm.expect(minorField.imsx_codeMinorFieldValue).to.be.a(\"string\");",
															"",
															"        // Optional: Specific value check for imsx_codeMinorFieldName and imsx_codeMinorFieldValue",
															"        // You can add more specific checks if you expect certain values.",
															"        // For example, to check if the first item has specific values:",
															"        if (response.imsx_CodeMinor.imsx_codeMinorField.length > 0) {",
															"            if (response.imsx_CodeMinor.imsx_codeMinorField[0]) {",
															"                pm.expect(response.imsx_CodeMinor.imsx_codeMinorField[0].imsx_codeMinorFieldName).to.eql(\"TargetEndSystem\");",
															"                pm.expect(response.imsx_CodeMinor.imsx_codeMinorField[0].imsx_codeMinorFieldValue).to.eql(\"unknownobject\");",
															"            }",
															"        }",
															"    });",
															"});",
															"",
															"",
															"// 3. Validate the error message exactly",
															"pm.test(\"Verify Error message and it should matches with requested sourcedId and indicates sourcedId is unknown \", function () {",
															"    pm.expect(response.imsx_description).to.eql(expectedDescription);",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}{{pathPrefix}}/assessmentLineItems/{{lineItemSourcedId}}",
													"host": [
														"{{URL}}{{pathPrefix}}"
													],
													"path": [
														"assessmentLineItems",
														"{{lineItemSourcedId}}"
													],
													"query": [
														{
															"key": "fields",
															"value": "title",
															"disabled": true
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "getAllAssessmentLineItems",
									"item": [
										{
											"name": "Validate successful retrieval of All Assessment LineItems",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Parse response JSON",
															"let response = pm.response.json();",
															"",
															"// 1. Validate the Status code",
															"pm.test(\"Validate Status Code, It should be 200 OK\", function () {",
															"    pm.expect([200]).to.include(pm.response.code, \"Unexpected status code\");",
															"});",
															"",
															"",
															"pm.test(\"All assessmentLineItems should have Type as PLACEMENT_TEST\", function () {",
															"    let responseData = pm.response.json();",
															"",
															"    pm.expect(responseData).to.have.property(\"assessmentLineItems\");",
															"    pm.expect(responseData.assessmentLineItems).to.be.an(\"array\").that.is.not.empty;",
															"",
															"    responseData.assessmentLineItems.forEach((result, index) => {",
															"        let resultTypePath = `assessmentLineItems[${index}].metadata.extensions.fields.type`;",
															"",
															"        pm.expect(result).to.have.nested.property(\"metadata.extensions.fields.type\", \"PLACEMENT_TEST\", ",
															"            `Mismatch at ${resultTypePath}`);",
															"    });",
															"});",
															"",
															"",
															"",
															"let items = response.assessmentLineItems;",
															"",
															"pm.test(\"Each assessmentLineItem contains all expected fields\", function () {",
															"    pm.expect(items).to.be.an(\"array\").that.is.not.empty;",
															"",
															"    items.forEach((item, index) => {",
															"        console.log(`Validating item ${index + 1}`);",
															"",
															"        // Top-level fields",
															"        pm.expect(item).to.have.property(\"sourcedId\");",
															"        pm.expect(item).to.have.property(\"status\");",
															"        pm.expect(item).to.have.property(\"dateLastModified\");",
															"        pm.expect(item).to.have.property(\"metadata\");",
															"        pm.expect(item).to.have.property(\"title\");",
															"        pm.expect(item).to.have.property(\"description\");",
															"        pm.expect(item).to.have.property(\"class\");",
															"        pm.expect(item).to.have.property(\"parentAssessmentLineItem\");",
															"        pm.expect(item).to.have.property(\"scoreScale\");",
															"        pm.expect(item).to.have.property(\"resultValueMin\");",
															"        pm.expect(item).to.have.property(\"resultValueMax\");",
															"        pm.expect(item).to.have.property(\"learningObjectiveSet\");",
															"",
															"        // metadata.extensions.fields",
															"        if (item.metadata && item.metadata.extensions && item.metadata.extensions.fields) {",
															"            const fields = item.metadata.extensions.fields;",
															"",
															"            const expectedFields = [",
															"                \"type\", \"adaptive\", \"storageName\", \"subject\", \"creator\", \"mediaType\", \"keywords\",",
															"                \"datePublished\", \"dateToActivate\", \"dateToShow\", \"dateToStartOn\", \"maxAttempts\", \"maxSubmits\",",
															"                \"version\", \"dueDate\", \"assignDate\", \"schoolId\", \"academicSessionId\", \"categoryId\",",
															"                \"applicationId\", \"competencyId\"",
															"            ];",
															"",
															"            expectedFields.forEach(field => {",
															"                pm.expect(fields).to.have.property(field);",
															"            });",
															"        } else {",
															"            console.warn(`Item ${index + 1} is missing metadata.extensions.fields`);",
															"        }",
															"",
															"        if (item.class !== null) {",
															"            pm.expect(item.class).to.have.property(\"sourcedId\");",
															"            pm.expect(item.class).to.have.property(\"href\");",
															"            pm.expect(item.class).to.have.property(\"type\");",
															"        }",
															"",
															"        if (item.parentAssessmentLineItem !== null) {",
															"            pm.expect(item.parentAssessmentLineItem).to.have.property(\"sourcedId\");",
															"            pm.expect(item.parentAssessmentLineItem).to.have.property(\"href\");",
															"            pm.expect(item.parentAssessmentLineItem).to.have.property(\"type\");",
															"        }",
															"",
															"        if (item.scoreScale !== null) {",
															"            pm.expect(item.scoreScale).to.have.property(\"sourcedId\");",
															"            pm.expect(item.scoreScale).to.have.property(\"href\");",
															"            pm.expect(item.scoreScale).to.have.property(\"type\");",
															"        }",
															"    });",
															"});",
															"",
															"",
															"let iso8601Regex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d{1,3})?Z$/;",
															"",
															"pm.test(\"Validate dateLastModified is ISO formatted in all objects\", function () {",
															"    items.forEach((item, index) => {",
															" pm.expect(item.dateLastModified, `Item ${index + 1}: 'dateLastModified' is not ISO 8601`).to.match(iso8601Regex);",
															"     });",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Set headers dynamically from environment variables",
															"pm.request.headers.upsert({ key: \"Authorization\", value: pm.environment.get(\"Auth\") });",
															"pm.request.headers.upsert({ key: \"x-app-key\", value: pm.environment.get(\"x-app-key\") });",
															"pm.request.headers.upsert({ key: \"x-client-id\", value: pm.environment.get(\"x-client-id\") });",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}{{pathPrefix}}/assessmentLineItems",
													"host": [
														"{{URL}}{{pathPrefix}}"
													],
													"path": [
														"assessmentLineItems"
													],
													"query": [
														{
															"key": "sort",
															"value": "sourcedId",
															"disabled": true
														},
														{
															"key": "orderBy",
															"value": "ASC",
															"disabled": true
														},
														{
															"key": "fields",
															"value": "resultValueMin",
															"disabled": true
														},
														{
															"key": "limit",
															"value": "10",
															"disabled": true
														},
														{
															"key": "filter",
															"value": "resultValueMin<'90'",
															"disabled": true
														},
														{
															"key": "offset",
															"value": "0",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Validate successful retrieval of All Assessment LineItems with applied query params",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// ✅ Status check",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"// ✅ Response contains assessmentLineItems array",
															"const json = pm.response.json();",
															"const items = json.assessmentLineItems || [];",
															"",
															"pm.test(\"Response has 'assessmentLineItems' array\", function () {",
															"    pm.expect(items).to.be.an(\"array\");",
															"});",
															"",
															"// ✅ Parse query parameters used in request",
															"let queryParams = {};",
															"pm.variables.get(\"queryParams\").split(\"&\").forEach(param => {",
															"    const [key, val] = param.split(\"=\");",
															"    queryParams[key] = decodeURIComponent(val);",
															"});",
															"",
															"console.log(\"Validating with Query Params:\", queryParams);",
															"",
															"// ✅ Validate fields presence",
															"if (queryParams.fields) {",
															"    const expectedFields = queryParams.fields.split(\",\");",
															"    pm.test(\"All items contain selected fields\", function () {",
															"        items.forEach((item, index) => {",
															"            expectedFields.forEach(field => {",
															"                pm.expect(item, `Missing '${field}' in item ${index}`).to.have.property(field);",
															"            });",
															"        });",
															"    });",
															"}",
															"",
															"// ✅ Validate limit enforcement",
															"if (queryParams.limit) {",
															"    const limit = Number(queryParams.limit);",
															"    pm.test(`Returned items should be <= limit (${limit})`, function () {",
															"        pm.expect(items.length).to.be.at.most(limit);",
															"    });",
															"}",
															"",
															"// ✅ Validate sorting",
															"if (queryParams.sort && queryParams.orderBy) {",
															"    const sortField = queryParams.sort;",
															"    const order = queryParams.orderBy.toUpperCase();",
															"",
															"    const actualValues = items.map(item => item[sortField]);",
															"    const sortedValues = [...actualValues].sort((a, b) => {",
															"        if (a === undefined || b === undefined) return 0;",
															"        if (typeof a === \"string\" && typeof b === \"string\") {",
															"            return a.localeCompare(b);",
															"        } else {",
															"            return a - b;",
															"        }",
															"    });",
															"",
															"    if (order === \"DESC\") sortedValues.reverse();",
															"",
															"    pm.test(`Items are sorted by '${sortField}' in ${order} order`, function () {",
															"        pm.expect(actualValues, \"Sorting mismatch\").to.eql(sortedValues);",
															"    });",
															"}",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Set headers dynamically from environment variables",
															"pm.request.headers.upsert({ key: \"Authorization\", value: pm.environment.get(\"Auth\") });",
															"pm.request.headers.upsert({ key: \"x-app-key\", value: pm.environment.get(\"x-app-key\") });",
															"pm.request.headers.upsert({ key: \"x-client-id\", value: pm.environment.get(\"x-client-id\") });",
															"",
															"// Full list of fields",
															"const allFields = [",
															"    \"sourcedId\",",
															"    \"status\",",
															"    \"dateLastModified\",",
															"    \"title\",",
															"    \"description\",",
															"    \"class\",",
															"    \"parentAssessmentLineItem\",",
															"    \"scoreScale\",",
															"    \"resultValueMin\",",
															"    \"resultValueMax\",",
															"    \"learningObjectiveSet\",",
															"    \"metadata\"",
															"];",
															"",
															"// Fields to exclude from sort and filter",
															"const excludedFields = [",
															"    \"scoreScale\",",
															"    \"metadata\",",
															"    \"parentAssessmentLineItem\",",
															"    \"class\",",
															"    \"learningObjectiveSet\"",
															"];",
															"",
															"// Filterable/sortable fields = allFields minus excludedFields",
															"const validSortAndFilterFields = allFields.filter(f => !excludedFields.includes(f));",
															"",
															"const orderByOptions = [\"ASC\", \"DESC\"];",
															"",
															"// Utility: Pick N unique random items from an array",
															"function getRandomItems(array, count) {",
															"    let shuffled = array.slice().sort(() => 0.5 - Math.random());",
															"    return shuffled.slice(0, count);",
															"}",
															"",
															"// Build a simple filter expression based on the field name",
															"function buildRandomFilter(field) {",
															"    switch (field) {",
															"        case \"status\":",
															"            return `status='active'`;",
															"        case \"resultValueMin\":",
															"            return `resultValueMin<'90'`;",
															"        case \"resultValueMax\":",
															"            return `resultValueMax>'50'`;",
															"        case \"dateLastModified\":",
															"            return `dateLastModified>'2024-01-01T00:00:00Z'`;",
															"        case \"title\":",
															"            return `title!='null'`;",
															"        case \"sourcedId\":",
															"            return `sourcedId!='null'`;",
															"        case \"description\":",
															"            return `description='null'`;",
															"        default:",
															"            return `${field}!='null'`;",
															"    }",
															"}",
															"",
															"// Pick 3 random fields for `fields` (from allFields, including excluded ones)",
															"let selectedFields = getRandomItems(allFields, 3).join(\",\");",
															"",
															"// Pick sort field and filter field only from allowed ones",
															"let sortField = getRandomItems(validSortAndFilterFields, 1)[0];",
															"let filterField = getRandomItems(validSortAndFilterFields, 1)[0];",
															"let filterExpression = buildRandomFilter(filterField);",
															"",
															"// Other params",
															"let orderBy = getRandomItems(orderByOptions, 1)[0];",
															"let limit = Math.floor(Math.random() * 10) + 5;",
															"let offset = Math.floor(Math.random() * 5);",
															"",
															"// Build query param object",
															"let queryParams = {",
															"    sort: sortField,",
															"    fields: selectedFields,",
															"    orderBy,",
															"    filter: filterExpression,",
															"    limit: limit.toString(),",
															"    offset: offset.toString()",
															"};",
															"",
															"// Convert to query string",
															"let queryString = Object.entries(queryParams)",
															"    .map(([key, value]) => `${key}=${encodeURIComponent(value)}`)",
															"    .join(\"&\");",
															"",
															"// Save full URL and query string",
															"let baseUrl = pm.environment.get(\"baseUrl\");",
															"let fullUrl = `${baseUrl}/ims/oneroster/gradebook/v1p2/assessmentLineItems?${queryString}`;",
															"",
															"pm.environment.set(\"fullRequestUrl\", fullUrl);",
															"pm.variables.set(\"queryParams\", queryString);",
															"",
															"console.log(\"Dynamic Query Params for AssessmentLineItems:\", queryParams);",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}{{pathPrefix}}/assessmentLineItems?{{queryParams}}",
													"host": [
														"{{URL}}{{pathPrefix}}"
													],
													"path": [
														"assessmentLineItems"
													],
													"query": [
														{
															"key": "{{queryParams}}",
															"value": null
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Validate API throws an error for request sent with invalid query params",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// ✅ Status check",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Set headers dynamically from environment variables",
															"pm.request.headers.upsert({ key: \"Authorization\", value: pm.environment.get(\"Auth\") });",
															"pm.request.headers.upsert({ key: \"x-app-key\", value: pm.environment.get(\"x-app-key\") });",
															"pm.request.headers.upsert({ key: \"x-client-id\", value: pm.environment.get(\"x-client-id\") });",
															"",
															"// Known valid fields",
															"const allFields = [",
															"    \"sourcedId\", \"status\", \"dateLastModified\", \"title\", \"description\",",
															"    \"class\", \"parentAssessmentLineItem\", \"scoreScale\", \"resultValueMin\", ",
															"    \"resultValueMax\", \"learningObjectiveSet\", \"metadata\"",
															"];",
															"",
															"// Invalid field names and values",
															"const invalidFields = [\"badField\", \"unknownParam\", \"123key\", \"field@\", \"☃️Field\"];",
															"const invalidSort = [\"sortBy123\", \">>>dateLastModified\", \"title*\", \"!!!!\"];",
															"const invalidOrderBy = [\"UPWARD\", \"DOWN\", \"RANDOM\", \"descend\"];",
															"const invalidFilterPatterns = [",
															"    \"score==25\", \"title==null\", \"status->active\", \"date<<2024\", \"resultValueMin>>>90\"",
															"];",
															"const invalidLimits = [-10, 0, 10000, \"abc\", \"!@#\"];",
															"const invalidOffsets = [-1, \"xyz\", 1.5, \"++\", null];",
															"",
															"// Utility to randomly pick N values",
															"function getRandomItems(array, count) {",
															"    let shuffled = array.slice().sort(() => 0.5 - Math.random());",
															"    return shuffled.slice(0, count);",
															"}",
															"",
															"// Generate 5 invalid combinations",
															"let invalidTestCases = [];",
															"",
															"for (let i = 0; i < 5; i++) {",
															"    const testCase = {",
															"        fields: getRandomItems(invalidFields.concat(allFields), 2).join(\",\"),",
															"        sort: getRandomItems(invalidSort.concat(invalidFields), 1)[0],",
															"        orderBy: getRandomItems(invalidOrderBy, 1)[0],",
															"        filter: getRandomItems(invalidFilterPatterns, 1)[0],",
															"        limit: getRandomItems(invalidLimits, 1)[0],",
															"        offset: getRandomItems(invalidOffsets, 1)[0]",
															"    };",
															"",
															"    // Assemble query string",
															"    let queryString = Object.entries(testCase)",
															"        .map(([key, value]) => `${key}=${encodeURIComponent(value)}`)",
															"        .join(\"&\");",
															"",
															"    invalidTestCases.push(queryString);",
															"}",
															"",
															"// Save them to Postman variables (or log for manual use)",
															"invalidTestCases.forEach((query, index) => {",
															"    pm.variables.set(`invalidQuery_${index + 1}`, query);",
															"    console.log(`Invalid Test Case ${index + 1}:`, query);",
															"});",
															"",
															"// Set the first one for immediate use",
															"let baseUrl = pm.environment.get(\"baseUrl\");",
															"let fullInvalidUrl = `${baseUrl}/ims/oneroster/gradebook/v1p2/assessmentLineItems?${invalidTestCases[0]}`;",
															"pm.environment.set(\"fullRequestUrl\", fullInvalidUrl);",
															"pm.variables.set(\"queryParams\", invalidTestCases[0]);",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}{{pathPrefix}}/assessmentLineItems?{{queryParams}}",
													"host": [
														"{{URL}}{{pathPrefix}}"
													],
													"path": [
														"assessmentLineItems"
													],
													"query": [
														{
															"key": "{{queryParams}}",
															"value": null
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "deleteAssessmentLineItem",
									"item": [
										{
											"name": "Validate successful deletion of existing Assessment LineItem",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Validate Status Code, It should be 204 No Content\", function () {",
															"    pm.expect([204]).to.include(pm.response.code, \"Unexpected status code\");",
															"});",
															"",
															"",
															"pm.test(\"Response body should be completely empty\", function () {",
															"    pm.expect(pm.response.text()).to.equal(\"\"); // Ensure response body is completely empty",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Set headers dynamically from environment variables",
															"pm.request.headers.upsert({ key: \"Authorization\", value: pm.environment.get(\"Auth\") });",
															"pm.request.headers.upsert({ key: \"x-app-key\", value: pm.environment.get(\"x-app-key\") });",
															"pm.request.headers.upsert({ key: \"x-client-id\", value: pm.environment.get(\"x-client-id\") });",
															"",
															"// Generate a random UUID for sourcedId",
															"function generateUUID() {",
															"    let dt = new Date().getTime();",
															"    let uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {",
															"        let r = (dt + Math.random() * 16) % 16 | 0;",
															"        dt = Math.floor(dt / 16);",
															"        return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);",
															"    });",
															"    return uuid;",
															"}",
															"",
															"const headers = {",
															"    'Authorization': pm.environment.get(\"Auth\"),",
															"    'x-app-key': pm.environment.get(\"x-app-key\"),",
															"    'x-client-id': pm.environment.get(\"x-client-id\"),",
															"    'Content-Type': 'application/json'",
															"};",
															"",
															"// Generate and store courseSourcedId",
															"let courseSourcedId = generateUUID();",
															"pm.environment.set(\"courseSourcedId\", courseSourcedId);",
															"console.log(\"Generated courseSourcedId: \" + courseSourcedId);",
															"",
															"// Generate current UTC timestamp in ISO format: 2025-01-29T06:51:57Z",
															"function getCurrentISOString() {",
															"    return new Date().toISOString().split('.')[0] + \"Z\";",
															"}",
															"",
															"// Set dynamic date variables",
															"let isoDateTime = getCurrentISOString(); // full timestamp",
															"let isoDateOnly = isoDateTime.split('T')[0]; // date only",
															"",
															"pm.environment.set(\"isoDateTime\", isoDateTime);",
															"pm.environment.set(\"isoDateOnly\", isoDateOnly);",
															"",
															"console.log(\"Generated ISO DateTime: \" + isoDateTime);",
															"console.log(\"Generated ISO Date Only: \" + isoDateOnly);",
															"",
															"",
															"// Define Course API URL",
															"let courseUrl = pm.environment.get(\"URL\") + pm.environment.get(\"customPathPrefix\")+\"/courses\";",
															"",
															"// Define Course API Request Body",
															"let courseRequestBody = {",
															"    \"sourcedId\": pm.environment.get(\"courseSourcedId\"), //required",
															"    \"status\": \"active\", //required",
															"    \"title\": \"QA\", //required",
															"    \"courseCode\": \"courseCode\" //required",
															"",
															"}",
															"",
															"",
															"// Make the Course POST request",
															"pm.sendRequest({",
															"    url: courseUrl,",
															"    method: 'POST',",
															"    header: headers,",
															"    body: {",
															"        mode: 'raw',",
															"        raw: JSON.stringify(courseRequestBody)",
															"    }",
															"}, function (err, res) {",
															"    if (err) {",
															"        console.error(\"POST Course API Error: \", err);",
															"        pm.environment.unset(\"courseSourcedId\"); // Clear sourcedId on failure",
															"        throw new Error(\"Course POST API request failed.\");",
															"    }",
															"",
															"    if (res.code !== 201) {  // Ensure status is 201 Created",
															"        console.error(\"Unexpected POST Course API Response Code: \" + res.code);",
															"        pm.environment.unset(\"courseSourcedId\"); // Clear sourcedId on failure",
															"        throw new Error(\"Course POST API did not return 201 Created.\");",
															"    }",
															"",
															"    console.log(\"Course POST API succeeded with status: \" + res.code);",
															"",
															"    // Define getAllOrgs API URL",
															"    let getAllOrgsUrl = pm.environment.get(\"URL\") + pm.environment.get(\"rosterPathPrefix\")+\"/orgs\";",
															"",
															"    // Make getAllOrgs Request",
															"    pm.sendRequest({",
															"        url: getAllOrgsUrl,",
															"        method: 'GET',",
															"        header: headers",
															"    }, function (err, res) {",
															"        if (err || res.code !== 200) {",
															"            console.error(\"GET Orgs API Failed. Code:\", res?.code || \"No response\", \"Error:\", err);",
															"            throw new Error(\"GET Orgs API request failed.\");",
															"        }",
															"",
															"        console.log(\"GET Orgs API succeeded with status:\", res.code);",
															"",
															"        let response = res.json();",
															"        let schoolOrgs = response.orgs.filter(org => org.type === \"SCHOOL\");",
															"",
															"        if (schoolOrgs.length === 0) {",
															"            throw new Error(\"No orgs of type 'SCHOOL' found.\");",
															"        }",
															"",
															"        // Get a random school sourcedId",
															"        let randomIndex = Math.floor(Math.random() * schoolOrgs.length);",
															"        let schoolSourcedId = schoolOrgs[randomIndex].sourcedId;",
															"",
															"        console.log(\"Selected school sourcedId: \" + schoolSourcedId);",
															"",
															"        // Save to environment variable for later use",
															"        pm.environment.set(\"school_sourcedId\", schoolSourcedId);",
															"",
															"        // Define getAllterms API URL",
															"        let getAllTermsUrl = pm.environment.get(\"URL\") + pm.environment.get(\"rosterPathPrefix\")+\"/terms\";",
															"",
															"        // Make getAllterms Request",
															"        pm.sendRequest({",
															"            url: getAllTermsUrl,",
															"            method: 'GET',",
															"            header: headers",
															"        }, function (err, res) {",
															"            if (err || res.code !== 200) {",
															"                console.error(\"GET TERMS API Failed. Code:\", res?.code || \"No response\", \"Error:\", err);",
															"                throw new Error(\"GET TERMS API request failed.\");",
															"            }",
															"",
															"            console.log(\"GET TERMS API succeeded with status:\", res.code);",
															"",
															"            let response = res.json();",
															"            let termSessions = response.academicSessions.filter(session => session.type === \"TERM\");",
															"",
															"            if (termSessions.length === 0) {",
															"                throw new Error(\"No academicSessions of type 'TERM' found.\");",
															"            }",
															"",
															"            // Select a random term sourcedId",
															"            let randomIndex = Math.floor(Math.random() * termSessions.length);",
															"            let termSourcedId = termSessions[randomIndex].sourcedId;",
															"",
															"            console.log(\"Selected TERM sourcedId: \" + termSourcedId);",
															"",
															"            // Save to environment variable",
															"            pm.environment.set(\"term_sourcedId\", termSourcedId);",
															"",
															"            // Generate and store classSourcedId",
															"            let classSourcedId = generateUUID();",
															"            pm.environment.set(\"classSourcedId\", classSourcedId);",
															"            console.log(\"Generated classSourcedId: \" + classSourcedId);",
															"",
															"            // Define Class API URL",
															"            let classUrl = pm.environment.get(\"URL\") + pm.environment.get(\"customPathPrefix\")+\"/classes\";",
															"",
															"            // Define Class API Request Body",
															"            let classRequestBody = {",
															"                \"sourcedId\": pm.environment.get(\"classSourcedId\"), //Required",
															"                \"status\": \"active\", //Required",
															"                \"title\": \"title\", //Required",
															"                \"classType\": \"SCHEDULED\", //Required",
															"                \"course\": { //required",
															"                    \"href\": \"/courses/\" + pm.environment.get(\"courseSourcedId\"),",
															"                    \"sourcedId\": pm.environment.get(\"courseSourcedId\"),",
															"                    \"type\": \"course\"",
															"                },",
															"                \"school\": { //required",
															"                    \"href\": \"/org/\" + pm.environment.get(\"school_sourcedId\"),",
															"                    \"sourcedId\": pm.environment.get(\"school_sourcedId\"),",
															"                    \"type\": \"org\"",
															"                },",
															"                \"terms\": [ //required",
															"                    {",
															"                        \"href\": \"/academicSession/\" + pm.environment.get(\"term_sourcedId\"),",
															"                        \"sourcedId\":pm.environment.get(\"term_sourcedId\"),",
															"                        \"type\": \"academicSession\"",
															"                    }",
															"                ]",
															"            }",
															"",
															"            // Make the Class POST request",
															"            pm.sendRequest({",
															"                url: classUrl,",
															"                method: 'POST',",
															"                header: headers,",
															"                body: {",
															"                    mode: 'raw',",
															"                    raw: JSON.stringify(classRequestBody)",
															"                }",
															"            }, function (err, res) {",
															"                if (err) {",
															"                    console.error(\"POST Class API Error: \", err);",
															"                    pm.environment.unset(\"classSourcedId\"); // Clear sourcedId on failure",
															"                    throw new Error(\"Class POST API request failed.\");",
															"                }",
															"",
															"                if (res.code !== 201) {  // Ensure status is 201 Created",
															"                    console.error(\"Unexpected POST Class API Response Code: \" + res.code);",
															"                    pm.environment.unset(\"classSourcedId\"); // Clear sourcedId on failure",
															"                    throw new Error(\"POST Class API did not return 201 Created.\");",
															"                }",
															"",
															"                console.log(\"POST Class API succeeded with status: \" + res.code);",
															"",
															"                // --- Subsequent Requests (ScoreScale, AssessmentLineItem) ---",
															"                // Place the pm.sendRequest calls for ScoreScale and AssessmentLineItem here,",
															"                // ensuring they run only after the Class POST request is successful.",
															"",
															"                // Generate and store sourcedId for ScoreScale",
															"                let scoreScaleSourcedId = generateUUID();",
															"                pm.environment.set(\"scoreScaleSourcedId\", scoreScaleSourcedId);",
															"                console.log(\"Generated scoreScaleSourcedId: \" + scoreScaleSourcedId);",
															"",
															"                // Define ScoreScale API URL",
															"                let scoreScaleUrl = pm.environment.get(\"URL\") + pm.environment.get(\"pathPrefix\")+\"/scoreScales/\"+ scoreScaleSourcedId;",
															"",
															"                // Define ScoreScale API Request Body",
															"                let scoreScaleRequestBody = {",
															"                    \"scoreScale\": {",
															"                        \"sourcedId\":pm.environment.get(\"scoreScaleSourcedId\"), //required",
															"                        \"status\": \"active\", //required",
															"                        \"dateLastModified\": isoDateTime, //required",
															"                        \"metadata\": {",
															"                            \"test\": \"metadata\"",
															"                        },",
															"                        \"title\": \"QATestProd\", //required",
															"                        \"type\": \"QATestProd\", //required",
															"                        \"course\": {",
															"                            \"href\": \"/course/\" + pm.environment.get(\"courseSourcedId\"),",
															"                            \"sourcedId\": pm.environment.get(\"courseSourcedId\"),",
															"                            \"type\": \"course\"",
															"                        },",
															"                        \"class\": {  //required",
															"                            \"href\": \"/classes/\" + pm.environment.get(\"classSourcedId\"),",
															"                            \"sourcedId\": pm.environment.get(\"classSourcedId\"),",
															"                            \"type\": \"class\"",
															"                        },",
															"                        \"scoreScaleValue\": [ //required",
															"                            {",
															"                                \"itemValueLHS\": \"0-57\",",
															"                                \"itemValueRHS\": \"F\"",
															"                            },",
															"                            {",
															"                                \"itemValueLHS\": \"60-69\",",
															"                                \"itemValueRHS\": \"D\"",
															"                            },",
															"                            {",
															"                                \"itemValueLHS\": \"70-79\",",
															"                                \"itemValueRHS\": \"C\"",
															"                            },",
															"                            {",
															"                                \"itemValueLHS\": \"80-89\",",
															"                                \"itemValueRHS\": \"B\"",
															"                            },",
															"                            {",
															"                                \"itemValueLHS\": \"90-100\",",
															"                                \"itemValueRHS\": \"A\"",
															"                            }",
															"                        ]",
															"                    }",
															"                }",
															"",
															"                // Make the PUT ScoreScale request",
															"                pm.sendRequest({",
															"                    url: scoreScaleUrl,",
															"                    method: 'PUT',",
															"                    header: headers,",
															"                    body: {",
															"                        mode: 'raw',",
															"                        raw: JSON.stringify(scoreScaleRequestBody)",
															"                    }",
															"                }, function (err, res) {",
															"                    if (err) {",
															"                        console.error(\"PUT ScoreScale API Error: \", err);",
															"                        pm.environment.unset(\"scoreScaleSourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT ScoreScale API request failed.\");",
															"                    }",
															"",
															"                    if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
															"                        console.error(\"Unexpected PUT ScoreScale API Response Code: \" + res.code);",
															"                        pm.environment.unset(\"scoreScaleSourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT ScoreScale API did not return 200 or 201.\");",
															"                    }",
															"",
															"                    console.log(\"PUT ScoreScale API succeeded with status: \" + res.code);",
															"",
															"                    // Generate and store sourcedId for AssessmentLineItem",
															"                    let assessmentLineItemeSourcedId = generateUUID();",
															"                    pm.environment.set(\"assessmentLineItemeSourcedId\", assessmentLineItemeSourcedId);",
															"                    console.log(\"Generated assessmentLineItemeSourcedId: \" + assessmentLineItemeSourcedId);",
															"",
															"                    // Define putAssessmentLineItems API URL",
															"                    let assessmentLineItemsUrl = pm.environment.get(\"URL\") + pm.environment.get(\"pathPrefix\")+\"/assessmentLineItems/\"+ assessmentLineItemeSourcedId;",
															"",
															"                    // Define putAssessmentLineItems API Request Body",
															"                    let assessmentLineItemRequestBody = {",
															"                        \"assessmentLineItem\": {",
															"                            \"sourcedId\": pm.environment.get(\"assessmentLineItemeSourcedId\"),",
															"                            \"status\": \"active\",",
															"                            \"dateLastModified\": isoDateTime, // Use the dynamically generated timestamp",
															"                            \"title\": \"Good Effort\"",
															"                        }",
															"                    }",
															"",
															"                    // Make the PUT AssessmentLineItems request",
															"                    pm.sendRequest({",
															"                        url: assessmentLineItemsUrl,",
															"                        method: 'PUT',",
															"                        header: headers,",
															"                        body: {",
															"                            mode: 'raw',",
															"                            raw: JSON.stringify(assessmentLineItemRequestBody)",
															"                        }",
															"                    }, function (err, res) {",
															"                        if (err) {",
															"                            console.error(\"PUT AssessmentLineItems API Error: \", err);",
															"                            pm.environment.unset(\"assessmentLineItemeSourcedId\"); // Clear sourcedId on failure",
															"                            throw new Error(\"PUT AssessmentLineItems API request failed.\");",
															"                        }",
															"",
															"                        if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
															"                            console.error(\"Unexpected PUT AssessmentLineItems API Response Code: \" + res.code);",
															"                            pm.environment.unset(\"assessmentLineItemeSourcedId\"); // Clear sourcedId on failure",
															"                            throw new Error(\"PUT AssessmentLineItems API did not return 200 or 201.\");",
															"                        }",
															"",
															"                        console.log(\"PUT AssessmentLineItems API succeeded with status: \" + res.code);",
															"",
															"",
															"                        ",
															"",
															"                        let uuid = generateUUID();",
															"                        pm.environment.set(\"sourcedId\", uuid);",
															"",
															"                         // Define putAssessmentLineItem API URL",
															"                        let Url = pm.environment.get(\"URL\") + pm.environment.get(\"pathPrefix\")+\"/assessmentLineItems/\"+ pm.environment.get(\"sourcedId\");",
															"",
															"                        // Define putAssessmentLineItems API Request Body",
															"                    let putAssessmentLineItemRequestBody = {",
															"    \"assessmentLineItem\": {",
															"        \"sourcedId\": pm.environment.get(\"sourcedId\"),",
															"        \"status\": \"active\",",
															"        \"dateLastModified\": isoDateTime,",
															"        \"metadata\": {",
															"            \"extensions\": {",
															"                \"fields\": {",
															"                    \"type\": \"PLACEMENT_TEST\",",
															"                    \"adaptive\": true,",
															"                    \"storageName\": \"storageName\",",
															"                    \"subject\": \"subject\",",
															"                    \"creator\": [],",
															"                    \"mediaType\": \"mediaType\",",
															"                    \"keywords\": null,",
															"                    \"datePublished\": null,",
															"                    \"dateToActivate\": null,",
															"                    \"dateToShow\": null,",
															"                    \"dateToStartOn\": null,",
															"                    \"maxAttempts\": null,",
															"                    \"maxSubmits\": null,",
															"                    \"version\": null,",
															"                    \"dueDate\": null,",
															"                    \"assignDate\": null,",
															"                    \"schoolId\": null,",
															"                    \"academicSessionId\": null,",
															"                    \"categoryId\": null,",
															"                    \"applicationId\": null,",
															"                    \"competencyId\": null",
															"                }",
															"            }",
															"        },",
															"        \"title\": \"AssessmentLineItem\",",
															"        \"description\": \"This is QA POSTMAN API Automation generated \",",
															"        \"class\": {",
															"            \"href\": \"https://example.com\",",
															"            \"sourcedId\": pm.environment.get(\"classSourcedId\"),",
															"            \"type\": \"class\"",
															"        },",
															"        \"parentAssessmentLineItem\": {",
															"            \"href\": \"/classes/b2a85993-8b03-4560-8ab3-d39b56570823\",",
															"            \"sourcedId\": pm.environment.get(\"assessmentLineItemeSourcedId\"), ",
															"            \"type\": \"assessmentLineItem\"",
															"        },",
															"        \"scoreScale\": {",
															"            \"href\": \"https://example.com/scoreScale\",",
															"            \"sourcedId\": pm.environment.get(\"scoreScaleSourcedId\"),",
															"            \"type\": \"scoreScale\"",
															"        },",
															"        \"resultValueMin\": 90,",
															"        \"resultValueMax\": 100,",
															"        \"learningObjectiveSet\": null",
															"    }",
															"}",
															"        let putAssessmentLineitemRequestBody = putAssessmentLineItemRequestBody.assessmentLineItem;",
															"",
															"        pm.environment.set(\"putAssessmentLineitemRequestBody\", JSON.stringify(putAssessmentLineitemRequestBody)); ",
															"",
															"                    // Make the PUT AssessmentLineItems request",
															"                    pm.sendRequest({",
															"                        url: Url,",
															"                        method: 'PUT',",
															"                        header: headers,",
															"                        body: {",
															"                            mode: 'raw',",
															"                            raw: JSON.stringify(putAssessmentLineItemRequestBody)",
															"                        }",
															"                        ",
															"                    }, function (err, res) {",
															"                        if (err) {",
															"                            console.error(\"PUT AssessmentLineItems API Error: \", err);",
															"                            pm.environment.unset(\"assessmentLineItemeSourcedId\"); // Clear sourcedId on failure",
															"                            throw new Error(\"PUT AssessmentLineItems API request failed.\");",
															"                        }",
															"",
															"                        if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
															"                            console.error(\"Unexpected PUT AssessmentLineItems API Response Code: \" + res.code);",
															"                            pm.environment.unset(\"assessmentLineItemeSourcedId\"); // Clear sourcedId on failure",
															"                            throw new Error(\"PUT AssessmentLineItems API did not return 200 or 201.\");",
															"                        }",
															"",
															"                        console.log(\"PUT AssessmentLineItems API succeeded with status: \" + res.code);",
															"",
															"",
															"",
															"",
															"",
															"                    });",
															"                    });   ",
															"                });",
															"            });",
															"        });",
															"    });",
															"});",
															"",
															"",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}{{pathPrefix}}/assessmentLineItems/{{sourcedId}}",
													"host": [
														"{{URL}}{{pathPrefix}}"
													],
													"path": [
														"assessmentLineItems",
														"{{sourcedId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify API throws an error for sourcedId which is already deleted",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"DELETE API should return 404 Not Found\", function () {",
															"  pm.response.to.have.status(404);",
															"});",
															"",
															"",
															"// Parse the JSON response",
															"let jsonData = pm.response.json();",
															"",
															"let requestedSourcedId = pm.environment.get(\"sourcedId\");",
															"",
															"// Construct expected error message",
															"let expectedDescription = `AssessmentLineItem with the sourced ID: ${requestedSourcedId} does not exist or it may have already been deleted.`;",
															"",
															"",
															"// Validate the error message exactly",
															"pm.test(\"Verify Error message and it should matches with requested sourcedId \", function () {",
															"    pm.expect(jsonData.imsx_description).to.eql(expectedDescription);",
															"});",
															"",
															"",
															"// Validate root-level keys",
															"pm.test(\"Response has all top-level keys\", function () {",
															"    pm.expect(jsonData).to.have.all.keys(\"imsx_codeMajor\", \"imsx_severity\", \"imsx_description\", \"imsx_CodeMinor\");",
															"});",
															"",
															"// Check data types of top-level fields",
															"pm.test(\"Top-level keys have correct types\", function () {",
															"    pm.expect(jsonData.imsx_codeMajor).to.be.a(\"string\");",
															"    pm.expect(jsonData.imsx_severity).to.be.a(\"string\");",
															"    pm.expect(jsonData.imsx_description).to.be.a(\"string\");",
															"    pm.expect(jsonData.imsx_CodeMinor).to.be.an(\"object\");",
															"});",
															"",
															"// Validate imsx_CodeMinor structure",
															"pm.test(\"imsx_CodeMinor has expected structure\", function () {",
															"    pm.expect(jsonData.imsx_CodeMinor).to.have.property(\"imsx_codeMinorField\");",
															"    pm.expect(jsonData.imsx_CodeMinor.imsx_codeMinorField).to.be.an(\"array\");",
															"});",
															"",
															"// Validate fields inside imsx_codeMinorField",
															"pm.test(\"imsx_codeMinorField items have required keys\", function () {",
															"    let fields = jsonData.imsx_CodeMinor.imsx_codeMinorField;",
															"    ",
															"    fields.forEach(field => {",
															"        pm.expect(field).to.have.all.keys(\"imsx_codeMinorFieldName\", \"imsx_codeMinorFieldValue\");",
															"        pm.expect(field.imsx_codeMinorFieldName).to.be.a(\"string\");",
															"        pm.expect(field.imsx_codeMinorFieldValue).to.be.a(\"string\");",
															"    });",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Set headers dynamically from environment variables",
															"pm.request.headers.upsert({ key: \"Authorization\", value: pm.environment.get(\"Auth\") });",
															"pm.request.headers.upsert({ key: \"x-app-key\", value: pm.environment.get(\"x-app-key\") });",
															"pm.request.headers.upsert({ key: \"x-client-id\", value: pm.environment.get(\"x-client-id\") });",
															"",
															"// Generate a random UUID for sourcedId",
															"function generateUUID() {",
															"    let dt = new Date().getTime();",
															"    let uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {",
															"        let r = (dt + Math.random() * 16) % 16 | 0;",
															"        dt = Math.floor(dt / 16);",
															"        return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);",
															"    });",
															"    return uuid;",
															"}",
															"",
															"const headers = {",
															"    'Authorization': pm.environment.get(\"Auth\"),",
															"    'x-app-key': pm.environment.get(\"x-app-key\"),",
															"    'x-client-id': pm.environment.get(\"x-client-id\"),",
															"    'Content-Type': 'application/json'",
															"};",
															"",
															"// Generate and store courseSourcedId",
															"let courseSourcedId = generateUUID();",
															"pm.environment.set(\"courseSourcedId\", courseSourcedId);",
															"console.log(\"Generated courseSourcedId: \" + courseSourcedId);",
															"",
															"// Generate current UTC timestamp in ISO format: 2025-01-29T06:51:57Z",
															"function getCurrentISOString() {",
															"    return new Date().toISOString().split('.')[0] + \"Z\";",
															"}",
															"",
															"// Set dynamic date variables",
															"let isoDateTime = getCurrentISOString(); // full timestamp",
															"let isoDateOnly = isoDateTime.split('T')[0]; // date only",
															"",
															"pm.environment.set(\"isoDateTime\", isoDateTime);",
															"pm.environment.set(\"isoDateOnly\", isoDateOnly);",
															"",
															"console.log(\"Generated ISO DateTime: \" + isoDateTime);",
															"console.log(\"Generated ISO Date Only: \" + isoDateOnly);",
															"",
															"",
															"// Define Course API URL",
															"let courseUrl = pm.environment.get(\"URL\") + pm.environment.get(\"customPathPrefix\")+\"/courses\";",
															"",
															"// Define Course API Request Body",
															"let courseRequestBody = {",
															"    \"sourcedId\": pm.environment.get(\"courseSourcedId\"), //required",
															"    \"status\": \"active\", //required",
															"    \"title\": \"QA\", //required",
															"    \"courseCode\": \"courseCode\" //required",
															"",
															"}",
															"",
															"",
															"// Make the Course POST request",
															"pm.sendRequest({",
															"    url: courseUrl,",
															"    method: 'POST',",
															"    header: headers,",
															"    body: {",
															"        mode: 'raw',",
															"        raw: JSON.stringify(courseRequestBody)",
															"    }",
															"}, function (err, res) {",
															"    if (err) {",
															"        console.error(\"POST Course API Error: \", err);",
															"        pm.environment.unset(\"courseSourcedId\"); // Clear sourcedId on failure",
															"        throw new Error(\"Course POST API request failed.\");",
															"    }",
															"",
															"    if (res.code !== 201) {  // Ensure status is 201 Created",
															"        console.error(\"Unexpected POST Course API Response Code: \" + res.code);",
															"        pm.environment.unset(\"courseSourcedId\"); // Clear sourcedId on failure",
															"        throw new Error(\"Course POST API did not return 201 Created.\");",
															"    }",
															"",
															"    console.log(\"Course POST API succeeded with status: \" + res.code);",
															"",
															"    // Define getAllOrgs API URL",
															"    let getAllOrgsUrl = pm.environment.get(\"URL\") + pm.environment.get(\"rosterPathPrefix\")+\"/orgs\";",
															"",
															"    // Make getAllOrgs Request",
															"    pm.sendRequest({",
															"        url: getAllOrgsUrl,",
															"        method: 'GET',",
															"        header: headers",
															"    }, function (err, res) {",
															"        if (err || res.code !== 200) {",
															"            console.error(\"GET Orgs API Failed. Code:\", res?.code || \"No response\", \"Error:\", err);",
															"            throw new Error(\"GET Orgs API request failed.\");",
															"        }",
															"",
															"        console.log(\"GET Orgs API succeeded with status:\", res.code);",
															"",
															"        let response = res.json();",
															"        let schoolOrgs = response.orgs.filter(org => org.type === \"SCHOOL\");",
															"",
															"        if (schoolOrgs.length === 0) {",
															"            throw new Error(\"No orgs of type 'SCHOOL' found.\");",
															"        }",
															"",
															"        // Get a random school sourcedId",
															"        let randomIndex = Math.floor(Math.random() * schoolOrgs.length);",
															"        let schoolSourcedId = schoolOrgs[randomIndex].sourcedId;",
															"",
															"        console.log(\"Selected school sourcedId: \" + schoolSourcedId);",
															"",
															"        // Save to environment variable for later use",
															"        pm.environment.set(\"school_sourcedId\", schoolSourcedId);",
															"",
															"        // Define getAllterms API URL",
															"        let getAllTermsUrl = pm.environment.get(\"URL\") + pm.environment.get(\"rosterPathPrefix\")+\"/terms\";",
															"",
															"        // Make getAllterms Request",
															"        pm.sendRequest({",
															"            url: getAllTermsUrl,",
															"            method: 'GET',",
															"            header: headers",
															"        }, function (err, res) {",
															"            if (err || res.code !== 200) {",
															"                console.error(\"GET TERMS API Failed. Code:\", res?.code || \"No response\", \"Error:\", err);",
															"                throw new Error(\"GET TERMS API request failed.\");",
															"            }",
															"",
															"            console.log(\"GET TERMS API succeeded with status:\", res.code);",
															"",
															"            let response = res.json();",
															"            let termSessions = response.academicSessions.filter(session => session.type === \"TERM\");",
															"",
															"            if (termSessions.length === 0) {",
															"                throw new Error(\"No academicSessions of type 'TERM' found.\");",
															"            }",
															"",
															"            // Select a random term sourcedId",
															"            let randomIndex = Math.floor(Math.random() * termSessions.length);",
															"            let termSourcedId = termSessions[randomIndex].sourcedId;",
															"",
															"            console.log(\"Selected TERM sourcedId: \" + termSourcedId);",
															"",
															"            // Save to environment variable",
															"            pm.environment.set(\"term_sourcedId\", termSourcedId);",
															"",
															"            // Generate and store classSourcedId",
															"            let classSourcedId = generateUUID();",
															"            pm.environment.set(\"classSourcedId\", classSourcedId);",
															"            console.log(\"Generated classSourcedId: \" + classSourcedId);",
															"",
															"            // Define Class API URL",
															"            let classUrl = pm.environment.get(\"URL\") + pm.environment.get(\"customPathPrefix\")+\"/classes\";",
															"",
															"            // Define Class API Request Body",
															"            let classRequestBody = {",
															"                \"sourcedId\": pm.environment.get(\"classSourcedId\"), //Required",
															"                \"status\": \"active\", //Required",
															"                \"title\": \"title\", //Required",
															"                \"classType\": \"SCHEDULED\", //Required",
															"                \"course\": { //required",
															"                    \"href\": \"/courses/\" + pm.environment.get(\"courseSourcedId\"),",
															"                    \"sourcedId\": pm.environment.get(\"courseSourcedId\"),",
															"                    \"type\": \"course\"",
															"                },",
															"                \"school\": { //required",
															"                    \"href\": \"/org/\" + pm.environment.get(\"school_sourcedId\"),",
															"                    \"sourcedId\": pm.environment.get(\"school_sourcedId\"),",
															"                    \"type\": \"org\"",
															"                },",
															"                \"terms\": [ //required",
															"                    {",
															"                        \"href\": \"/academicSession/\" + pm.environment.get(\"term_sourcedId\"),",
															"                        \"sourcedId\":pm.environment.get(\"term_sourcedId\"),",
															"                        \"type\": \"academicSession\"",
															"                    }",
															"                ]",
															"            }",
															"",
															"            // Make the Class POST request",
															"            pm.sendRequest({",
															"                url: classUrl,",
															"                method: 'POST',",
															"                header: headers,",
															"                body: {",
															"                    mode: 'raw',",
															"                    raw: JSON.stringify(classRequestBody)",
															"                }",
															"            }, function (err, res) {",
															"                if (err) {",
															"                    console.error(\"POST Class API Error: \", err);",
															"                    pm.environment.unset(\"classSourcedId\"); // Clear sourcedId on failure",
															"                    throw new Error(\"Class POST API request failed.\");",
															"                }",
															"",
															"                if (res.code !== 201) {  // Ensure status is 201 Created",
															"                    console.error(\"Unexpected POST Class API Response Code: \" + res.code);",
															"                    pm.environment.unset(\"classSourcedId\"); // Clear sourcedId on failure",
															"                    throw new Error(\"POST Class API did not return 201 Created.\");",
															"                }",
															"",
															"                console.log(\"POST Class API succeeded with status: \" + res.code);",
															"",
															"                // --- Subsequent Requests (ScoreScale, AssessmentLineItem) ---",
															"                // Place the pm.sendRequest calls for ScoreScale and AssessmentLineItem here,",
															"                // ensuring they run only after the Class POST request is successful.",
															"",
															"                // Generate and store sourcedId for ScoreScale",
															"                let scoreScaleSourcedId = generateUUID();",
															"                pm.environment.set(\"scoreScaleSourcedId\", scoreScaleSourcedId);",
															"                console.log(\"Generated scoreScaleSourcedId: \" + scoreScaleSourcedId);",
															"",
															"                // Define ScoreScale API URL",
															"                let scoreScaleUrl = pm.environment.get(\"URL\") + pm.environment.get(\"pathPrefix\")+\"/scoreScales/\"+ scoreScaleSourcedId;",
															"",
															"                // Define ScoreScale API Request Body",
															"                let scoreScaleRequestBody = {",
															"                    \"scoreScale\": {",
															"                        \"sourcedId\":pm.environment.get(\"scoreScaleSourcedId\"), //required",
															"                        \"status\": \"active\", //required",
															"                        \"dateLastModified\": isoDateTime, //required",
															"                        \"metadata\": {",
															"                            \"test\": \"metadata\"",
															"                        },",
															"                        \"title\": \"QATestProd\", //required",
															"                        \"type\": \"QATestProd\", //required",
															"                        \"course\": {",
															"                            \"href\": \"/course/\" + pm.environment.get(\"courseSourcedId\"),",
															"                            \"sourcedId\": pm.environment.get(\"courseSourcedId\"),",
															"                            \"type\": \"course\"",
															"                        },",
															"                        \"class\": {  //required",
															"                            \"href\": \"/classes/\" + pm.environment.get(\"classSourcedId\"),",
															"                            \"sourcedId\": pm.environment.get(\"classSourcedId\"),",
															"                            \"type\": \"class\"",
															"                        },",
															"                        \"scoreScaleValue\": [ //required",
															"                            {",
															"                                \"itemValueLHS\": \"0-57\",",
															"                                \"itemValueRHS\": \"F\"",
															"                            },",
															"                            {",
															"                                \"itemValueLHS\": \"60-69\",",
															"                                \"itemValueRHS\": \"D\"",
															"                            },",
															"                            {",
															"                                \"itemValueLHS\": \"70-79\",",
															"                                \"itemValueRHS\": \"C\"",
															"                            },",
															"                            {",
															"                                \"itemValueLHS\": \"80-89\",",
															"                                \"itemValueRHS\": \"B\"",
															"                            },",
															"                            {",
															"                                \"itemValueLHS\": \"90-100\",",
															"                                \"itemValueRHS\": \"A\"",
															"                            }",
															"                        ]",
															"                    }",
															"                }",
															"",
															"                // Make the PUT ScoreScale request",
															"                pm.sendRequest({",
															"                    url: scoreScaleUrl,",
															"                    method: 'PUT',",
															"                    header: headers,",
															"                    body: {",
															"                        mode: 'raw',",
															"                        raw: JSON.stringify(scoreScaleRequestBody)",
															"                    }",
															"                }, function (err, res) {",
															"                    if (err) {",
															"                        console.error(\"PUT ScoreScale API Error: \", err);",
															"                        pm.environment.unset(\"scoreScaleSourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT ScoreScale API request failed.\");",
															"                    }",
															"",
															"                    if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
															"                        console.error(\"Unexpected PUT ScoreScale API Response Code: \" + res.code);",
															"                        pm.environment.unset(\"scoreScaleSourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT ScoreScale API did not return 200 or 201.\");",
															"                    }",
															"",
															"                    console.log(\"PUT ScoreScale API succeeded with status: \" + res.code);",
															"",
															"                    // Generate and store sourcedId for AssessmentLineItem",
															"                    let assessmentLineItemeSourcedId = generateUUID();",
															"                    pm.environment.set(\"assessmentLineItemeSourcedId\", assessmentLineItemeSourcedId);",
															"                    console.log(\"Generated assessmentLineItemeSourcedId: \" + assessmentLineItemeSourcedId);",
															"",
															"                    // Define putAssessmentLineItems API URL",
															"                    let assessmentLineItemsUrl = pm.environment.get(\"URL\") + pm.environment.get(\"pathPrefix\")+\"/assessmentLineItems/\"+ assessmentLineItemeSourcedId;",
															"",
															"                    // Define putAssessmentLineItems API Request Body",
															"                    let assessmentLineItemRequestBody = {",
															"                        \"assessmentLineItem\": {",
															"                            \"sourcedId\": pm.environment.get(\"assessmentLineItemeSourcedId\"),",
															"                            \"status\": \"active\",",
															"                            \"dateLastModified\": isoDateTime, // Use the dynamically generated timestamp",
															"                            \"title\": \"Good Effort\"",
															"                        }",
															"                    }",
															"",
															"                    // Make the PUT AssessmentLineItems request",
															"                    pm.sendRequest({",
															"                        url: assessmentLineItemsUrl,",
															"                        method: 'PUT',",
															"                        header: headers,",
															"                        body: {",
															"                            mode: 'raw',",
															"                            raw: JSON.stringify(assessmentLineItemRequestBody)",
															"                        }",
															"                    }, function (err, res) {",
															"                        if (err) {",
															"                            console.error(\"PUT AssessmentLineItems API Error: \", err);",
															"                            pm.environment.unset(\"assessmentLineItemeSourcedId\"); // Clear sourcedId on failure",
															"                            throw new Error(\"PUT AssessmentLineItems API request failed.\");",
															"                        }",
															"",
															"                        if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
															"                            console.error(\"Unexpected PUT AssessmentLineItems API Response Code: \" + res.code);",
															"                            pm.environment.unset(\"assessmentLineItemeSourcedId\"); // Clear sourcedId on failure",
															"                            throw new Error(\"PUT AssessmentLineItems API did not return 200 or 201.\");",
															"                        }",
															"",
															"                        console.log(\"PUT AssessmentLineItems API succeeded with status: \" + res.code);",
															"",
															"",
															"                        ",
															"",
															"                        let uuid = generateUUID();",
															"                        pm.environment.set(\"sourcedId\", uuid);",
															"",
															"                         // Define putAssessmentLineItem API URL",
															"                        let Url = pm.environment.get(\"URL\") + pm.environment.get(\"pathPrefix\")+\"/assessmentLineItems/\"+ pm.environment.get(\"sourcedId\");",
															"",
															"                        // Define putAssessmentLineItems API Request Body",
															"                    let putAssessmentLineItemRequestBody = {",
															"    \"assessmentLineItem\": {",
															"        \"sourcedId\": pm.environment.get(\"sourcedId\"),",
															"        \"status\": \"active\",",
															"        \"dateLastModified\": isoDateTime,",
															"        \"metadata\": {",
															"            \"extensions\": {",
															"                \"fields\": {",
															"                    \"type\": \"PLACEMENT_TEST\",",
															"                    \"adaptive\": true,",
															"                    \"storageName\": \"storageName\",",
															"                    \"subject\": \"subject\",",
															"                    \"creator\": [],",
															"                    \"mediaType\": \"mediaType\",",
															"                    \"keywords\": null,",
															"                    \"datePublished\": null,",
															"                    \"dateToActivate\": null,",
															"                    \"dateToShow\": null,",
															"                    \"dateToStartOn\": null,",
															"                    \"maxAttempts\": null,",
															"                    \"maxSubmits\": null,",
															"                    \"version\": null,",
															"                    \"dueDate\": null,",
															"                    \"assignDate\": null,",
															"                    \"schoolId\": null,",
															"                    \"academicSessionId\": null,",
															"                    \"categoryId\": null,",
															"                    \"applicationId\": null,",
															"                    \"competencyId\": null",
															"                }",
															"            }",
															"        },",
															"        \"title\": \"AssessmentLineItem\",",
															"        \"description\": \"This is QA POSTMAN API Automation generated \",",
															"        \"class\": {",
															"            \"href\": \"https://example.com\",",
															"            \"sourcedId\": pm.environment.get(\"classSourcedId\"),",
															"            \"type\": \"class\"",
															"        },",
															"        \"parentAssessmentLineItem\": {",
															"            \"href\": \"/classes/b2a85993-8b03-4560-8ab3-d39b56570823\",",
															"            \"sourcedId\": pm.environment.get(\"assessmentLineItemeSourcedId\"), ",
															"            \"type\": \"assessmentLineItem\"",
															"        },",
															"        \"scoreScale\": {",
															"            \"href\": \"https://example.com/scoreScale\",",
															"            \"sourcedId\": pm.environment.get(\"scoreScaleSourcedId\"),",
															"            \"type\": \"scoreScale\"",
															"        },",
															"        \"resultValueMin\": 90,",
															"        \"resultValueMax\": 100,",
															"        \"learningObjectiveSet\": null",
															"    }",
															"}",
															"        let putAssessmentLineitemRequestBody = putAssessmentLineItemRequestBody.assessmentLineItem;",
															"",
															"        pm.environment.set(\"putAssessmentLineitemRequestBody\", JSON.stringify(putAssessmentLineitemRequestBody)); ",
															"",
															"                    // Make the PUT AssessmentLineItems request",
															"                    pm.sendRequest({",
															"                        url: Url,",
															"                        method: 'PUT',",
															"                        header: headers,",
															"                        body: {",
															"                            mode: 'raw',",
															"                            raw: JSON.stringify(putAssessmentLineItemRequestBody)",
															"                        }",
															"                        ",
															"                    }, function (err, res) {",
															"                        if (err) {",
															"                            console.error(\"PUT AssessmentLineItems API Error: \", err);",
															"                            pm.environment.unset(\"assessmentLineItemeSourcedId\"); // Clear sourcedId on failure",
															"                            throw new Error(\"PUT AssessmentLineItems API request failed.\");",
															"                        }",
															"",
															"                        if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
															"                            console.error(\"Unexpected PUT AssessmentLineItems API Response Code: \" + res.code);",
															"                            pm.environment.unset(\"assessmentLineItemeSourcedId\"); // Clear sourcedId on failure",
															"                            throw new Error(\"PUT AssessmentLineItems API did not return 200 or 201.\");",
															"                        }",
															"",
															"                        console.log(\"PUT AssessmentLineItems API succeeded with status: \" + res.code);",
															"",
															"                        // Define deleteAssessmentLineItem API URL",
															"                        let deleteAssessmentLineItemUrl = pm.environment.get(\"URL\") + pm.environment.get(\"pathPrefix\")+\"/assessmentLineItems/\"+ pm.environment.get(\"sourcedId\");",
															"",
															"                        //Make DELETE AssessmentLineItem API Request",
															"                        pm.sendRequest({",
															"                            url: deleteAssessmentLineItemUrl,",
															"                            method: 'DELETE',",
															"                            header: headers",
															"                            }, function (err, res) {",
															"                            if (err || res.code !== 204) {",
															"                             console.error(\"DELETE scoreScale API Failed. Code:\", res?.code || \"No response\", \"Error:\", err);",
															"                                throw new Error(\"DELETE scoreScale API request failed.\");",
															"                            }",
															"                            });",
															"                    });",
															"                    });   ",
															"                });",
															"            });",
															"        });",
															"    });",
															"});",
															"",
															"",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}{{pathPrefix}}/assessmentLineItems/{{sourcedId}}",
													"host": [
														"{{URL}}{{pathPrefix}}"
													],
													"path": [
														"assessmentLineItems",
														"{{sourcedId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify API throws an error for non existing sourcedId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"DELETE API should return 404 Not Found\", function () {",
															"  pm.response.to.have.status(404);",
															"});",
															"",
															"",
															"// Parse the JSON response",
															"let jsonData = pm.response.json();",
															"",
															"let requestedSourcedId = pm.environment.get(\"sourcedId\");",
															"",
															"// Construct expected error message",
															"let expectedDescription = `AssessmentLineItem with the sourced ID: ${requestedSourcedId} does not exist or it may have already been deleted.`;",
															"",
															"",
															"// Validate the error message exactly",
															"pm.test(\"Verify Error message and it should matches with requested sourcedId \", function () {",
															"    pm.expect(jsonData.imsx_description).to.eql(expectedDescription);",
															"});",
															"",
															"",
															"// Validate root-level keys",
															"pm.test(\"Response has all top-level keys\", function () {",
															"    pm.expect(jsonData).to.have.all.keys(\"imsx_codeMajor\", \"imsx_severity\", \"imsx_description\", \"imsx_CodeMinor\");",
															"});",
															"",
															"// Check data types of top-level fields",
															"pm.test(\"Top-level keys have correct types\", function () {",
															"    pm.expect(jsonData.imsx_codeMajor).to.be.a(\"string\");",
															"    pm.expect(jsonData.imsx_severity).to.be.a(\"string\");",
															"    pm.expect(jsonData.imsx_description).to.be.a(\"string\");",
															"    pm.expect(jsonData.imsx_CodeMinor).to.be.an(\"object\");",
															"});",
															"",
															"// Validate imsx_CodeMinor structure",
															"pm.test(\"imsx_CodeMinor has expected structure\", function () {",
															"    pm.expect(jsonData.imsx_CodeMinor).to.have.property(\"imsx_codeMinorField\");",
															"    pm.expect(jsonData.imsx_CodeMinor.imsx_codeMinorField).to.be.an(\"array\");",
															"});",
															"",
															"// Validate fields inside imsx_codeMinorField",
															"pm.test(\"imsx_codeMinorField items have required keys\", function () {",
															"    let fields = jsonData.imsx_CodeMinor.imsx_codeMinorField;",
															"    ",
															"    fields.forEach(field => {",
															"        pm.expect(field).to.have.all.keys(\"imsx_codeMinorFieldName\", \"imsx_codeMinorFieldValue\");",
															"        pm.expect(field.imsx_codeMinorFieldName).to.be.a(\"string\");",
															"        pm.expect(field.imsx_codeMinorFieldValue).to.be.a(\"string\");",
															"    });",
															"});",
															"",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Set headers dynamically from environment variables",
															"pm.request.headers.upsert({ key: \"Authorization\", value: pm.environment.get(\"Auth\") });",
															"pm.request.headers.upsert({ key: \"x-app-key\", value: pm.environment.get(\"x-app-key\") });",
															"pm.request.headers.upsert({ key: \"x-client-id\", value: pm.environment.get(\"x-client-id\") });",
															"",
															"// Generate a random UUID for sourcedId",
															"function generateUUID() {",
															"    let dt = new Date().getTime();",
															"    let uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {",
															"        let r = (dt + Math.random() * 16) % 16 | 0;",
															"        dt = Math.floor(dt / 16);",
															"        return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);",
															"    });",
															"    return uuid;",
															"}",
															"",
															"",
															"// Generate and store courseSourcedId",
															"let sourcedId = generateUUID();",
															"pm.environment.set(\"sourcedId\", sourcedId);",
															"console.log(\"Generated sourcedId: \" + sourcedId);",
															"",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}{{pathPrefix}}/assessmentLineItems/{{sourcedId}}",
													"host": [
														"{{URL}}{{pathPrefix}}"
													],
													"path": [
														"assessmentLineItems",
														"{{sourcedId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify API throws an error for sourcedId which is of type NON PLACEMENT_TEST",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"DELETE API should return 404 Not Found\", function () {",
															"  pm.response.to.have.status(404);",
															"});",
															"",
															"",
															"// Parse the JSON response",
															"let jsonData = pm.response.json();",
															"",
															"let requestedSourcedId = pm.environment.get(\"lineItemSourcedId\");",
															"",
															"// Construct expected error message",
															"let expectedDescription = `AssessmentLineItem with the sourced ID: ${requestedSourcedId} does not exist or it may have already been deleted.`;",
															"",
															"",
															"// Validate the error message exactly",
															"pm.test(\"Verify Error message and it should matches with requested sourcedId \", function () {",
															"    pm.expect(jsonData.imsx_description).to.eql(expectedDescription);",
															"});",
															"",
															"",
															"// Validate root-level keys",
															"pm.test(\"Response has all top-level keys\", function () {",
															"    pm.expect(jsonData).to.have.all.keys(\"imsx_codeMajor\", \"imsx_severity\", \"imsx_description\", \"imsx_CodeMinor\");",
															"});",
															"",
															"// Check data types of top-level fields",
															"pm.test(\"Top-level keys have correct types\", function () {",
															"    pm.expect(jsonData.imsx_codeMajor).to.be.a(\"string\");",
															"    pm.expect(jsonData.imsx_severity).to.be.a(\"string\");",
															"    pm.expect(jsonData.imsx_description).to.be.a(\"string\");",
															"    pm.expect(jsonData.imsx_CodeMinor).to.be.an(\"object\");",
															"});",
															"",
															"// Validate imsx_CodeMinor structure",
															"pm.test(\"imsx_CodeMinor has expected structure\", function () {",
															"    pm.expect(jsonData.imsx_CodeMinor).to.have.property(\"imsx_codeMinorField\");",
															"    pm.expect(jsonData.imsx_CodeMinor.imsx_codeMinorField).to.be.an(\"array\");",
															"});",
															"",
															"// Validate fields inside imsx_codeMinorField",
															"pm.test(\"imsx_codeMinorField items have required keys\", function () {",
															"    let fields = jsonData.imsx_CodeMinor.imsx_codeMinorField;",
															"    ",
															"    fields.forEach(field => {",
															"        pm.expect(field).to.have.all.keys(\"imsx_codeMinorFieldName\", \"imsx_codeMinorFieldValue\");",
															"        pm.expect(field.imsx_codeMinorFieldName).to.be.a(\"string\");",
															"        pm.expect(field.imsx_codeMinorFieldValue).to.be.a(\"string\");",
															"    });",
															"});",
															"",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Set headers dynamically from environment variables",
															"pm.request.headers.upsert({ key: \"Authorization\", value: pm.environment.get(\"Auth\") });",
															"pm.request.headers.upsert({ key: \"x-app-key\", value: pm.environment.get(\"x-app-key\") });",
															"pm.request.headers.upsert({ key: \"x-client-id\", value: pm.environment.get(\"x-client-id\") });",
															"",
															"// Generate a random UUID for sourcedId",
															"function generateUUID() {",
															"    let dt = new Date().getTime();",
															"    let uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {",
															"        let r = (dt + Math.random() * 16) % 16 | 0;",
															"        dt = Math.floor(dt / 16);",
															"        return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);",
															"    });",
															"    return uuid;",
															"}",
															"",
															"const headers = {",
															"    'Authorization': pm.environment.get(\"Auth\"),",
															"    'x-app-key': pm.environment.get(\"x-app-key\"),",
															"    'x-client-id': pm.environment.get(\"x-client-id\"),",
															"    'Content-Type': 'application/json'",
															"};",
															"",
															"// Generate and store courseSourcedId",
															"let courseSourcedId = generateUUID();",
															"pm.environment.set(\"courseSourcedId\", courseSourcedId);",
															"console.log(\"Generated courseSourcedId: \" + courseSourcedId);",
															"",
															"// Generate current UTC timestamp in ISO format: 2025-01-29T06:51:57Z",
															"function getCurrentISOString() {",
															"    return new Date().toISOString().split('.')[0] + \"Z\";",
															"}",
															"",
															"// Set dynamic date variables",
															"let isoDateTime = getCurrentISOString(); // full timestamp",
															"let isoDateOnly = isoDateTime.split('T')[0]; // date only",
															"",
															"pm.environment.set(\"isoDateTime\", isoDateTime);",
															"pm.environment.set(\"isoDateOnly\", isoDateOnly);",
															"",
															"console.log(\"Generated ISO DateTime: \" + isoDateTime);",
															"console.log(\"Generated ISO Date Only: \" + isoDateOnly);",
															"",
															"",
															"// Define Course API URL",
															"let courseUrl = pm.environment.get(\"URL\") + pm.environment.get(\"customPathPrefix\")+\"/courses\";",
															"",
															"// Define Course API Request Body",
															"let courseRequestBody = {",
															"    \"sourcedId\": pm.environment.get(\"courseSourcedId\"), //required",
															"    \"status\": \"active\", //required",
															"    \"title\": \"QA\", //required",
															"    \"courseCode\": \"courseCode\" //required",
															"",
															"}",
															"",
															"",
															"// Make the Course POST request",
															"pm.sendRequest({",
															"    url: courseUrl,",
															"    method: 'POST',",
															"    header: headers,",
															"    body: {",
															"        mode: 'raw',",
															"        raw: JSON.stringify(courseRequestBody)",
															"    }",
															"}, function (err, res) {",
															"    if (err) {",
															"        console.error(\"POST Course API Error: \", err);",
															"        pm.environment.unset(\"courseSourcedId\"); // Clear sourcedId on failure",
															"        throw new Error(\"Course POST API request failed.\");",
															"    }",
															"",
															"    if (res.code !== 201) {  // Ensure status is 201 Created",
															"        console.error(\"Unexpected POST Course API Response Code: \" + res.code);",
															"        pm.environment.unset(\"courseSourcedId\"); // Clear sourcedId on failure",
															"        throw new Error(\"Course POST API did not return 201 Created.\");",
															"    }",
															"",
															"    console.log(\"Course POST API succeeded with status: \" + res.code);",
															"",
															"    // Define getAllOrgs API URL",
															"    let getAllOrgsUrl = pm.environment.get(\"URL\") + pm.environment.get(\"rosterPathPrefix\")+\"/orgs\";",
															"",
															"    // Make getAllOrgs Request",
															"    pm.sendRequest({",
															"        url: getAllOrgsUrl,",
															"        method: 'GET',",
															"        header: headers",
															"    }, function (err, res) {",
															"        if (err || res.code !== 200) {",
															"            console.error(\"GET Orgs API Failed. Code:\", res?.code || \"No response\", \"Error:\", err);",
															"            throw new Error(\"GET Orgs API request failed.\");",
															"        }",
															"",
															"        console.log(\"GET Orgs API succeeded with status:\", res.code);",
															"",
															"        let response = res.json();",
															"        let schoolOrgs = response.orgs.filter(org => org.type === \"SCHOOL\");",
															"",
															"        if (schoolOrgs.length === 0) {",
															"            throw new Error(\"No orgs of type 'SCHOOL' found.\");",
															"        }",
															"",
															"        // Get a random school sourcedId",
															"        let randomIndex = Math.floor(Math.random() * schoolOrgs.length);",
															"        let schoolSourcedId = schoolOrgs[randomIndex].sourcedId;",
															"",
															"        console.log(\"Selected school sourcedId: \" + schoolSourcedId);",
															"",
															"        // Save to environment variable for later use",
															"        pm.environment.set(\"school_sourcedId\", schoolSourcedId);",
															"",
															"        // Define getAllterms API URL",
															"        let getAllTermsUrl = pm.environment.get(\"URL\") + pm.environment.get(\"rosterPathPrefix\")+\"/terms\";",
															"",
															"        // Make getAllterms Request",
															"        pm.sendRequest({",
															"            url: getAllTermsUrl,",
															"            method: 'GET',",
															"            header: headers",
															"        }, function (err, res) {",
															"            if (err || res.code !== 200) {",
															"                console.error(\"GET TERMS API Failed. Code:\", res?.code || \"No response\", \"Error:\", err);",
															"                throw new Error(\"GET TERMS API request failed.\");",
															"            }",
															"",
															"            console.log(\"GET TERMS API succeeded with status:\", res.code);",
															"",
															"            let response = res.json();",
															"            let termSessions = response.academicSessions.filter(session => session.type === \"TERM\");",
															"",
															"            if (termSessions.length === 0) {",
															"                throw new Error(\"No academicSessions of type 'TERM' found.\");",
															"            }",
															"",
															"            // Select a random term sourcedId",
															"            let randomIndex = Math.floor(Math.random() * termSessions.length);",
															"            let termSourcedId = termSessions[randomIndex].sourcedId;",
															"",
															"            console.log(\"Selected TERM sourcedId: \" + termSourcedId);",
															"",
															"            // Save to environment variable",
															"            pm.environment.set(\"term_sourcedId\", termSourcedId);",
															"",
															"            // Generate and store classSourcedId",
															"            let classSourcedId = generateUUID();",
															"            pm.environment.set(\"classSourcedId\", classSourcedId);",
															"            console.log(\"Generated classSourcedId: \" + classSourcedId);",
															"",
															"            // Define Class API URL",
															"            let classUrl = pm.environment.get(\"URL\") + pm.environment.get(\"customPathPrefix\")+\"/classes\";",
															"",
															"            // Define Class API Request Body",
															"            let classRequestBody = {",
															"                \"sourcedId\": pm.environment.get(\"classSourcedId\"), //Required",
															"                \"status\": \"active\", //Required",
															"                \"title\": \"title\", //Required",
															"                \"classType\": \"SCHEDULED\", //Required",
															"                \"course\": { //required",
															"                    \"href\": \"/courses/\" + pm.environment.get(\"courseSourcedId\"),",
															"                    \"sourcedId\": pm.environment.get(\"courseSourcedId\"),",
															"                    \"type\": \"course\"",
															"                },",
															"                \"school\": { //required",
															"                    \"href\": \"/org/\" + pm.environment.get(\"school_sourcedId\"),",
															"                    \"sourcedId\": pm.environment.get(\"school_sourcedId\"),",
															"                    \"type\": \"org\"",
															"                },",
															"                \"terms\": [ //required",
															"                    {",
															"                        \"href\": \"/academicSession/\" + pm.environment.get(\"term_sourcedId\"),",
															"                        \"sourcedId\":pm.environment.get(\"term_sourcedId\"),",
															"                        \"type\": \"academicSession\"",
															"                    }",
															"                ]",
															"            }",
															"",
															"            // Make the Class POST request",
															"            pm.sendRequest({",
															"                url: classUrl,",
															"                method: 'POST',",
															"                header: headers,",
															"                body: {",
															"                    mode: 'raw',",
															"                    raw: JSON.stringify(classRequestBody)",
															"                }",
															"            }, function (err, res) {",
															"                if (err) {",
															"                    console.error(\"POST Class API Error: \", err);",
															"                    pm.environment.unset(\"classSourcedId\"); // Clear sourcedId on failure",
															"                    throw new Error(\"Class POST API request failed.\");",
															"                }",
															"",
															"                if (res.code !== 201) {  // Ensure status is 201 Created",
															"                    console.error(\"Unexpected POST Class API Response Code: \" + res.code);",
															"                    pm.environment.unset(\"classSourcedId\"); // Clear sourcedId on failure",
															"                    throw new Error(\"POST Class API did not return 201 Created.\");",
															"                }",
															"",
															"                console.log(\"POST Class API succeeded with status: \" + res.code);",
															"",
															"                // --- Subsequent Requests (Category, ScoreScale, LineItem) ---",
															"",
															"                // Generate and store sourcedId for Category",
															"                let categorySourcedId = generateUUID();",
															"                pm.environment.set(\"categorySourcedId\", categorySourcedId);",
															"                console.log(\"Generated categorySourcedId: \" + categorySourcedId);",
															"",
															"                // Define Category API URL",
															"                let categoryUrl = pm.environment.get(\"URL\") + pm.environment.get(\"pathPrefix\")+\"/categories/\"+ categorySourcedId;",
															"",
															"                // Define Category API Request Body",
															"                let categoryRequestBody = {",
															"                    \"category\": {",
															"                        \"sourcedId\": pm.environment.get(\"categorySourcedId\"),",
															"                        \"status\": \"active\",",
															"                        \"dateLastModified\": isoDateTime,",
															"                        \"metadata\": {},",
															"                        \"title\": \"title\",",
															"                        \"weight\": 3",
															"                    }",
															"                }",
															"",
															"                // Make the PUT Category request",
															"                pm.sendRequest({",
															"                    url: categoryUrl,",
															"                    method: 'PUT',",
															"                    header: headers,",
															"                    body: {",
															"                        mode: 'raw',",
															"                        raw: JSON.stringify(categoryRequestBody)",
															"                    }",
															"                }, function (err, res) {",
															"                    if (err) {",
															"                        console.error(\"PUT Category API Error: \", err);",
															"                        pm.environment.unset(\"categorySourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT Category API request failed.\");",
															"                    }",
															"",
															"                    if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
															"                        console.error(\"Unexpected PUT Category API Response Code: \" + res.code);",
															"                        pm.environment.unset(\"categorySourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT Category API did not return 200 or 201.\");",
															"                    }",
															"",
															"                    console.log(\"PUT Category API succeeded with status: \" + res.code);",
															"",
															"                    // Generate and store sourcedId for ScoreScale",
															"                    let scoreScaleSourcedId = generateUUID();",
															"                    pm.environment.set(\"scoreScaleSourcedId\", scoreScaleSourcedId);",
															"                    console.log(\"Generated scoreScaleSourcedId: \" + scoreScaleSourcedId);",
															"",
															"                    // Define ScoreScale API URL",
															"                    let scoreScaleUrl = pm.environment.get(\"URL\") + pm.environment.get(\"pathPrefix\")+\"/scoreScales/\"+ scoreScaleSourcedId;",
															"",
															"                    // Define ScoreScale API Request Body",
															"                    let scoreScaleRequestBody = {",
															"                        \"scoreScale\": {",
															"                            \"sourcedId\":pm.environment.get(\"scoreScaleSourcedId\"), //required",
															"                            \"status\": \"active\", //required",
															"                            \"dateLastModified\": isoDateTime, //required",
															"                            \"metadata\": {",
															"                                \"test\": \"metadata\"",
															"                            },",
															"                            \"title\": \"QATestProd\", //required",
															"                            \"type\": \"QATestProd\", //required",
															"                            \"course\": {",
															"                                \"href\": \"/course/\" + pm.environment.get(\"courseSourcedId\"),",
															"                                \"sourcedId\": pm.environment.get(\"courseSourcedId\"),",
															"                                \"type\": \"course\"",
															"                            },",
															"                            \"class\": {  //required",
															"                                \"href\": \"/classes/\" + pm.environment.get(\"classSourcedId\"),",
															"                                \"sourcedId\": pm.environment.get(\"classSourcedId\"),",
															"                                \"type\": \"class\"",
															"                            },",
															"                            \"scoreScaleValue\": [ //required",
															"                                {",
															"                                    \"itemValueLHS\": \"0-57\",",
															"                                    \"itemValueRHS\": \"F\"",
															"                                },",
															"                                {",
															"                                    \"itemValueLHS\": \"60-69\",",
															"                                    \"itemValueRHS\": \"D\"",
															"                                },",
															"                                {",
															"                                    \"itemValueLHS\": \"70-79\",",
															"                                    \"itemValueRHS\": \"C\"",
															"                                },",
															"                                {",
															"                                    \"itemValueLHS\": \"80-89\",",
															"                                    \"itemValueRHS\": \"B\"",
															"                                },",
															"                                {",
															"                                    \"itemValueLHS\": \"90-100\",",
															"                                    \"itemValueRHS\": \"A\"",
															"                                }",
															"                            ]",
															"                        }",
															"                    }",
															"",
															"                    // Make the PUT ScoreScale request",
															"                    pm.sendRequest({",
															"                        url: scoreScaleUrl,",
															"                        method: 'PUT',",
															"                        header: headers,",
															"                        body: {",
															"                            mode: 'raw',",
															"                            raw: JSON.stringify(scoreScaleRequestBody)",
															"                        }",
															"                    }, function (err, res) {",
															"                        if (err) {",
															"                            console.error(\"PUT ScoreScale API Error: \", err);",
															"                            pm.environment.unset(\"scoreScaleSourcedId\"); // Clear sourcedId on failure",
															"                            throw new Error(\"PUT ScoreScale API request failed.\");",
															"                        }",
															"",
															"                        if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
															"                            console.error(\"Unexpected PUT ScoreScale API Response Code: \" + res.code);",
															"                            pm.environment.unset(\"scoreScaleSourcedId\"); // Clear sourcedId on failure",
															"                            throw new Error(\"PUT ScoreScale API did not return 200 or 201.\");",
															"                        }",
															"",
															"                        console.log(\"PUT ScoreScale API succeeded with status: \" + res.code);",
															"",
															"                        // Generate and store sourcedId for LineItem",
															"                        let lineItemSourcedId = generateUUID();",
															"                        pm.environment.set(\"lineItemSourcedId\", lineItemSourcedId);",
															"                        console.log(\"Generated lineItemSourcedId: \" + lineItemSourcedId);",
															"",
															"                        // Define putLineItem API URL",
															"                        let putLineItemUrl = pm.environment.get(\"URL\") + pm.environment.get(\"pathPrefix\")+\"/lineItems/\"+ lineItemSourcedId;",
															"",
															"                        // Define putAssessmentLineItems API Request Body",
															"                        let putLineItemRequestBody = {",
															"                                \"lineItem\": {",
															"                                    \"sourcedId\": pm.environment.get(\"lineItemSourcedId\"), //required",
															"                                    \"status\": \"active\", //required",
															"                                    \"dateLastModified\": isoDateTime, // Correct UTC ISO8601 format //required",
															"                                    \"title\": \"Math\\nTest\", //required",
															"                                    \"assignDate\": isoDateTime, // Correct UTC ISO8601 format //required",
															"                                    \"dueDate\": isoDateTime, // Correct UTC ISO8601 format //required",
															"                                    \"class\": { //required",
															"                                        \"href\": \"/classes/\" + pm.environment.get(\"classSourcedId\"),",
															"                                        \"sourcedId\": pm.environment.get(\"classSourcedId\"),",
															"                                        \"type\": \"class\"",
															"                                    },",
															"                                    \"school\": { //required",
															"                                        \"href\": \"/org/\" + pm.environment.get(\"school_sourcedId\"),",
															"                                        \"sourcedId\": pm.environment.get(\"school_sourcedId\"),",
															"                                        \"type\": \"org\"",
															"                                    },",
															"                                    \"category\": { //required",
															"                                        \"href\": \"/categories/\" + pm.environment.get(\"categorySourcedId\"),",
															"                                        \"sourcedId\": pm.environment.get(\"categorySourcedId\"),",
															"                                        \"type\": \"category\"",
															"                                    }",
															"                                }",
															"",
															"                        }",
															"",
															"                        // Make the putLineItem request",
															"                        pm.sendRequest({",
															"                            url: putLineItemUrl,",
															"                            method: 'PUT',",
															"                            header: headers,",
															"                            body: {",
															"                                mode: 'raw',",
															"                                raw: JSON.stringify(putLineItemRequestBody)",
															"                            }",
															"                        }, function (err, res) {",
															"                            if (err) {",
															"                                console.error(\"PUT LineItem API Error: \", err);",
															"                                pm.environment.unset(\"lineItemSourcedId\"); // Clear sourcedId on failure",
															"                                throw new Error(\"PUT LineItem API request failed.\");",
															"                            }",
															"",
															"                            if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
															"                                console.error(\"Unexpected PUT LineItem API Response Code: \" + res.code);",
															"                                pm.environment.unset(\"lineItemSourcedId\"); // Clear sourcedId on failure",
															"                                throw new Error(\"PUT LineItem API did not return 200 or 201.\");",
															"                            }",
															"",
															"                            console.log(\"PUT LineItem API succeeded with status: \" + res.code);",
															"                        });",
															"                    });",
															"                });",
															"            });",
															"        });",
															"    });",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}{{pathPrefix}}/assessmentLineItems/{{lineItemSourcedId}}",
													"host": [
														"{{URL}}{{pathPrefix}}"
													],
													"path": [
														"assessmentLineItems",
														"{{lineItemSourcedId}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "LineItems",
			"item": [
				{
					"name": "Smoke Tests",
					"item": [
						{
							"name": "Happy path",
							"item": [
								{
									"name": "Validate successful creation of LineItem",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate Status Code, It should be 201 Created\", function () {",
													"    pm.expect([201]).to.include(pm.response.code, \"Unexpected status code\");",
													"});",
													"",
													"",
													"pm.test(\"Response body should be completely empty\", function () {",
													"    pm.expect(pm.response.text()).to.equal(\"\"); // Ensure response body is completely empty",
													"});",
													"",
													"",
													"let requestBody = JSON.parse(request.data);",
													"let putLineitemRequestBody = requestBody.lineItem;",
													"",
													"// Store full object as a single environment variable",
													"pm.environment.set(\"putLineitemRequestBody\", JSON.stringify(putLineitemRequestBody));",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Set headers dynamically from environment variables",
													"pm.request.headers.upsert({ key: \"Authorization\", value: pm.environment.get(\"Auth\") });",
													"pm.request.headers.upsert({ key: \"x-app-key\", value: pm.environment.get(\"x-app-key\") });",
													"pm.request.headers.upsert({ key: \"x-client-id\", value: pm.environment.get(\"x-client-id\") });",
													"",
													"// Generate a random UUID for sourcedId",
													"function generateUUID() {",
													"    let dt = new Date().getTime();",
													"    let uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {",
													"        let r = (dt + Math.random() * 16) % 16 | 0;",
													"        dt = Math.floor(dt / 16);",
													"        return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);",
													"    });",
													"    return uuid;",
													"}",
													"",
													"let courseSourcedId = generateUUID();",
													"let classSourcedId = generateUUID();",
													"let scoreScaleSourcedId = generateUUID();",
													"let categorySourcedId = generateUUID();",
													"let sourcedId = generateUUID();",
													"",
													"",
													"pm.environment.set(\"courseSourcedId\", courseSourcedId);",
													"pm.environment.set(\"classSourcedId\", classSourcedId);",
													"pm.environment.set(\"scoreScaleSourcedId\", scoreScaleSourcedId);",
													"pm.environment.set(\"categorySourcedId\", categorySourcedId);",
													"pm.environment.set(\"sourcedId\", sourcedId);",
													"",
													"",
													"// Set headers",
													"const headers = {",
													"    'Authorization': pm.environment.get(\"Auth\"),",
													"    'x-app-key': pm.environment.get(\"x-app-key\"),",
													"    'x-client-id': pm.environment.get(\"x-client-id\"),",
													"    'Content-Type': 'application/json'",
													"};",
													"",
													"",
													"// Generate current UTC timestamp in ISO format: 2025-01-29T06:51:57Z",
													"function getCurrentISOString() {",
													"    return new Date().toISOString().split('.')[0] + \"Z\";",
													"}",
													"",
													"// Set dynamic date variables",
													"let isoDateTime = getCurrentISOString(); // full timestamp",
													"let isoDateOnly = isoDateTime.split('T')[0]; // date only",
													"",
													"pm.environment.set(\"isoDateTime\", isoDateTime);",
													"pm.environment.set(\"isoDateOnly\", isoDateOnly);",
													"",
													"console.log(\"Generated ISO DateTime: \" + isoDateTime);",
													"console.log(\"Generated ISO Date Only: \" + isoDateOnly);",
													"",
													"// Define Course API URL",
													"let courseUrl = pm.environment.get(\"URL\") + pm.environment.get(\"customPathPrefix\")+\"/courses\";",
													"",
													"// Define getAllOrgs API URL",
													"let getAllOrgsUrl = pm.environment.get(\"URL\") + pm.environment.get(\"rosterPathPrefix\")+\"/orgs\";",
													"",
													"// Define getAllterms API URL",
													"let getAllTermsUrl = pm.environment.get(\"URL\") + pm.environment.get(\"rosterPathPrefix\")+\"/terms\";",
													"",
													"// Define Class API URL",
													"let classUrl = pm.environment.get(\"URL\") + pm.environment.get(\"customPathPrefix\")+\"/classes\";",
													"",
													"// Define ScoreScale API URL",
													"let scoreScaleUrl = pm.environment.get(\"URL\") + pm.environment.get(\"pathPrefix\")+\"/scoreScales/\"+ scoreScaleSourcedId;",
													"",
													"// Define Category API URL",
													"let categoryUrl = pm.environment.get(\"URL\") + pm.environment.get(\"pathPrefix\")+\"/categories/\"+ categorySourcedId;",
													"",
													"",
													"// Define Course API Request Body",
													"let courseRequestBody = {",
													"    \"sourcedId\": pm.environment.get(\"courseSourcedId\"), //required",
													"    \"status\": \"active\", //required",
													"    \"title\": \"QA\", //required",
													"    \"courseCode\": \"courseCode\" //required",
													"}",
													"",
													"",
													"// Define Class API Request Body",
													"let classRequestBody = {",
													"    \"sourcedId\": pm.environment.get(\"classSourcedId\"), //Required",
													"    \"status\": \"active\", //Required",
													"    \"title\": \"title\", //Required",
													"    \"classType\": \"SCHEDULED\", //Required",
													"    \"course\": { //required",
													"        \"href\": \"/courses/\" + pm.environment.get(\"courseSourcedId\"),",
													"        \"sourcedId\": pm.environment.get(\"courseSourcedId\"),",
													"        \"type\": \"course\"",
													"                },",
													"    \"school\": { //required",
													"        \"href\": \"/org/\" + pm.environment.get(\"school_sourcedId\"),",
													"        \"sourcedId\": pm.environment.get(\"school_sourcedId\"),",
													"        \"type\": \"org\"",
													"                },",
													"    \"terms\": [ //required",
													"        {",
													"            \"href\": \"/academicSession/\" + pm.environment.get(\"term_sourcedId\"),",
													"            \"sourcedId\":pm.environment.get(\"term_sourcedId\"),",
													"             \"type\": \"academicSession\"",
													"        }",
													"    ]",
													"}",
													"",
													"",
													"// Define ScoreScale API Request Body",
													"let scoreScaleRequestBody = {",
													"    \"scoreScale\": {",
													"    \"sourcedId\":pm.environment.get(\"scoreScaleSourcedId\"), //required",
													"    \"status\": \"active\", //required",
													"    \"dateLastModified\": isoDateTime, //required",
													"    \"metadata\": {",
													"        \"test\": \"metadata\"",
													"                },",
													"    \"title\": \"QATestProd\", //required",
													"    \"type\": \"QATestProd\", //required",
													"    \"course\": {",
													"            \"href\": \"/course/\" + pm.environment.get(\"courseSourcedId\"),",
													"            \"sourcedId\": pm.environment.get(\"courseSourcedId\"),",
													"            \"type\": \"course\"",
													"        },",
													"    \"class\": {  //required",
													"            \"href\": \"/classes/\" + pm.environment.get(\"classSourcedId\"),",
													"            \"sourcedId\": pm.environment.get(\"classSourcedId\"),",
													"            \"type\": \"class\"",
													"        },",
													"    \"scoreScaleValue\": [ //required",
													"        {",
													"            \"itemValueLHS\": \"0-57\",",
													"            \"itemValueRHS\": \"F\"",
													"        },",
													"        {",
													"            \"itemValueLHS\": \"60-69\",",
													"            \"itemValueRHS\": \"D\"",
													"        }",
													"                        ]",
													"    }",
													"}",
													"",
													"",
													"// Define Category API Request Body",
													"let categoryRequestBody = {",
													"     \"category\": {",
													"        \"sourcedId\": pm.environment.get(\"categorySourcedId\"),",
													"        \"status\": \"active\",",
													"        \"dateLastModified\": isoDateTime,",
													"        \"metadata\": {},",
													"        \"title\": \"title\",",
													"        \"weight\": 3",
													"                }",
													"}",
													"",
													"",
													"// Make the Course POST request",
													"pm.sendRequest({",
													"    url: courseUrl,",
													"    method: 'POST',",
													"    header: headers,",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify(courseRequestBody)",
													"    }",
													"}, function (err, res) {",
													"    if (err) {",
													"        console.error(\"POST Course API Error: \", err);",
													"        pm.environment.unset(\"courseSourcedId\"); // Clear sourcedId on failure",
													"        throw new Error(\"Course POST API request failed.\");",
													"    }",
													"",
													"    if (res.code !== 201) {  // Ensure status is 201 Created",
													"        console.error(\"Unexpected POST Course API Response Code: \" + res.code);",
													"        pm.environment.unset(\"courseSourcedId\"); // Clear sourcedId on failure",
													"        throw new Error(\"Course POST API did not return 201 Created.\");",
													"    }",
													"",
													"    console.log(\"Course POST API succeeded with status: \" + res.code);",
													"",
													"",
													" // Make getAllOrgs Request",
													"    pm.sendRequest({",
													"        url: getAllOrgsUrl,",
													"        method: 'GET',",
													"        header: headers",
													"    }, function (err, res) {",
													"        if (err || res.code !== 200) {",
													"            console.error(\"GET Orgs API Failed. Code:\", res?.code || \"No response\", \"Error:\", err);",
													"            throw new Error(\"GET Orgs API request failed.\");",
													"        }",
													"        console.log(\"GET Orgs API succeeded with status:\", res.code);",
													"        let response = res.json();",
													"        let schoolOrgs = response.orgs.filter(org => org.type === \"SCHOOL\");",
													"",
													"        if (schoolOrgs.length === 0) {",
													"            throw new Error(\"No orgs of type 'SCHOOL' found.\");",
													"        }",
													"",
													"        // Get a random school sourcedId",
													"        let randomIndex = Math.floor(Math.random() * schoolOrgs.length);",
													"        let schoolSourcedId = schoolOrgs[randomIndex].sourcedId;",
													"        console.log(\"Selected school sourcedId: \" + schoolSourcedId);",
													"        // Save to environment variable for later use",
													"        pm.environment.set(\"school_sourcedId\", schoolSourcedId);",
													"",
													"",
													"     // Make getAllterms Request",
													"        pm.sendRequest({",
													"            url: getAllTermsUrl,",
													"            method: 'GET',",
													"            header: headers",
													"        }, function (err, res) {",
													"            if (err || res.code !== 200) {",
													"                console.error(\"GET TERMS API Failed. Code:\", res?.code || \"No response\", \"Error:\", err);",
													"                throw new Error(\"GET TERMS API request failed.\");",
													"            }",
													"",
													"            console.log(\"GET TERMS API succeeded with status:\", res.code);",
													"",
													"            let response = res.json();",
													"            let termSessions = response.academicSessions.filter(session => session.type === \"TERM\");",
													"",
													"            if (termSessions.length === 0) {",
													"                throw new Error(\"No academicSessions of type 'TERM' found.\");",
													"            }",
													"",
													"            // Select a random term sourcedId",
													"            let randomIndex = Math.floor(Math.random() * termSessions.length);",
													"            let termSourcedId = termSessions[randomIndex].sourcedId;",
													"",
													"            console.log(\"Selected TERM sourcedId: \" + termSourcedId);",
													"",
													"            // Save to environment variable",
													"            pm.environment.set(\"term_sourcedId\", termSourcedId);",
													"",
													"            // Make the Class POST request",
													"            pm.sendRequest({",
													"                url: classUrl,",
													"                method: 'POST',",
													"                header: headers,",
													"                body: {",
													"                    mode: 'raw',",
													"                    raw: JSON.stringify(classRequestBody)",
													"                }",
													"            }, function (err, res) {",
													"                if (err) {",
													"                    console.error(\"POST Class API Error: \", err);",
													"                    pm.environment.unset(\"classSourcedId\"); // Clear sourcedId on failure",
													"                    throw new Error(\"Class POST API request failed.\");",
													"                }",
													"",
													"                if (res.code !== 201) {  // Ensure status is 201 Created",
													"                    console.error(\"Unexpected POST Class API Response Code: \" + res.code);",
													"                    pm.environment.unset(\"classSourcedId\"); // Clear sourcedId on failure",
													"                    throw new Error(\"POST Class API did not return 201 Created.\");",
													"                }",
													"",
													"                console.log(\"POST Class API succeeded with status: \" + res.code);",
													"",
													"",
													"                // Make the PUT ScoreScale request",
													"                pm.sendRequest({",
													"                    url: scoreScaleUrl,",
													"                    method: 'PUT',",
													"                    header: headers,",
													"                    body: {",
													"                        mode: 'raw',",
													"                        raw: JSON.stringify(scoreScaleRequestBody)",
													"                    }",
													"                }, function (err, res) {",
													"                    if (err) {",
													"                        console.error(\"PUT ScoreScale API Error: \", err);",
													"                        pm.environment.unset(\"scoreScaleSourcedId\"); // Clear sourcedId on failure",
													"                        throw new Error(\"PUT ScoreScale API request failed.\");",
													"                    }",
													"",
													"                    if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
													"                        console.error(\"Unexpected PUT ScoreScale API Response Code: \" + res.code);",
													"                        pm.environment.unset(\"scoreScaleSourcedId\"); // Clear sourcedId on failure",
													"                        throw new Error(\"PUT ScoreScale API did not return 200 or 201.\");",
													"                    }",
													"",
													"                    console.log(\"PUT ScoreScale API succeeded with status: \" + res.code);",
													"",
													"",
													"                    // Make the PUT Category request",
													"                pm.sendRequest({",
													"                    url: categoryUrl,",
													"                    method: 'PUT',",
													"                    header: headers,",
													"                    body: {",
													"                        mode: 'raw',",
													"                        raw: JSON.stringify(categoryRequestBody)",
													"                    }",
													"                }, function (err, res) {",
													"                    if (err) {",
													"                        console.error(\"PUT Category API Error: \", err);",
													"                        pm.environment.unset(\"categorySourcedId\"); // Clear sourcedId on failure",
													"                        throw new Error(\"PUT Category API request failed.\");",
													"                    }",
													"",
													"                    if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
													"                        console.error(\"Unexpected PUT Category API Response Code: \" + res.code);",
													"                        pm.environment.unset(\"categorySourcedId\"); // Clear sourcedId on failure",
													"                        throw new Error(\"PUT Category API did not return 200 or 201.\");",
													"                    }",
													"",
													"                    console.log(\"PUT Category API succeeded with status: \" + res.code);",
													"",
													"                    });",
													"                });",
													"            });",
													"        });",
													"    });",
													"});",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"lineItem\": {\n        \"sourcedId\": \"{{sourcedId}}\",\n        \"status\": \"active\",\n        \"dateLastModified\": \"{{isoDateTime}}\", // Correct UTC ISO8601 format\n        \"metadata\": {\n            \"extensions\": {\n                \"type\": \"DIGITAL_RESOURCE\",\n                \"adaptive\": true,\n                \"storageName\": \"example_storage_name\",\n                \"subject\": \"Mathematics\",\n                \"creator\": [\n                    \"0bb114e1-6f8a-4d81-8d27-1e641fdeddf7\"\n                ],\n                \"mediaType\": \"application/pdf\",\n                \"keywords\": [\n                    \"keyword1\",\n                    \"keyword2\"\n                ],\n                \"datePublished\": \"{{isoDateTime}}\", // Correct UTC ISO8601 format\n                \"dateToActivate\": \"{{isoDateTime}}\", // Correct UTC ISO8601 format\n                \"dateToShow\": \"{{isoDateTime}}\", // Correct UTC ISO8601 format\n                \"dateToStartOn\": \"{{isoDateTime}}\", // Correct UTC ISO8601 format\n                \"maxAttempts\": 5,\n                \"maxSubmits\": 3,\n                \"version\": \"1.0\",\n                \"applicationId\": \"string\",\n                \"competencyId\": null\n            }\n        },\n        \"title\": \"Math\\nTest\",\n        \"description\": \"A foundational resource for understanding algebra.\",\n        \"assignDate\": \"{{isoDateTime}}\", // Correct UTC ISO8601 format\n        \"dueDate\": \"{{isoDateTime}}\", // Correct UTC ISO8601 format\n        \"class\": {\n            \"href\": \"/classes/c6b2a92c-6efd-4d0d-989a-dddad7edc98d\",\n            \"sourcedId\": \"{{classSourcedId}}\",\n            \"type\": \"class\"\n        },\n        \"school\": {\n            \"href\": \"/schools/91edfc73-d1ab-4168-93de-85a71d7f318d\",\n            \"sourcedId\": \"{{school_sourcedId}}\",\n            \"type\": \"org\"\n        },\n        \"scoreScale\": {\n            \"href\": \"/scoreScales/5252bd60-6196-4063-9221-a9f27fe52c55\",\n            \"sourcedId\": \"{{scoreScaleSourcedId}}\",\n            \"type\": \"scoreScale\"\n        },\n        \"category\": {\n            \"href\": \"/category/5252bd60-6196-4063-9221-a9f27fe52c55\",\n            \"sourcedId\": \"{{categorySourcedId}}\",\n            \"type\": \"category\"\n        },\n        \"resultValueMin\": 0,\n        \"resultValueMax\": 100,\n        \"academicSession\": null\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}{{endpoint}}/lineItems/{{sourcedId}}",
											"host": [
												"{{URL}}{{endpoint}}"
											],
											"path": [
												"lineItems",
												"{{sourcedId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate successful retrieval of LineItem",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Parse response JSON",
													"let response = pm.response.json();",
													"",
													"// 1. Validate the response status is success",
													"pm.test(\"Response should have success status\", function () {",
													"    pm.expect(response.imsx_codeMajor).to.eql(\"success\");",
													"});",
													"",
													"// 2. Validate the Status code",
													"pm.test(\"Validate Status Code, It should be 200 OK\", function () {",
													"    pm.expect([200]).to.include(pm.response.code, \"Unexpected status code\");",
													"});",
													"",
													"// Retrieve the stored sourcedId from the environment (set in PUT request)",
													"let sourcedId = pm.environment.get(\"sourcedId\");",
													"",
													"",
													"//3. SourcedId should match the request SourcedId",
													"pm.test(\"Response SourcedId should match with requested sourcedId\", function () {",
													"    pm.expect(response.lineItem.sourcedId).to.eql(sourcedId);",
													"});",
													"",
													"",
													"// 4. Validate Json Response Structure and Types",
													"pm.test(\"Validate JSON Response Structure and Types\", () => {",
													"    // Check for the top-level keys",
													"    pm.expect(response).to.have.keys(\"imsx_codeMajor\", \"imsx_severity\", \"lineItem\");",
													"",
													"    // Validate imsx_codeMajor and imsx_severity types and values",
													"    pm.expect(response.imsx_codeMajor).to.be.a(\"string\").to.eql(\"success\");",
													"    pm.expect(response.imsx_severity).to.be.a(\"string\").to.eql(\"status\");",
													"",
													"    // Validate lineItem structure",
													"    const lineItemResponse = response.lineItem;",
													"    pm.expect(lineItemResponse).to.be.an(\"object\").to.have.keys(",
													"        \"sourcedId\", \"status\", \"dateLastModified\", \"metadata\", \"title\",",
													"        \"description\", \"assignDate\", \"dueDate\", \"category\", \"resultValueMin\",",
													"        \"resultValueMax\", \"class\", \"school\", \"scoreScale\", \"gradingPeriod\",",
													"        \"academicSession\", \"learningObjectiveSet\"",
													"    );",
													"",
													"    // Validate lineItem field types",
													"    pm.expect(lineItemResponse.sourcedId).to.be.a(\"string\");",
													"    pm.expect(lineItemResponse.status).to.be.a(\"string\");",
													"    pm.expect(lineItemResponse.dateLastModified).to.be.a(\"string\");",
													"    pm.expect(lineItemResponse.metadata).to.be.an(\"object\");",
													"    pm.expect(lineItemResponse.title).to.be.a(\"string\");",
													"    pm.expect(lineItemResponse.description).to.be.a(\"string\");",
													"    pm.expect(lineItemResponse.assignDate).to.be.a(\"string\");",
													"    pm.expect(lineItemResponse.dueDate).to.be.a(\"string\");",
													"    pm.expect(lineItemResponse.category).to.be.an(\"object\").to.have.keys(\"href\", \"sourcedId\", \"type\");",
													"    pm.expect(lineItemResponse.resultValueMin).to.satisfy(value => value === null || typeof value === 'number');",
													"    pm.expect(lineItemResponse.resultValueMax).to.satisfy(value => value === null || typeof value === 'number');",
													"    pm.expect(lineItemResponse.class).to.be.an(\"object\").to.have.keys(\"href\", \"sourcedId\", \"type\");",
													"    pm.expect(lineItemResponse.school).to.be.an(\"object\").to.have.keys(\"href\", \"sourcedId\", \"type\");",
													"    pm.expect(lineItemResponse.scoreScale).to.be.an(\"object\").to.have.keys(\"href\", \"sourcedId\", \"type\");",
													"    pm.expect(lineItemResponse.gradingPeriod).to.be.a(\"null\");",
													"    pm.expect(lineItemResponse.academicSession).to.be.a(\"null\");",
													"    pm.expect(lineItemResponse.learningObjectiveSet).to.be.a(\"null\");",
													"",
													"    // Validate metadata structure",
													"    const metadataResponse = lineItemResponse.metadata;",
													"    pm.expect(metadataResponse).to.be.an(\"object\").to.have.key(\"extensions\");",
													"",
													"    // Validate metadata.extensions structure",
													"    const extensionsResponse = metadataResponse.extensions;",
													"    pm.expect(extensionsResponse).to.be.an(\"object\").to.have.keys(\"fields\", \"type\", \"adaptive\", \"storageName\", \"subject\", \"creator\", \"mediaType\", \"keywords\", \"datePublished\", \"dateToActivate\", \"dateToShow\", \"dateToStartOn\", \"maxAttempts\", \"maxSubmits\", \"version\", \"applicationId\", \"competencyId\");",
													"    pm.expect(extensionsResponse.fields).to.be.an(\"object\").to.have.keys(\"type\", \"adaptive\", \"storageName\", \"subject\", \"creator\", \"mediaType\", \"keywords\", \"datePublished\", \"dateToActivate\", \"dateToShow\", \"dateToStartOn\", \"maxAttempts\", \"maxSubmits\", \"version\", \"applicationId\", \"competencyId\");",
													"",
													"    // Validate metadata.extensions field types and values",
													"    pm.expect(extensionsResponse.type).to.be.a(\"string\").to.eql(\"DIGITAL_RESOURCE\");",
													"    pm.expect(extensionsResponse.adaptive).to.be.a(\"boolean\").to.eql(true);",
													"    pm.expect(extensionsResponse.storageName).to.be.a(\"string\").to.eql(\"example_storage_name\");",
													"    pm.expect(extensionsResponse.subject).to.be.a(\"string\").to.eql(\"Mathematics\");",
													"    pm.expect(extensionsResponse.creator).to.be.an(\"array\").to.have.lengthOf(1);",
													"    pm.expect(extensionsResponse.creator[0]).to.be.a(\"string\");",
													"    pm.expect(extensionsResponse.mediaType).to.be.a(\"string\").to.eql(\"application/pdf\");",
													"    pm.expect(extensionsResponse.keywords).to.be.an(\"array\").to.have.lengthOf(2);",
													"    pm.expect(extensionsResponse.keywords[0]).to.be.a(\"string\").to.eql(\"keyword1\");",
													"    pm.expect(extensionsResponse.keywords[1]).to.be.a(\"string\").to.eql(\"keyword2\");",
													"    pm.expect(extensionsResponse.datePublished).to.be.a(\"string\");",
													"    pm.expect(extensionsResponse.dateToActivate).to.be.a(\"string\");",
													"    pm.expect(extensionsResponse.dateToShow).to.be.a(\"string\");",
													"    pm.expect(extensionsResponse.dateToStartOn).to.be.a(\"string\");",
													"    pm.expect(extensionsResponse.maxAttempts).to.be.a(\"number\").to.eql(5);",
													"    pm.expect(extensionsResponse.maxSubmits).to.be.a(\"number\").to.eql(3);",
													"    pm.expect(extensionsResponse.version).to.be.a(\"string\").to.eql(\"1.0\");",
													"    pm.expect(extensionsResponse.applicationId).to.be.a(\"string\").to.eql(\"string\");",
													"    pm.expect(extensionsResponse.competencyId).to.be.a(\"null\");",
													"",
													"    // Validate metadata.extensions.fields field types and values",
													"    pm.expect(extensionsResponse.fields.type).to.be.a(\"string\").to.eql(\"DIGITAL_RESOURCE\");",
													"    pm.expect(extensionsResponse.fields.adaptive).to.be.a(\"null\");",
													"    pm.expect(extensionsResponse.fields.storageName).to.be.a(\"null\");",
													"    pm.expect(extensionsResponse.fields.subject).to.be.a(\"string\").to.eql(\"Mathematics\");",
													"    pm.expect(extensionsResponse.fields.creator).to.be.a(\"null\");",
													"    pm.expect(extensionsResponse.fields.mediaType).to.be.a(\"null\");",
													"    pm.expect(extensionsResponse.fields.keywords).to.be.a(\"null\");",
													"    pm.expect(extensionsResponse.fields.datePublished).to.be.a(\"null\");",
													"    pm.expect(extensionsResponse.fields.dateToActivate).to.be.a(\"null\");",
													"    pm.expect(extensionsResponse.fields.dateToShow).to.be.a(\"null\");",
													"    pm.expect(extensionsResponse.fields.dateToStartOn).to.be.a(\"null\");",
													"    pm.expect(extensionsResponse.fields.maxAttempts).to.be.a(\"null\");",
													"    pm.expect(extensionsResponse.fields.maxSubmits).to.be.a(\"null\");",
													"    pm.expect(extensionsResponse.fields.version).to.be.a(\"null\");",
													"    pm.expect(extensionsResponse.fields.applicationId).to.be.a(\"null\");",
													"    pm.expect(extensionsResponse.fields.competencyId).to.be.a(\"null\");",
													"",
													"    // Validate category, class, school, scoreScale structure",
													"    pm.expect(lineItemResponse.category).to.be.an(\"object\").to.have.keys(\"href\", \"sourcedId\", \"type\");",
													"    pm.expect(lineItemResponse.class).to.be.an(\"object\").to.have.keys(\"href\", \"sourcedId\", \"type\");",
													"    pm.expect(lineItemResponse.school).to.be.an(\"object\").to.have.keys(\"href\", \"sourcedId\", \"type\");",
													"    pm.expect(lineItemResponse.scoreScale).to.be.an(\"object\").to.have.keys(\"href\", \"sourcedId\", \"type\");",
													"",
													"    // Validate category, class, school, scoreScale field types and values (can add specific value checks if needed)",
													"    pm.expect(lineItemResponse.category.href).to.be.a(\"string\");",
													"    pm.expect(lineItemResponse.category.sourcedId).to.be.a(\"string\");",
													"    pm.expect(lineItemResponse.category.type).to.be.a(\"string\").to.eql(\"category\");",
													"",
													"    pm.expect(lineItemResponse.class.href).to.be.a(\"string\");",
													"    pm.expect(lineItemResponse.class.sourcedId).to.be.a(\"string\");",
													"    pm.expect(lineItemResponse.class.type).to.be.a(\"string\").to.eql(\"class\");",
													"",
													"    pm.expect(lineItemResponse.school.href).to.be.a(\"string\");",
													"    pm.expect(lineItemResponse.school.sourcedId).to.be.a(\"string\");",
													"    pm.expect(lineItemResponse.school.type).to.be.a(\"string\").to.eql(\"org\");",
													"",
													"    pm.expect(lineItemResponse.scoreScale.href).to.be.a(\"string\");",
													"    pm.expect(lineItemResponse.scoreScale.sourcedId).to.be.a(\"string\");",
													"    pm.expect(lineItemResponse.scoreScale.type).to.be.a(\"string\").to.eql(\"scoreScale\");",
													"});",
													"",
													"",
													"pm.test(\"Validate Response Fields Against Request Payload\", () => {",
													"    let actual = pm.response.json().lineItem; // Corrected path to lineItem",
													"    let expected = JSON.parse(pm.environment.get(\"putLineitemRequestBody\"));",
													"",
													"    console.log(\"Actual Response (lineItem):\", actual);",
													"    console.log(\"Expected Request (putLineitemRequestBody):\", expected);",
													"",
													"    pm.expect(actual).to.eql(expected);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Set headers dynamically from environment variables",
													"pm.request.headers.upsert({ key: \"Authorization\", value: pm.environment.get(\"Auth\") });",
													"pm.request.headers.upsert({ key: \"x-app-key\", value: pm.environment.get(\"x-app-key\") });",
													"pm.request.headers.upsert({ key: \"x-client-id\", value: pm.environment.get(\"x-client-id\") });",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}{{endpoint}}/lineItems/{{sourcedId}}",
											"host": [
												"{{URL}}{{endpoint}}"
											],
											"path": [
												"lineItems",
												"{{sourcedId}}"
											],
											"query": [
												{
													"key": "fields",
													"value": "category",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate successful retrieval of all LineItems",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// 1. Validate the Status code",
													"pm.test(\"Validate Status Code, It should be 200 OK\", function () {",
													"    pm.expect([200]).to.include(pm.response.code, \"Unexpected status code\");",
													"});",
													"",
													"",
													"pm.test(\"Validate Line Item Types are not PLACEMENT_TEST\", function () {",
													"    const responseJson = pm.response.json();",
													"",
													"    // Check if lineItems array exists and is not empty",
													"    pm.expect(responseJson.lineItems).to.be.an('array');",
													"    pm.expect(responseJson.lineItems.length).to.be.at.least(0); // Expecting at least 0 line items",
													"",
													"    // Loop through each line item in the array",
													"    responseJson.lineItems.forEach(function (lineItem) {",
													"        // Check if metadata and extensions exist",
													"        pm.expect(lineItem.metadata).to.be.an('object', \"Line item should have metadata\");",
													"        pm.expect(lineItem.metadata.extensions).to.be.an('object', \"Metadata should have extensions\");",
													"",
													"        // Check if fields exist within extensions",
													"        if (lineItem.metadata.extensions.fields) {",
													"            // Check if the 'type' field exists",
													"            pm.expect(lineItem.metadata.extensions.fields).to.have.property('type');",
													"",
													"            // Assert that the 'type' is NOT equal to 'PLACEMENT_TEST'",
													"            pm.expect(lineItem.metadata.extensions.fields.type).to.not.equal(\"PLACEMENT_TEST\", `Line item with sourcedId '${lineItem.sourcedId}' has type 'PLACEMENT_TEST' which is not allowed.`);",
													"        } else {",
													"            pm.expect.fail(`Line item with sourcedId '${lineItem.sourcedId}' is missing the 'fields' property in extensions.`);",
													"        }",
													"    });",
													"});",
													"",
													"",
													"",
													"",
													"",
													"",
													"",
													"pm.test(\"Validate JSON Response Structure\", function () {",
													"    const responseJson = pm.response.json();",
													"",
													"    // Validate top-level properties",
													"    pm.expect(responseJson).to.have.property(\"imsx_codeMajor\");",
													"    pm.expect(responseJson.imsx_codeMajor).to.be.a(\"string\");",
													"",
													"    pm.expect(responseJson).to.have.property(\"imsx_severity\");",
													"    pm.expect(responseJson.imsx_severity).to.be.a(\"string\");",
													"",
													"    pm.expect(responseJson).to.have.property(\"lineItems\");",
													"    pm.expect(responseJson.lineItems).to.be.an(\"array\");",
													"",
													"    // Validate each item in the lineItems array",
													"    responseJson.lineItems.forEach(function (lineItem, index) {",
													"        pm.expect(lineItem).to.have.property(\"sourcedId\");",
													"        pm.expect(lineItem.sourcedId).to.be.a(\"string\");",
													"",
													"        pm.expect(lineItem).to.have.property(\"status\");",
													"        pm.expect(lineItem.status).to.be.a(\"string\");",
													"",
													"        pm.expect(lineItem).to.have.property(\"dateLastModified\");",
													"        pm.expect(lineItem.dateLastModified).to.be.a(\"string\");",
													"        pm.expect(new Date(lineItem.dateLastModified)).to.be.a(\"date\", `lineItems[${index}].dateLastModified should be a valid date format`);",
													"",
													"        pm.expect(lineItem).to.have.property(\"metadata\");",
													"        pm.expect(lineItem.metadata).to.be.an(\"object\");",
													"",
													"        // Validate metadata.extensions",
													"        pm.expect(lineItem.metadata).to.have.property(\"extensions\");",
													"        pm.expect(lineItem.metadata.extensions).to.be.an(\"object\");",
													"",
													"        // Validate metadata.extensions.fields",
													"        pm.expect(lineItem.metadata.extensions).to.have.property(\"fields\");",
													"        pm.expect(lineItem.metadata.extensions.fields).to.be.an(\"object\");",
													"",
													"        pm.expect(lineItem.metadata.extensions.fields).to.have.property(\"type\");",
													"        pm.expect(lineItem.metadata.extensions.fields.type).to.be.a(\"string\");",
													"",
													"        pm.expect(lineItem.metadata.extensions.fields).to.have.property(\"adaptive\");",
													"        pm.expect(lineItem.metadata.extensions.fields.adaptive).to.be.a(\"boolean\");",
													"",
													"        pm.expect(lineItem.metadata.extensions.fields).to.have.property(\"storageName\");",
													"        pm.expect(lineItem.metadata.extensions.fields.storageName).to.be.a(\"string\");",
													"",
													"        pm.expect(lineItem.metadata.extensions.fields).to.have.property(\"creator\");",
													"        pm.expect(lineItem.metadata.extensions.fields.creator).to.be.an(\"array\");",
													"        lineItem.metadata.extensions.fields.creator.forEach(function (creatorItem) {",
													"            pm.expect(creatorItem).to.be.a(\"string\");",
													"        });",
													"",
													"        pm.expect(lineItem.metadata.extensions.fields).to.have.property(\"mediaType\");",
													"        pm.expect(lineItem.metadata.extensions.fields.mediaType).to.be.a(\"string\");",
													"",
													"        pm.expect(lineItem.metadata.extensions.fields).to.have.property(\"keywords\");",
													"        pm.expect(lineItem.metadata.extensions.fields.keywords).to.be.an(\"array\");",
													"        lineItem.metadata.extensions.fields.keywords.forEach(function (keywordItem) {",
													"            pm.expect(keywordItem).to.be.a(\"string\");",
													"        });",
													"",
													"        pm.expect(lineItem.metadata.extensions.fields).to.have.property(\"datePublished\");",
													"        pm.expect(lineItem.metadata.extensions.fields.datePublished).to.be.a(\"string\");",
													"        pm.expect(new Date(lineItem.metadata.extensions.fields.datePublished)).to.be.a(\"date\", `lineItems[${index}].metadata.extensions.fields.datePublished should be a valid date format`);",
													"",
													"        pm.expect(lineItem.metadata.extensions.fields).to.have.property(\"dateToActivate\");",
													"        pm.expect(lineItem.metadata.extensions.fields.dateToActivate).to.be.a(\"string\");",
													"        pm.expect(new Date(lineItem.metadata.extensions.fields.dateToActivate)).to.be.a(\"date\", `lineItems[${index}].metadata.extensions.fields.dateToActivate should be a valid date format`);",
													"",
													"        pm.expect(lineItem.metadata.extensions.fields).to.have.property(\"dateToShow\");",
													"        pm.expect(lineItem.metadata.extensions.fields.dateToShow).to.be.a(\"string\");",
													"        pm.expect(new Date(lineItem.metadata.extensions.fields.dateToShow)).to.be.a(\"date\", `lineItems[${index}].metadata.extensions.fields.dateToShow should be a valid date format`);",
													"",
													"        pm.expect(lineItem.metadata.extensions.fields).to.have.property(\"dateToStartOn\");",
													"        pm.expect(lineItem.metadata.extensions.fields.dateToStartOn).to.be.a(\"string\");",
													"        pm.expect(new Date(lineItem.metadata.extensions.fields.dateToStartOn)).to.be.a(\"date\", `lineItems[${index}].metadata.extensions.fields.dateToStartOn should be a valid date format`);",
													"",
													"        pm.expect(lineItem.metadata.extensions.fields).to.have.property(\"maxAttempts\");",
													"        pm.expect(lineItem.metadata.extensions.fields.maxAttempts).to.be.a(\"number\");",
													"",
													"        pm.expect(lineItem.metadata.extensions.fields).to.have.property(\"maxSubmits\");",
													"        pm.expect(lineItem.metadata.extensions.fields.maxSubmits).to.be.a(\"number\");",
													"",
													"        pm.expect(lineItem.metadata.extensions.fields).to.have.property(\"version\");",
													"        pm.expect(lineItem.metadata.extensions.fields.version).to.be.a(\"string\");",
													"",
													"        pm.expect(lineItem.metadata.extensions.fields).to.have.property(\"applicationId\");",
													"        pm.expect(lineItem.metadata.extensions.fields.applicationId).to.be.a(\"string\");",
													"",
													"        pm.expect(lineItem.metadata.extensions.fields).to.have.property(\"competencyId\");",
													"        pm.expect(lineItem.metadata.extensions.fields.competencyId).to.be.a(\"string\");",
													"",
													"        pm.expect(lineItem.metadata.extensions.fields).to.have.property(\"subject\");",
													"        pm.expect(lineItem.metadata.extensions.fields.subject).to.be.a(\"string\");",
													"",
													"        pm.expect(lineItem).to.have.property(\"title\");",
													"        pm.expect(lineItem.title).to.be.a(\"string\");",
													"",
													"        pm.expect(lineItem).to.have.property(\"description\");",
													"        pm.expect(lineItem.description).to.be.a(\"string\");",
													"",
													"        pm.expect(lineItem).to.have.property(\"assignDate\");",
													"        pm.expect(lineItem.assignDate).to.be.a(\"string\");",
													"        pm.expect(new Date(lineItem.assignDate)).to.be.a(\"date\", `lineItems[${index}].assignDate should be a valid date format`);",
													"",
													"        pm.expect(lineItem).to.have.property(\"dueDate\");",
													"        pm.expect(lineItem.dueDate).to.be.a(\"string\");",
													"        pm.expect(new Date(lineItem.dueDate)).to.be.a(\"date\", `lineItems[${index}].dueDate should be a valid date format`);",
													"",
													"        pm.expect(lineItem).to.have.property(\"class\");",
													"        pm.expect(lineItem.class).to.be.an(\"object\");",
													"        pm.expect(lineItem.class).to.have.property(\"href\");",
													"        pm.expect(lineItem.class.href).to.be.a(\"string\");",
													"        pm.expect(lineItem.class).to.have.property(\"sourcedId\");",
													"        pm.expect(lineItem.class.sourcedId).to.be.a(\"string\");",
													"        pm.expect(lineItem.class).to.have.property(\"type\");",
													"        pm.expect(lineItem.class.type).to.be.a(\"string\");",
													"",
													"        pm.expect(lineItem).to.have.property(\"scoreScale\");",
													"        pm.expect(lineItem.scoreScale).to.be.an(\"object\");",
													"        pm.expect(lineItem.scoreScale).to.have.property(\"href\");",
													"        pm.expect(lineItem.scoreScale.href).to.be.a(\"string\");",
													"        pm.expect(lineItem.scoreScale).to.have.property(\"sourcedId\");",
													"        pm.expect(lineItem.scoreScale.sourcedId).to.be.a(\"string\");",
													"        pm.expect(lineItem.scoreScale).to.have.property(\"type\");",
													"        pm.expect(lineItem.scoreScale.type).to.be.a(\"string\");",
													"",
													"        pm.expect(lineItem).to.have.property(\"school\");",
													"        pm.expect(lineItem.school).to.be.an(\"object\");",
													"        pm.expect(lineItem.school).to.have.property(\"href\");",
													"        pm.expect(lineItem.school.href).to.be.a(\"string\");",
													"        pm.expect(lineItem.school).to.have.property(\"sourcedId\");",
													"        pm.expect(lineItem.school.sourcedId).to.be.a(\"string\");",
													"        pm.expect(lineItem.school).to.have.property(\"type\");",
													"        pm.expect(lineItem.school.type).to.be.a(\"string\");",
													"",
													"        pm.expect(lineItem).to.have.property(\"category\");",
													"        pm.expect(lineItem.category).to.be.an(\"object\");",
													"        pm.expect(lineItem.category).to.have.property(\"href\");",
													"        pm.expect(lineItem.category.href).to.be.a(\"string\");",
													"        pm.expect(lineItem.category).to.have.property(\"sourcedId\");",
													"        pm.expect(lineItem.category.sourcedId).to.be.a(\"string\");",
													"        pm.expect(lineItem.category).to.have.property(\"type\");",
													"        pm.expect(lineItem.category.type).to.be.a(\"string\");",
													"",
													"        pm.expect(lineItem).to.have.property(\"gradingPeriod\");",
													"        pm.expect(lineItem.gradingPeriod).to.be.an(\"object\");",
													"        pm.expect(lineItem.gradingPeriod).to.have.property(\"href\");",
													"        pm.expect(lineItem.gradingPeriod.href).to.be.a(\"string\");",
													"        pm.expect(lineItem.gradingPeriod).to.have.property(\"sourcedId\");",
													"        pm.expect(lineItem.gradingPeriod.sourcedId).to.be.a(\"string\");",
													"        pm.expect(lineItem.gradingPeriod).to.have.property(\"type\");",
													"        pm.expect(lineItem.gradingPeriod.type).to.be.a(\"string\");",
													"",
													"        pm.expect(lineItem).to.have.property(\"academicSession\");",
													"        pm.expect(lineItem.academicSession).to.be.an(\"object\");",
													"        pm.expect(lineItem.academicSession).to.have.property(\"href\");",
													"        pm.expect(lineItem.academicSession.href).to.be.a(\"string\");",
													"        pm.expect(lineItem.academicSession).to.have.property(\"sourcedId\");",
													"        pm.expect(lineItem.academicSession.sourcedId).to.be.a(\"string\");",
													"        pm.expect(lineItem.academicSession).to.have.property(\"type\");",
													"        pm.expect(lineItem.academicSession.type).to.be.a(\"string\");",
													"",
													"        pm.expect(lineItem).to.have.property(\"resultValueMin\");",
													"        pm.expect(lineItem.resultValueMin).to.be.a(\"number\");",
													"",
													"        pm.expect(lineItem).to.have.property(\"resultValueMax\");",
													"        pm.expect(lineItem.resultValueMax).to.be.a(\"number\");",
													"",
													"        pm.expect(lineItem).to.have.property(\"learningObjectiveSet\");",
													"        pm.expect(lineItem.learningObjectiveSet).to.be.an(\"array\");",
													"        // You can add more specific validation for the learningObjectiveSet items if needed",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Set headers dynamically from environment variables",
													"pm.request.headers.upsert({ key: \"Authorization\", value: pm.environment.get(\"Auth\") });",
													"pm.request.headers.upsert({ key: \"x-app-key\", value: pm.environment.get(\"x-app-key\") });",
													"pm.request.headers.upsert({ key: \"x-client-id\", value: pm.environment.get(\"x-client-id\") });",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}{{pathPrefix}}/lineItems",
											"host": [
												"{{URL}}{{pathPrefix}}"
											],
											"path": [
												"lineItems"
											],
											"query": [
												{
													"key": "sort",
													"value": "resultValueMax",
													"disabled": true
												},
												{
													"key": "orderBy",
													"value": "ASC",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "resultValueMax",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "1",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "0",
													"disabled": true
												},
												{
													"key": "filter",
													"value": "resultValueMax!='null'",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "deleteLineItem",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate Status Code, It should be 204 No Content\", function () {",
													"    pm.expect([204]).to.include(pm.response.code, \"Unexpected status code\");",
													"});",
													"",
													"",
													"pm.test(\"Response body should be completely empty\", function () {",
													"    pm.expect(pm.response.text()).to.equal(\"\"); // Ensure response body is completely empty",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Set headers dynamically from environment variables",
													"pm.request.headers.upsert({ key: \"Authorization\", value: pm.environment.get(\"Auth\") });",
													"pm.request.headers.upsert({ key: \"x-app-key\", value: pm.environment.get(\"x-app-key\") });",
													"pm.request.headers.upsert({ key: \"x-client-id\", value: pm.environment.get(\"x-client-id\") });",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}{{endpoint}}/lineItems/{{sourcedId}}",
											"host": [
												"{{URL}}{{endpoint}}"
											],
											"path": [
												"lineItems",
												"{{sourcedId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Functional",
							"item": [
								{
									"name": "putLineItem",
									"item": [
										{
											"name": "Validate successful creation of LineItem with minimal required payload",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Validate Status Code, It should be 201 Created\", function () {",
															"    pm.expect([201]).to.include(pm.response.code, \"Unexpected status code\");",
															"});",
															"",
															"",
															"pm.test(\"Response body should be completely empty\", function () {",
															"    pm.expect(pm.response.text()).to.equal(\"\"); // Ensure response body is completely empty",
															"});",
															"",
															"",
															"let requestBody = JSON.parse(request.data);",
															"let putLineitemRequestBody = requestBody.lineItem;",
															"",
															"// Store full object as a single environment variable",
															"pm.environment.set(\"putLineitemRequestBody\", JSON.stringify(putLineitemRequestBody));",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Set headers dynamically from environment variables",
															"pm.request.headers.upsert({ key: \"Authorization\", value: pm.environment.get(\"Auth\") });",
															"pm.request.headers.upsert({ key: \"x-app-key\", value: pm.environment.get(\"x-app-key\") });",
															"pm.request.headers.upsert({ key: \"x-client-id\", value: pm.environment.get(\"x-client-id\") });",
															"",
															"// Generate a random UUID for sourcedId",
															"function generateUUID() {",
															"    let dt = new Date().getTime();",
															"    let uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {",
															"        let r = (dt + Math.random() * 16) % 16 | 0;",
															"        dt = Math.floor(dt / 16);",
															"        return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);",
															"    });",
															"    return uuid;",
															"}",
															"",
															"let courseSourcedId = generateUUID();",
															"let classSourcedId = generateUUID();",
															"let scoreScaleSourcedId = generateUUID();",
															"let categorySourcedId = generateUUID();",
															"let sourcedId = generateUUID();",
															"",
															"",
															"pm.environment.set(\"courseSourcedId\", courseSourcedId);",
															"pm.environment.set(\"classSourcedId\", classSourcedId);",
															"pm.environment.set(\"scoreScaleSourcedId\", scoreScaleSourcedId);",
															"pm.environment.set(\"categorySourcedId\", categorySourcedId);",
															"pm.environment.set(\"sourcedId\", sourcedId);",
															"",
															"",
															"// Set headers",
															"const headers = {",
															"    'Authorization': pm.environment.get(\"Auth\"),",
															"    'x-app-key': pm.environment.get(\"x-app-key\"),",
															"    'x-client-id': pm.environment.get(\"x-client-id\"),",
															"    'Content-Type': 'application/json'",
															"};",
															"",
															"",
															"// Generate current UTC timestamp in ISO format: 2025-01-29T06:51:57Z",
															"function getCurrentISOString() {",
															"    return new Date().toISOString().split('.')[0] + \"Z\";",
															"}",
															"",
															"// Set dynamic date variables",
															"let isoDateTime = getCurrentISOString(); // full timestamp",
															"let isoDateOnly = isoDateTime.split('T')[0]; // date only",
															"",
															"pm.environment.set(\"isoDateTime\", isoDateTime);",
															"pm.environment.set(\"isoDateOnly\", isoDateOnly);",
															"",
															"console.log(\"Generated ISO DateTime: \" + isoDateTime);",
															"console.log(\"Generated ISO Date Only: \" + isoDateOnly);",
															"",
															"// Define Course API URL",
															"let courseUrl = pm.environment.get(\"URL\") + pm.environment.get(\"customPathPrefix\")+\"/courses\";",
															"",
															"// Define getAllOrgs API URL",
															"let getAllOrgsUrl = pm.environment.get(\"URL\") + pm.environment.get(\"rosterPathPrefix\")+\"/orgs\";",
															"",
															"// Define getAllterms API URL",
															"let getAllTermsUrl = pm.environment.get(\"URL\") + pm.environment.get(\"rosterPathPrefix\")+\"/terms\";",
															"",
															"// Define Class API URL",
															"let classUrl = pm.environment.get(\"URL\") + pm.environment.get(\"customPathPrefix\")+\"/classes\";",
															"",
															"// Define ScoreScale API URL",
															"let scoreScaleUrl = pm.environment.get(\"URL\") + pm.environment.get(\"pathPrefix\")+\"/scoreScales/\"+ scoreScaleSourcedId;",
															"",
															"// Define Category API URL",
															"let categoryUrl = pm.environment.get(\"URL\") + pm.environment.get(\"pathPrefix\")+\"/categories/\"+ categorySourcedId;",
															"",
															"",
															"// Define Course API Request Body",
															"let courseRequestBody = {",
															"    \"sourcedId\": pm.environment.get(\"courseSourcedId\"), //required",
															"    \"status\": \"active\", //required",
															"    \"title\": \"QA\", //required",
															"    \"courseCode\": \"courseCode\" //required",
															"}",
															"",
															"",
															"// Define Class API Request Body",
															"let classRequestBody = {",
															"    \"sourcedId\": pm.environment.get(\"classSourcedId\"), //Required",
															"    \"status\": \"active\", //Required",
															"    \"title\": \"title\", //Required",
															"    \"classType\": \"SCHEDULED\", //Required",
															"    \"course\": { //required",
															"        \"href\": \"/courses/\" + pm.environment.get(\"courseSourcedId\"),",
															"        \"sourcedId\": pm.environment.get(\"courseSourcedId\"),",
															"        \"type\": \"course\"",
															"                },",
															"    \"school\": { //required",
															"        \"href\": \"/org/\" + pm.environment.get(\"school_sourcedId\"),",
															"        \"sourcedId\": pm.environment.get(\"school_sourcedId\"),",
															"        \"type\": \"org\"",
															"                },",
															"    \"terms\": [ //required",
															"        {",
															"            \"href\": \"/academicSession/\" + pm.environment.get(\"term_sourcedId\"),",
															"            \"sourcedId\":pm.environment.get(\"term_sourcedId\"),",
															"             \"type\": \"academicSession\"",
															"        }",
															"    ]",
															"}",
															"",
															"",
															"// Define ScoreScale API Request Body",
															"let scoreScaleRequestBody = {",
															"    \"scoreScale\": {",
															"    \"sourcedId\":pm.environment.get(\"scoreScaleSourcedId\"), //required",
															"    \"status\": \"active\", //required",
															"    \"dateLastModified\": isoDateTime, //required",
															"    \"metadata\": {",
															"        \"test\": \"metadata\"",
															"                },",
															"    \"title\": \"QATestProd\", //required",
															"    \"type\": \"QATestProd\", //required",
															"    \"course\": {",
															"            \"href\": \"/course/\" + pm.environment.get(\"courseSourcedId\"),",
															"            \"sourcedId\": pm.environment.get(\"courseSourcedId\"),",
															"            \"type\": \"course\"",
															"        },",
															"    \"class\": {  //required",
															"            \"href\": \"/classes/\" + pm.environment.get(\"classSourcedId\"),",
															"            \"sourcedId\": pm.environment.get(\"classSourcedId\"),",
															"            \"type\": \"class\"",
															"        },",
															"    \"scoreScaleValue\": [ //required",
															"        {",
															"            \"itemValueLHS\": \"0-57\",",
															"            \"itemValueRHS\": \"F\"",
															"        },",
															"        {",
															"            \"itemValueLHS\": \"60-69\",",
															"            \"itemValueRHS\": \"D\"",
															"        }",
															"                        ]",
															"    }",
															"}",
															"",
															"",
															"// Define Category API Request Body",
															"let categoryRequestBody = {",
															"     \"category\": {",
															"        \"sourcedId\": pm.environment.get(\"categorySourcedId\"),",
															"        \"status\": \"active\",",
															"        \"dateLastModified\": isoDateTime,",
															"        \"metadata\": {},",
															"        \"title\": \"title\",",
															"        \"weight\": 3",
															"                }",
															"}",
															"",
															"",
															"// Make the Course POST request",
															"pm.sendRequest({",
															"    url: courseUrl,",
															"    method: 'POST',",
															"    header: headers,",
															"    body: {",
															"        mode: 'raw',",
															"        raw: JSON.stringify(courseRequestBody)",
															"    }",
															"}, function (err, res) {",
															"    if (err) {",
															"        console.error(\"POST Course API Error: \", err);",
															"        pm.environment.unset(\"courseSourcedId\"); // Clear sourcedId on failure",
															"        throw new Error(\"Course POST API request failed.\");",
															"    }",
															"",
															"    if (res.code !== 201) {  // Ensure status is 201 Created",
															"        console.error(\"Unexpected POST Course API Response Code: \" + res.code);",
															"        pm.environment.unset(\"courseSourcedId\"); // Clear sourcedId on failure",
															"        throw new Error(\"Course POST API did not return 201 Created.\");",
															"    }",
															"",
															"    console.log(\"Course POST API succeeded with status: \" + res.code);",
															"",
															"",
															" // Make getAllOrgs Request",
															"    pm.sendRequest({",
															"        url: getAllOrgsUrl,",
															"        method: 'GET',",
															"        header: headers",
															"    }, function (err, res) {",
															"        if (err || res.code !== 200) {",
															"            console.error(\"GET Orgs API Failed. Code:\", res?.code || \"No response\", \"Error:\", err);",
															"            throw new Error(\"GET Orgs API request failed.\");",
															"        }",
															"        console.log(\"GET Orgs API succeeded with status:\", res.code);",
															"        let response = res.json();",
															"        let schoolOrgs = response.orgs.filter(org => org.type === \"SCHOOL\");",
															"",
															"        if (schoolOrgs.length === 0) {",
															"            throw new Error(\"No orgs of type 'SCHOOL' found.\");",
															"        }",
															"",
															"        // Get a random school sourcedId",
															"        let randomIndex = Math.floor(Math.random() * schoolOrgs.length);",
															"        let schoolSourcedId = schoolOrgs[randomIndex].sourcedId;",
															"        console.log(\"Selected school sourcedId: \" + schoolSourcedId);",
															"        // Save to environment variable for later use",
															"        pm.environment.set(\"school_sourcedId\", schoolSourcedId);",
															"",
															"",
															"     // Make getAllterms Request",
															"        pm.sendRequest({",
															"            url: getAllTermsUrl,",
															"            method: 'GET',",
															"            header: headers",
															"        }, function (err, res) {",
															"            if (err || res.code !== 200) {",
															"                console.error(\"GET TERMS API Failed. Code:\", res?.code || \"No response\", \"Error:\", err);",
															"                throw new Error(\"GET TERMS API request failed.\");",
															"            }",
															"",
															"            console.log(\"GET TERMS API succeeded with status:\", res.code);",
															"",
															"            let response = res.json();",
															"            let termSessions = response.academicSessions.filter(session => session.type === \"TERM\");",
															"",
															"            if (termSessions.length === 0) {",
															"                throw new Error(\"No academicSessions of type 'TERM' found.\");",
															"            }",
															"",
															"            // Select a random term sourcedId",
															"            let randomIndex = Math.floor(Math.random() * termSessions.length);",
															"            let termSourcedId = termSessions[randomIndex].sourcedId;",
															"",
															"            console.log(\"Selected TERM sourcedId: \" + termSourcedId);",
															"",
															"            // Save to environment variable",
															"            pm.environment.set(\"term_sourcedId\", termSourcedId);",
															"",
															"            // Make the Class POST request",
															"            pm.sendRequest({",
															"                url: classUrl,",
															"                method: 'POST',",
															"                header: headers,",
															"                body: {",
															"                    mode: 'raw',",
															"                    raw: JSON.stringify(classRequestBody)",
															"                }",
															"            }, function (err, res) {",
															"                if (err) {",
															"                    console.error(\"POST Class API Error: \", err);",
															"                    pm.environment.unset(\"classSourcedId\"); // Clear sourcedId on failure",
															"                    throw new Error(\"Class POST API request failed.\");",
															"                }",
															"",
															"                if (res.code !== 201) {  // Ensure status is 201 Created",
															"                    console.error(\"Unexpected POST Class API Response Code: \" + res.code);",
															"                    pm.environment.unset(\"classSourcedId\"); // Clear sourcedId on failure",
															"                    throw new Error(\"POST Class API did not return 201 Created.\");",
															"                }",
															"",
															"                console.log(\"POST Class API succeeded with status: \" + res.code);",
															"",
															"",
															"                // Make the PUT ScoreScale request",
															"                pm.sendRequest({",
															"                    url: scoreScaleUrl,",
															"                    method: 'PUT',",
															"                    header: headers,",
															"                    body: {",
															"                        mode: 'raw',",
															"                        raw: JSON.stringify(scoreScaleRequestBody)",
															"                    }",
															"                }, function (err, res) {",
															"                    if (err) {",
															"                        console.error(\"PUT ScoreScale API Error: \", err);",
															"                        pm.environment.unset(\"scoreScaleSourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT ScoreScale API request failed.\");",
															"                    }",
															"",
															"                    if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
															"                        console.error(\"Unexpected PUT ScoreScale API Response Code: \" + res.code);",
															"                        pm.environment.unset(\"scoreScaleSourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT ScoreScale API did not return 200 or 201.\");",
															"                    }",
															"",
															"                    console.log(\"PUT ScoreScale API succeeded with status: \" + res.code);",
															"",
															"",
															"                    // Make the PUT Category request",
															"                pm.sendRequest({",
															"                    url: categoryUrl,",
															"                    method: 'PUT',",
															"                    header: headers,",
															"                    body: {",
															"                        mode: 'raw',",
															"                        raw: JSON.stringify(categoryRequestBody)",
															"                    }",
															"                }, function (err, res) {",
															"                    if (err) {",
															"                        console.error(\"PUT Category API Error: \", err);",
															"                        pm.environment.unset(\"categorySourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT Category API request failed.\");",
															"                    }",
															"",
															"                    if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
															"                        console.error(\"Unexpected PUT Category API Response Code: \" + res.code);",
															"                        pm.environment.unset(\"categorySourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT Category API did not return 200 or 201.\");",
															"                    }",
															"",
															"                    console.log(\"PUT Category API succeeded with status: \" + res.code);",
															"",
															"                    });",
															"                });",
															"            });",
															"        });",
															"    });",
															"});",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"lineItem\": {\n        \"sourcedId\": \"{{sourcedId}}\", // required\n        \"status\": \"active\", // required\n        \"dateLastModified\": \"{{isoDateTime}}\", // Correct UTC ISO8601 format // required\n        \"title\": \"Math\\nTest\", // required\n        \"assignDate\": \"{{isoDateTime}}\", // Correct UTC ISO8601 format // required\n        \"dueDate\": \"{{isoDateTime}}\", // Correct UTC ISO8601 format // required\n        \"class\": { // required\n            \"href\": \"/classes/c6b2a92c-6efd-4d0d-989a-dddad7edc98d\",\n            \"sourcedId\": \"{{classSourcedId}}\",\n            \"type\": \"class\"\n        },\n        \"school\": { // required\n            \"href\": \"/schools/91edfc73-d1ab-4168-93de-85a71d7f318d\",\n            \"sourcedId\": \"{{school_sourcedId}}\",\n            \"type\": \"org\"\n        },\n        \"category\": { // required\n            \"href\": \"/category/5252bd60-6196-4063-9221-a9f27fe52c55\",\n            \"sourcedId\": \"{{categorySourcedId}}\",\n            \"type\": \"category\"\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}{{endpoint}}/lineItems/{{sourcedId}}",
													"host": [
														"{{URL}}{{endpoint}}"
													],
													"path": [
														"lineItems",
														"{{sourcedId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify API throws an error for existing sourcedId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Parse the JSON response",
															"let jsonData = pm.response.json(); ",
															"",
															"pm.test(\" API should return 409Conflict\", function () {",
															"  pm.response.to.have.status(409);",
															"});",
															"",
															"",
															"",
															"// Construct expected error message",
															"let sourcedId = pm.environment.get(\"sourcedId\"); // Define the sourcedId here",
															"let expectedErrorMessage = `A LineItem with the sourcedId ${sourcedId} already exists.`; // Corrected typo in \"nalready\"",
															"",
															"// Validate the error message exactly",
															"pm.test(\"Verify Error message and it should matches with requested sourcedId \", function () {",
															"    pm.expect(jsonData.imsx_description).to.eql(expectedErrorMessage);",
															"});",
															"",
															"",
															"",
															"pm.test(\"Validate response structure for LineItem conflict_error \", function () {",
															"    const jsonData = pm.response.json();",
															"",
															"    // Top-level fields",
															"    pm.expect(jsonData).to.have.property(\"imsx_codeMajor\", \"failure\");",
															"    pm.expect(jsonData).to.have.property(\"imsx_severity\", \"error\");",
															"    pm.expect(jsonData).to.have.property(\"imsx_description\");",
															"    ",
															"",
															"    // Check imsx_CodeMinor structure",
															"    pm.expect(jsonData).to.have.property(\"imsx_CodeMinor\");",
															"    pm.expect(jsonData.imsx_CodeMinor).to.have.property(\"imsx_codeMinorField\");",
															"    pm.expect(jsonData.imsx_CodeMinor.imsx_codeMinorField).to.be.an(\"array\").that.is.not.empty;",
															"",
															"    // Validate inner fields",
															"    const minorField = jsonData.imsx_CodeMinor.imsx_codeMinorField[0];",
															"    pm.expect(minorField).to.have.property(\"imsx_codeMinorFieldName\", \"TargetEndSystem\");",
															"    pm.expect(minorField).to.have.property(\"imsx_codeMinorFieldValue\", \"conflict_error\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Set headers dynamically from environment variables",
															"pm.request.headers.upsert({ key: \"Authorization\", value: pm.environment.get(\"Auth\") });",
															"pm.request.headers.upsert({ key: \"x-app-key\", value: pm.environment.get(\"x-app-key\") });",
															"pm.request.headers.upsert({ key: \"x-client-id\", value: pm.environment.get(\"x-client-id\") });",
															"",
															"// Generate a random UUID for sourcedId",
															"function generateUUID() {",
															"    let dt = new Date().getTime();",
															"    let uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {",
															"        let r = (dt + Math.random() * 16) % 16 | 0;",
															"        dt = Math.floor(dt / 16);",
															"        return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);",
															"    });",
															"    return uuid;",
															"}",
															"",
															"let courseSourcedId = generateUUID();",
															"let classSourcedId = generateUUID();",
															"let scoreScaleSourcedId = generateUUID();",
															"let categorySourcedId = generateUUID();",
															"let sourcedId = generateUUID();",
															"",
															"",
															"pm.environment.set(\"courseSourcedId\", courseSourcedId);",
															"pm.environment.set(\"classSourcedId\", classSourcedId);",
															"pm.environment.set(\"scoreScaleSourcedId\", scoreScaleSourcedId);",
															"pm.environment.set(\"categorySourcedId\", categorySourcedId);",
															"pm.environment.set(\"sourcedId\", sourcedId);",
															"",
															"",
															"// Set headers",
															"const headers = {",
															"    'Authorization': pm.environment.get(\"Auth\"),",
															"    'x-app-key': pm.environment.get(\"x-app-key\"),",
															"    'x-client-id': pm.environment.get(\"x-client-id\"),",
															"    'Content-Type': 'application/json'",
															"};",
															"",
															"",
															"// Generate current UTC timestamp in ISO format: 2025-01-29T06:51:57Z",
															"function getCurrentISOString() {",
															"    return new Date().toISOString().split('.')[0] + \"Z\";",
															"}",
															"",
															"// Set dynamic date variables",
															"let isoDateTime = getCurrentISOString(); // full timestamp",
															"let isoDateOnly = isoDateTime.split('T')[0]; // date only",
															"",
															"pm.environment.set(\"isoDateTime\", isoDateTime);",
															"pm.environment.set(\"isoDateOnly\", isoDateOnly);",
															"",
															"console.log(\"Generated ISO DateTime: \" + isoDateTime);",
															"console.log(\"Generated ISO Date Only: \" + isoDateOnly);",
															"",
															"// Define Course API URL",
															"let courseUrl = pm.environment.get(\"URL\") + pm.environment.get(\"customPathPrefix\")+\"/courses\";",
															"",
															"// Define getAllOrgs API URL",
															"let getAllOrgsUrl = pm.environment.get(\"URL\") + pm.environment.get(\"rosterPathPrefix\")+\"/orgs\";",
															"",
															"// Define getAllterms API URL",
															"let getAllTermsUrl = pm.environment.get(\"URL\") + pm.environment.get(\"rosterPathPrefix\")+\"/terms\";",
															"",
															"// Define Class API URL",
															"let classUrl = pm.environment.get(\"URL\") + pm.environment.get(\"customPathPrefix\")+\"/classes\";",
															"",
															"// Define ScoreScale API URL",
															"let scoreScaleUrl = pm.environment.get(\"URL\") + pm.environment.get(\"pathPrefix\")+\"/scoreScales/\"+ scoreScaleSourcedId;",
															"",
															"// Define Category API URL",
															"let categoryUrl = pm.environment.get(\"URL\") + pm.environment.get(\"pathPrefix\")+\"/categories/\"+ categorySourcedId;",
															"",
															"// Define putLineItem API URL",
															"let putLineItemUrl = pm.environment.get(\"URL\") + pm.environment.get(\"pathPrefix\")+\"/lineItems/\"+ sourcedId;",
															"",
															"",
															"// Define Course API Request Body",
															"let courseRequestBody = {",
															"    \"sourcedId\": pm.environment.get(\"courseSourcedId\"), //required",
															"    \"status\": \"active\", //required",
															"    \"title\": \"QA\", //required",
															"    \"courseCode\": \"courseCode\" //required",
															"}",
															"",
															"",
															"// Define Class API Request Body",
															"let classRequestBody = {",
															"    \"sourcedId\": pm.environment.get(\"classSourcedId\"), //Required",
															"    \"status\": \"active\", //Required",
															"    \"title\": \"title\", //Required",
															"    \"classType\": \"SCHEDULED\", //Required",
															"    \"course\": { //required",
															"        \"href\": \"/courses/\" + pm.environment.get(\"courseSourcedId\"),",
															"        \"sourcedId\": pm.environment.get(\"courseSourcedId\"),",
															"        \"type\": \"course\"",
															"                },",
															"    \"school\": { //required",
															"        \"href\": \"/org/\" + pm.environment.get(\"school_sourcedId\"),",
															"        \"sourcedId\": pm.environment.get(\"school_sourcedId\"),",
															"        \"type\": \"org\"",
															"                },",
															"    \"terms\": [ //required",
															"        {",
															"            \"href\": \"/academicSession/\" + pm.environment.get(\"term_sourcedId\"),",
															"            \"sourcedId\":pm.environment.get(\"term_sourcedId\"),",
															"             \"type\": \"academicSession\"",
															"        }",
															"    ]",
															"}",
															"",
															"",
															"// Define ScoreScale API Request Body",
															"let scoreScaleRequestBody = {",
															"    \"scoreScale\": {",
															"    \"sourcedId\":pm.environment.get(\"scoreScaleSourcedId\"), //required",
															"    \"status\": \"active\", //required",
															"    \"dateLastModified\": isoDateTime, //required",
															"    \"metadata\": {",
															"        \"test\": \"metadata\"",
															"                },",
															"    \"title\": \"QATestProd\", //required",
															"    \"type\": \"QATestProd\", //required",
															"    \"course\": {",
															"            \"href\": \"/course/\" + pm.environment.get(\"courseSourcedId\"),",
															"            \"sourcedId\": pm.environment.get(\"courseSourcedId\"),",
															"            \"type\": \"course\"",
															"        },",
															"    \"class\": {  //required",
															"            \"href\": \"/classes/\" + pm.environment.get(\"classSourcedId\"),",
															"            \"sourcedId\": pm.environment.get(\"classSourcedId\"),",
															"            \"type\": \"class\"",
															"        },",
															"    \"scoreScaleValue\": [ //required",
															"        {",
															"            \"itemValueLHS\": \"0-57\",",
															"            \"itemValueRHS\": \"F\"",
															"        },",
															"        {",
															"            \"itemValueLHS\": \"60-69\",",
															"            \"itemValueRHS\": \"D\"",
															"        }",
															"                        ]",
															"    }",
															"}",
															"",
															"",
															"// Define Category API Request Body",
															"let categoryRequestBody = {",
															"     \"category\": {",
															"        \"sourcedId\": pm.environment.get(\"categorySourcedId\"),",
															"        \"status\": \"active\",",
															"        \"dateLastModified\": isoDateTime,",
															"        \"metadata\": {},",
															"        \"title\": \"title\",",
															"        \"weight\": 3",
															"                }",
															"}",
															"",
															"",
															"// Define Category API Request Body",
															"let putLineItemRequestBody = {",
															"    \"lineItem\": {",
															"        \"sourcedId\": pm.environment.get(\"sourcedId\"), // required",
															"        \"status\": \"active\", // required",
															"        \"dateLastModified\": isoDateTime, // Correct UTC ISO8601 format // required",
															"        \"title\": \"MathTest\", // required",
															"        \"assignDate\": isoDateTime, // Correct UTC ISO8601 format // required",
															"        \"dueDate\": isoDateTime, // Correct UTC ISO8601 format // required",
															"        \"class\": { // required",
															"            \"href\": \"/classes/c6b2a92c-6efd-4d0d-989a-dddad7edc98d\",",
															"            \"sourcedId\": pm.environment.get(\"classSourcedId\"),",
															"            \"type\": \"class\"",
															"        },",
															"        \"school\": { // required",
															"            \"href\": \"/schools/91edfc73-d1ab-4168-93de-85a71d7f318d\",",
															"            \"sourcedId\": pm.environment.get(\"school_sourcedId\"),",
															"            \"type\": \"org\"",
															"        },",
															"        \"category\": { // required",
															"            \"href\": \"/category/5252bd60-6196-4063-9221-a9f27fe52c55\",",
															"            \"sourcedId\": pm.environment.get(\"categorySourcedId\"),",
															"            \"type\": \"category\"",
															"        }",
															"    }",
															"}",
															"",
															"// Make the Course POST request",
															"pm.sendRequest({",
															"    url: courseUrl,",
															"    method: 'POST',",
															"    header: headers,",
															"    body: {",
															"        mode: 'raw',",
															"        raw: JSON.stringify(courseRequestBody)",
															"    }",
															"}, function (err, res) {",
															"    if (err) {",
															"        console.error(\"POST Course API Error: \", err);",
															"        pm.environment.unset(\"courseSourcedId\"); // Clear sourcedId on failure",
															"        throw new Error(\"Course POST API request failed.\");",
															"    }",
															"",
															"    if (res.code !== 201) {  // Ensure status is 201 Created",
															"        console.error(\"Unexpected POST Course API Response Code: \" + res.code);",
															"        pm.environment.unset(\"courseSourcedId\"); // Clear sourcedId on failure",
															"        throw new Error(\"Course POST API did not return 201 Created.\");",
															"    }",
															"",
															"    console.log(\"Course POST API succeeded with status: \" + res.code);",
															"",
															"",
															" // Make getAllOrgs Request",
															"    pm.sendRequest({",
															"        url: getAllOrgsUrl,",
															"        method: 'GET',",
															"        header: headers",
															"    }, function (err, res) {",
															"        if (err || res.code !== 200) {",
															"            console.error(\"GET Orgs API Failed. Code:\", res?.code || \"No response\", \"Error:\", err);",
															"            throw new Error(\"GET Orgs API request failed.\");",
															"        }",
															"        console.log(\"GET Orgs API succeeded with status:\", res.code);",
															"        let response = res.json();",
															"        let schoolOrgs = response.orgs.filter(org => org.type === \"SCHOOL\");",
															"",
															"        if (schoolOrgs.length === 0) {",
															"            throw new Error(\"No orgs of type 'SCHOOL' found.\");",
															"        }",
															"",
															"        // Get a random school sourcedId",
															"        let randomIndex = Math.floor(Math.random() * schoolOrgs.length);",
															"        let schoolSourcedId = schoolOrgs[randomIndex].sourcedId;",
															"        console.log(\"Selected school sourcedId: \" + schoolSourcedId);",
															"        // Save to environment variable for later use",
															"        pm.environment.set(\"school_sourcedId\", schoolSourcedId);",
															"",
															"",
															"     // Make getAllterms Request",
															"        pm.sendRequest({",
															"            url: getAllTermsUrl,",
															"            method: 'GET',",
															"            header: headers",
															"        }, function (err, res) {",
															"            if (err || res.code !== 200) {",
															"                console.error(\"GET TERMS API Failed. Code:\", res?.code || \"No response\", \"Error:\", err);",
															"                throw new Error(\"GET TERMS API request failed.\");",
															"            }",
															"",
															"            console.log(\"GET TERMS API succeeded with status:\", res.code);",
															"",
															"            let response = res.json();",
															"            let termSessions = response.academicSessions.filter(session => session.type === \"TERM\");",
															"",
															"            if (termSessions.length === 0) {",
															"                throw new Error(\"No academicSessions of type 'TERM' found.\");",
															"            }",
															"",
															"            // Select a random term sourcedId",
															"            let randomIndex = Math.floor(Math.random() * termSessions.length);",
															"            let termSourcedId = termSessions[randomIndex].sourcedId;",
															"",
															"            console.log(\"Selected TERM sourcedId: \" + termSourcedId);",
															"",
															"            // Save to environment variable",
															"            pm.environment.set(\"term_sourcedId\", termSourcedId);",
															"",
															"            // Make the Class POST request",
															"            pm.sendRequest({",
															"                url: classUrl,",
															"                method: 'POST',",
															"                header: headers,",
															"                body: {",
															"                    mode: 'raw',",
															"                    raw: JSON.stringify(classRequestBody)",
															"                }",
															"            }, function (err, res) {",
															"                if (err) {",
															"                    console.error(\"POST Class API Error: \", err);",
															"                    pm.environment.unset(\"classSourcedId\"); // Clear sourcedId on failure",
															"                    throw new Error(\"Class POST API request failed.\");",
															"                }",
															"",
															"                if (res.code !== 201) {  // Ensure status is 201 Created",
															"                    console.error(\"Unexpected POST Class API Response Code: \" + res.code);",
															"                    pm.environment.unset(\"classSourcedId\"); // Clear sourcedId on failure",
															"                    throw new Error(\"POST Class API did not return 201 Created.\");",
															"                }",
															"",
															"                console.log(\"POST Class API succeeded with status: \" + res.code);",
															"",
															"",
															"                // Make the PUT ScoreScale request",
															"                pm.sendRequest({",
															"                    url: scoreScaleUrl,",
															"                    method: 'PUT',",
															"                    header: headers,",
															"                    body: {",
															"                        mode: 'raw',",
															"                        raw: JSON.stringify(scoreScaleRequestBody)",
															"                    }",
															"                }, function (err, res) {",
															"                    if (err) {",
															"                        console.error(\"PUT ScoreScale API Error: \", err);",
															"                        pm.environment.unset(\"scoreScaleSourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT ScoreScale API request failed.\");",
															"                    }",
															"",
															"                    if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
															"                        console.error(\"Unexpected PUT ScoreScale API Response Code: \" + res.code);",
															"                        pm.environment.unset(\"scoreScaleSourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT ScoreScale API did not return 200 or 201.\");",
															"                    }",
															"",
															"                    console.log(\"PUT ScoreScale API succeeded with status: \" + res.code);",
															"",
															"",
															"                    // Make the PUT Category request",
															"                pm.sendRequest({",
															"                    url: categoryUrl,",
															"                    method: 'PUT',",
															"                    header: headers,",
															"                    body: {",
															"                        mode: 'raw',",
															"                        raw: JSON.stringify(categoryRequestBody)",
															"                    }",
															"                }, function (err, res) {",
															"                    if (err) {",
															"                        console.error(\"PUT Category API Error: \", err);",
															"                        pm.environment.unset(\"categorySourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT Category API request failed.\");",
															"                    }",
															"",
															"                    if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
															"                        console.error(\"Unexpected PUT Category API Response Code: \" + res.code);",
															"                        pm.environment.unset(\"categorySourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT Category API did not return 200 or 201.\");",
															"                    }",
															"",
															"                    console.log(\"PUT Category API succeeded with status: \" + res.code);",
															"",
															"",
															"                    // Make the putLineItem request",
															"                pm.sendRequest({",
															"                    url: putLineItemUrl,",
															"                    method: 'PUT',",
															"                    header: headers,",
															"                    body: {",
															"                        mode: 'raw',",
															"                        raw: JSON.stringify(putLineItemRequestBody)",
															"                    }",
															"                }, function (err, res) {",
															"                    if (err) {",
															"                        console.error(\"putLineItem API Error: \", err);",
															"                        pm.environment.unset(\"sourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"putLineItem API request failed.\");",
															"                    }",
															"",
															"                    if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
															"                        console.error(\"Unexpected putLineItem API Response Code: \" + res.code);",
															"                        pm.environment.unset(\"sourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"putLineItem API did not return 200 or 201.\");",
															"                    }",
															"                    console.log(\"putLineItem API succeeded with status: \" + res.code);",
															"                        });",
															"                    });",
															"                });",
															"            });",
															"        });",
															"    });",
															"});",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"lineItem\": {\n        \"sourcedId\": \"{{sourcedId}}\",\n        \"status\": \"active\",\n        \"dateLastModified\": \"{{isoDateTime}}\", // Correct UTC ISO8601 format\n        \"metadata\": {\n            \"extensions\": {\n                \"type\": \"DIGITAL_RESOURCE\",\n                \"adaptive\": true,\n                \"storageName\": \"example_storage_name\",\n                \"subject\": \"Mathematics\",\n                \"creator\": [\n                    \"0bb114e1-6f8a-4d81-8d27-1e641fdeddf7\"\n                ],\n                \"mediaType\": \"application/pdf\",\n                \"keywords\": [\n                    \"keyword1\",\n                    \"keyword2\"\n                ],\n                \"datePublished\": \"{{isoDateTime}}\", // Correct UTC ISO8601 format\n                \"dateToActivate\": \"{{isoDateTime}}\", // Correct UTC ISO8601 format\n                \"dateToShow\": \"{{isoDateTime}}\", // Correct UTC ISO8601 format\n                \"dateToStartOn\": \"{{isoDateTime}}\", // Correct UTC ISO8601 format\n                \"maxAttempts\": 5,\n                \"maxSubmits\": 3,\n                \"version\": \"1.0\",\n                \"applicationId\": \"string\",\n                \"competencyId\": null\n            }\n        },\n        \"title\": \"Math\\nTest\",\n        \"description\": \"A foundational resource for understanding algebra.\",\n        \"assignDate\": \"{{isoDateTime}}\", // Correct UTC ISO8601 format\n        \"dueDate\": \"{{isoDateTime}}\", // Correct UTC ISO8601 format\n        \"class\": {\n            \"href\": \"/classes/c6b2a92c-6efd-4d0d-989a-dddad7edc98d\",\n            \"sourcedId\": \"{{classSourcedId}}\",\n            \"type\": \"class\"\n        },\n        \"school\": {\n            \"href\": \"/schools/91edfc73-d1ab-4168-93de-85a71d7f318d\",\n            \"sourcedId\": \"{{school_sourcedId}}\",\n            \"type\": \"org\"\n        },\n        \"scoreScale\": {\n            \"href\": \"/scoreScales/5252bd60-6196-4063-9221-a9f27fe52c55\",\n            \"sourcedId\": \"{{scoreScaleSourcedId}}\",\n            \"type\": \"scoreScale\"\n        },\n        \"category\": {\n            \"href\": \"/category/5252bd60-6196-4063-9221-a9f27fe52c55\",\n            \"sourcedId\": \"{{categorySourcedId}}\",\n            \"type\": \"category\"\n        },\n        \"resultValueMin\": 0,\n        \"resultValueMax\": 100,\n        \"academicSession\": null\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}{{endpoint}}/lineItems/{{sourcedId}}",
													"host": [
														"{{URL}}{{endpoint}}"
													],
													"path": [
														"lineItems",
														"{{sourcedId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify API throws an error for sourcedId which is deleted",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Parse the JSON response",
															"let jsonData = pm.response.json(); ",
															"",
															"pm.test(\" API should return 409Conflict\", function () {",
															"  pm.response.to.have.status(409);",
															"});",
															"",
															"",
															"",
															"// Construct expected error message",
															"let sourcedId = pm.environment.get(\"sourcedId\"); // Define the sourcedId here",
															"let expectedErrorMessage = `A LineItem with the sourcedId ${sourcedId} already exists.`; // Corrected typo in \"nalready\"",
															"",
															"// Validate the error message exactly",
															"pm.test(\"Verify Error message and it should matches with requested sourcedId \", function () {",
															"    pm.expect(jsonData.imsx_description).to.eql(expectedErrorMessage);",
															"});",
															"",
															"",
															"",
															"pm.test(\"Validate response structure for LineItem conflict_error \", function () {",
															"    const jsonData = pm.response.json();",
															"",
															"    // Top-level fields",
															"    pm.expect(jsonData).to.have.property(\"imsx_codeMajor\", \"failure\");",
															"    pm.expect(jsonData).to.have.property(\"imsx_severity\", \"error\");",
															"    pm.expect(jsonData).to.have.property(\"imsx_description\");",
															"    ",
															"",
															"    // Check imsx_CodeMinor structure",
															"    pm.expect(jsonData).to.have.property(\"imsx_CodeMinor\");",
															"    pm.expect(jsonData.imsx_CodeMinor).to.have.property(\"imsx_codeMinorField\");",
															"    pm.expect(jsonData.imsx_CodeMinor.imsx_codeMinorField).to.be.an(\"array\").that.is.not.empty;",
															"",
															"    // Validate inner fields",
															"    const minorField = jsonData.imsx_CodeMinor.imsx_codeMinorField[0];",
															"    pm.expect(minorField).to.have.property(\"imsx_codeMinorFieldName\", \"TargetEndSystem\");",
															"    pm.expect(minorField).to.have.property(\"imsx_codeMinorFieldValue\", \"conflict_error\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Set headers dynamically from environment variables",
															"pm.request.headers.upsert({ key: \"Authorization\", value: pm.environment.get(\"Auth\") });",
															"pm.request.headers.upsert({ key: \"x-app-key\", value: pm.environment.get(\"x-app-key\") });",
															"pm.request.headers.upsert({ key: \"x-client-id\", value: pm.environment.get(\"x-client-id\") });",
															"",
															"// Generate a random UUID for sourcedId",
															"function generateUUID() {",
															"    let dt = new Date().getTime();",
															"    let uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {",
															"        let r = (dt + Math.random() * 16) % 16 | 0;",
															"        dt = Math.floor(dt / 16);",
															"        return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);",
															"    });",
															"    return uuid;",
															"}",
															"",
															"let courseSourcedId = generateUUID();",
															"let classSourcedId = generateUUID();",
															"let scoreScaleSourcedId = generateUUID();",
															"let categorySourcedId = generateUUID();",
															"let sourcedId = generateUUID();",
															"",
															"",
															"pm.environment.set(\"courseSourcedId\", courseSourcedId);",
															"pm.environment.set(\"classSourcedId\", classSourcedId);",
															"pm.environment.set(\"scoreScaleSourcedId\", scoreScaleSourcedId);",
															"pm.environment.set(\"categorySourcedId\", categorySourcedId);",
															"pm.environment.set(\"sourcedId\", sourcedId);",
															"",
															"",
															"// Set headers",
															"const headers = {",
															"    'Authorization': pm.environment.get(\"Auth\"),",
															"    'x-app-key': pm.environment.get(\"x-app-key\"),",
															"    'x-client-id': pm.environment.get(\"x-client-id\"),",
															"    'Content-Type': 'application/json'",
															"};",
															"",
															"",
															"// Generate current UTC timestamp in ISO format: 2025-01-29T06:51:57Z",
															"function getCurrentISOString() {",
															"    return new Date().toISOString().split('.')[0] + \"Z\";",
															"}",
															"",
															"// Set dynamic date variables",
															"let isoDateTime = getCurrentISOString(); // full timestamp",
															"let isoDateOnly = isoDateTime.split('T')[0]; // date only",
															"",
															"pm.environment.set(\"isoDateTime\", isoDateTime);",
															"pm.environment.set(\"isoDateOnly\", isoDateOnly);",
															"",
															"console.log(\"Generated ISO DateTime: \" + isoDateTime);",
															"console.log(\"Generated ISO Date Only: \" + isoDateOnly);",
															"",
															"// Define Course API URL",
															"let courseUrl = pm.environment.get(\"URL\") + pm.environment.get(\"customPathPrefix\")+\"/courses\";",
															"",
															"// Define getAllOrgs API URL",
															"let getAllOrgsUrl = pm.environment.get(\"URL\") + pm.environment.get(\"rosterPathPrefix\")+\"/orgs\";",
															"",
															"// Define getAllterms API URL",
															"let getAllTermsUrl = pm.environment.get(\"URL\") + pm.environment.get(\"rosterPathPrefix\")+\"/terms\";",
															"",
															"// Define Class API URL",
															"let classUrl = pm.environment.get(\"URL\") + pm.environment.get(\"customPathPrefix\")+\"/classes\";",
															"",
															"// Define ScoreScale API URL",
															"let scoreScaleUrl = pm.environment.get(\"URL\") + pm.environment.get(\"pathPrefix\")+\"/scoreScales/\"+ scoreScaleSourcedId;",
															"",
															"// Define Category API URL",
															"let categoryUrl = pm.environment.get(\"URL\") + pm.environment.get(\"pathPrefix\")+\"/categories/\"+ categorySourcedId;",
															"",
															"// Define putLineItem API URL",
															"let putLineItemUrl = pm.environment.get(\"URL\") + pm.environment.get(\"pathPrefix\")+\"/lineItems/\"+ sourcedId;",
															"",
															"",
															"// Define Course API Request Body",
															"let courseRequestBody = {",
															"    \"sourcedId\": pm.environment.get(\"courseSourcedId\"), //required",
															"    \"status\": \"active\", //required",
															"    \"title\": \"QA\", //required",
															"    \"courseCode\": \"courseCode\" //required",
															"}",
															"",
															"",
															"// Define Class API Request Body",
															"let classRequestBody = {",
															"    \"sourcedId\": pm.environment.get(\"classSourcedId\"), //Required",
															"    \"status\": \"active\", //Required",
															"    \"title\": \"title\", //Required",
															"    \"classType\": \"SCHEDULED\", //Required",
															"    \"course\": { //required",
															"        \"href\": \"/courses/\" + pm.environment.get(\"courseSourcedId\"),",
															"        \"sourcedId\": pm.environment.get(\"courseSourcedId\"),",
															"        \"type\": \"course\"",
															"                },",
															"    \"school\": { //required",
															"        \"href\": \"/org/\" + pm.environment.get(\"school_sourcedId\"),",
															"        \"sourcedId\": pm.environment.get(\"school_sourcedId\"),",
															"        \"type\": \"org\"",
															"                },",
															"    \"terms\": [ //required",
															"        {",
															"            \"href\": \"/academicSession/\" + pm.environment.get(\"term_sourcedId\"),",
															"            \"sourcedId\":pm.environment.get(\"term_sourcedId\"),",
															"             \"type\": \"academicSession\"",
															"        }",
															"    ]",
															"}",
															"",
															"",
															"// Define ScoreScale API Request Body",
															"let scoreScaleRequestBody = {",
															"    \"scoreScale\": {",
															"    \"sourcedId\":pm.environment.get(\"scoreScaleSourcedId\"), //required",
															"    \"status\": \"active\", //required",
															"    \"dateLastModified\": isoDateTime, //required",
															"    \"metadata\": {",
															"        \"test\": \"metadata\"",
															"                },",
															"    \"title\": \"QATestProd\", //required",
															"    \"type\": \"QATestProd\", //required",
															"    \"course\": {",
															"            \"href\": \"/course/\" + pm.environment.get(\"courseSourcedId\"),",
															"            \"sourcedId\": pm.environment.get(\"courseSourcedId\"),",
															"            \"type\": \"course\"",
															"        },",
															"    \"class\": {  //required",
															"            \"href\": \"/classes/\" + pm.environment.get(\"classSourcedId\"),",
															"            \"sourcedId\": pm.environment.get(\"classSourcedId\"),",
															"            \"type\": \"class\"",
															"        },",
															"    \"scoreScaleValue\": [ //required",
															"        {",
															"            \"itemValueLHS\": \"0-57\",",
															"            \"itemValueRHS\": \"F\"",
															"        },",
															"        {",
															"            \"itemValueLHS\": \"60-69\",",
															"            \"itemValueRHS\": \"D\"",
															"        }",
															"                        ]",
															"    }",
															"}",
															"",
															"",
															"// Define Category API Request Body",
															"let categoryRequestBody = {",
															"     \"category\": {",
															"        \"sourcedId\": pm.environment.get(\"categorySourcedId\"),",
															"        \"status\": \"active\",",
															"        \"dateLastModified\": isoDateTime,",
															"        \"metadata\": {},",
															"        \"title\": \"title\",",
															"        \"weight\": 3",
															"                }",
															"}",
															"",
															"",
															"// Define Category API Request Body",
															"let putLineItemRequestBody = {",
															"    \"lineItem\": {",
															"        \"sourcedId\": pm.environment.get(\"sourcedId\"), // required",
															"        \"status\": \"active\", // required",
															"        \"dateLastModified\": isoDateTime, // Correct UTC ISO8601 format // required",
															"        \"title\": \"MathTest\", // required",
															"        \"assignDate\": isoDateTime, // Correct UTC ISO8601 format // required",
															"        \"dueDate\": isoDateTime, // Correct UTC ISO8601 format // required",
															"        \"class\": { // required",
															"            \"href\": \"/classes/c6b2a92c-6efd-4d0d-989a-dddad7edc98d\",",
															"            \"sourcedId\": pm.environment.get(\"classSourcedId\"),",
															"            \"type\": \"class\"",
															"        },",
															"        \"school\": { // required",
															"            \"href\": \"/schools/91edfc73-d1ab-4168-93de-85a71d7f318d\",",
															"            \"sourcedId\": pm.environment.get(\"school_sourcedId\"),",
															"            \"type\": \"org\"",
															"        },",
															"        \"category\": { // required",
															"            \"href\": \"/category/5252bd60-6196-4063-9221-a9f27fe52c55\",",
															"            \"sourcedId\": pm.environment.get(\"categorySourcedId\"),",
															"            \"type\": \"category\"",
															"        }",
															"    }",
															"}",
															"",
															"// Make the Course POST request",
															"pm.sendRequest({",
															"    url: courseUrl,",
															"    method: 'POST',",
															"    header: headers,",
															"    body: {",
															"        mode: 'raw',",
															"        raw: JSON.stringify(courseRequestBody)",
															"    }",
															"}, function (err, res) {",
															"    if (err) {",
															"        console.error(\"POST Course API Error: \", err);",
															"        pm.environment.unset(\"courseSourcedId\"); // Clear sourcedId on failure",
															"        throw new Error(\"Course POST API request failed.\");",
															"    }",
															"",
															"    if (res.code !== 201) {  // Ensure status is 201 Created",
															"        console.error(\"Unexpected POST Course API Response Code: \" + res.code);",
															"        pm.environment.unset(\"courseSourcedId\"); // Clear sourcedId on failure",
															"        throw new Error(\"Course POST API did not return 201 Created.\");",
															"    }",
															"",
															"    console.log(\"Course POST API succeeded with status: \" + res.code);",
															"",
															"",
															" // Make getAllOrgs Request",
															"    pm.sendRequest({",
															"        url: getAllOrgsUrl,",
															"        method: 'GET',",
															"        header: headers",
															"    }, function (err, res) {",
															"        if (err || res.code !== 200) {",
															"            console.error(\"GET Orgs API Failed. Code:\", res?.code || \"No response\", \"Error:\", err);",
															"            throw new Error(\"GET Orgs API request failed.\");",
															"        }",
															"        console.log(\"GET Orgs API succeeded with status:\", res.code);",
															"        let response = res.json();",
															"        let schoolOrgs = response.orgs.filter(org => org.type === \"SCHOOL\");",
															"",
															"        if (schoolOrgs.length === 0) {",
															"            throw new Error(\"No orgs of type 'SCHOOL' found.\");",
															"        }",
															"",
															"        // Get a random school sourcedId",
															"        let randomIndex = Math.floor(Math.random() * schoolOrgs.length);",
															"        let schoolSourcedId = schoolOrgs[randomIndex].sourcedId;",
															"        console.log(\"Selected school sourcedId: \" + schoolSourcedId);",
															"        // Save to environment/collection variable for later use",
															"        pm.environment.set(\"school_sourcedId\", schoolSourcedId);",
															"",
															"",
															"     // Make getAllterms Request",
															"        pm.sendRequest({",
															"            url: getAllTermsUrl,",
															"            method: 'GET',",
															"            header: headers",
															"        }, function (err, res) {",
															"            if (err || res.code !== 200) {",
															"                console.error(\"GET TERMS API Failed. Code:\", res?.code || \"No response\", \"Error:\", err);",
															"                throw new Error(\"GET TERMS API request failed.\");",
															"            }",
															"",
															"            console.log(\"GET TERMS API succeeded with status:\", res.code);",
															"",
															"            let response = res.json();",
															"            let termSessions = response.academicSessions.filter(session => session.type === \"TERM\");",
															"",
															"            if (termSessions.length === 0) {",
															"                throw new Error(\"No academicSessions of type 'TERM' found.\");",
															"            }",
															"",
															"            // Select a random term sourcedId",
															"            let randomIndex = Math.floor(Math.random() * termSessions.length);",
															"            let termSourcedId = termSessions[randomIndex].sourcedId;",
															"",
															"            console.log(\"Selected TERM sourcedId: \" + termSourcedId);",
															"",
															"            // Save to environment/collection variable",
															"            pm.environment.set(\"term_sourcedId\", termSourcedId);",
															"",
															"            // Make the Class POST request",
															"            pm.sendRequest({",
															"                url: classUrl,",
															"                method: 'POST',",
															"                header: headers,",
															"                body: {",
															"                    mode: 'raw',",
															"                    raw: JSON.stringify(classRequestBody)",
															"                }",
															"            }, function (err, res) {",
															"                if (err) {",
															"                    console.error(\"POST Class API Error: \", err);",
															"                    pm.environment.unset(\"classSourcedId\"); // Clear sourcedId on failure",
															"                    throw new Error(\"Class POST API request failed.\");",
															"                }",
															"",
															"                if (res.code !== 201) {  // Ensure status is 201 Created",
															"                    console.error(\"Unexpected POST Class API Response Code: \" + res.code);",
															"                    pm.environment.unset(\"classSourcedId\"); // Clear sourcedId on failure",
															"                    throw new Error(\"POST Class API did not return 201 Created.\");",
															"                }",
															"",
															"                console.log(\"POST Class API succeeded with status: \" + res.code);",
															"",
															"",
															"                // Make the PUT ScoreScale request",
															"                pm.sendRequest({",
															"                    url: scoreScaleUrl,",
															"                    method: 'PUT',",
															"                    header: headers,",
															"                    body: {",
															"                        mode: 'raw',",
															"                        raw: JSON.stringify(scoreScaleRequestBody)",
															"                    }",
															"                }, function (err, res) {",
															"                    if (err) {",
															"                        console.error(\"PUT ScoreScale API Error: \", err);",
															"                        pm.environment.unset(\"scoreScaleSourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT ScoreScale API request failed.\");",
															"                    }",
															"",
															"                    if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
															"                        console.error(\"Unexpected PUT ScoreScale API Response Code: \" + res.code);",
															"                        pm.environment.unset(\"scoreScaleSourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT ScoreScale API did not return 200 or 201.\");",
															"                    }",
															"",
															"                    console.log(\"PUT ScoreScale API succeeded with status: \" + res.code);",
															"",
															"",
															"                    // Make the PUT Category request",
															"                pm.sendRequest({",
															"                    url: categoryUrl,",
															"                    method: 'PUT',",
															"                    header: headers,",
															"                    body: {",
															"                        mode: 'raw',",
															"                        raw: JSON.stringify(categoryRequestBody)",
															"                    }",
															"                }, function (err, res) {",
															"                    if (err) {",
															"                        console.error(\"PUT Category API Error: \", err);",
															"                        pm.environment.unset(\"categorySourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT Category API request failed.\");",
															"                    }",
															"",
															"                    if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
															"                        console.error(\"Unexpected PUT Category API Response Code: \" + res.code);",
															"                        pm.environment.unset(\"categorySourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT Category API did not return 200 or 201.\");",
															"                    }",
															"",
															"                    console.log(\"PUT Category API succeeded with status: \" + res.code);",
															"",
															"",
															"                    // Make the putLineItem request",
															"                pm.sendRequest({",
															"                    url: putLineItemUrl,",
															"                    method: 'PUT',",
															"                    header: headers,",
															"                    body: {",
															"                        mode: 'raw',",
															"                        raw: JSON.stringify(putLineItemRequestBody)",
															"                    }",
															"                }, function (err, res) {",
															"                    if (err) {",
															"                        console.error(\"putLineItem API Error: \", err);",
															"                        pm.environment.unset(\"sourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"putLineItem API request failed.\");",
															"                    }",
															"",
															"                    if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
															"                        console.error(\"Unexpected putLineItem API Response Code: \" + res.code);",
															"                        pm.environment.unset(\"sourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"putLineItem API did not return 200 or 201.\");",
															"                    }",
															"                    console.log(\"putLineItem API succeeded with status: \" + res.code);",
															"",
															"",
															"",
															"                    //Make DELETE LineItem API Request",
															"                        pm.sendRequest({",
															"                            url: putLineItemUrl,",
															"                            method: 'DELETE',",
															"                            header: headers",
															"                            }, function (err, res) {",
															"                            if (err || res.code !== 204) {",
															"                             console.error(\"DELETE LineItem API Failed. Code:\", res?.code || \"No response\", \"Error:\", err);",
															"                                throw new Error(\"DELETE LineItem API request failed.\");",
															"                            }",
															"",
															"                            });",
															"                        });",
															"                    });",
															"                });",
															"            });",
															"        });",
															"    });",
															"});",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"lineItem\": {\n        \"sourcedId\": \"{{sourcedId}}\", // required\n        \"status\": \"active\", // required\n        \"dateLastModified\": \"{{isoDateTime}}\", // Correct UTC ISO8601 format // required\n        \"title\": \"Math\\nTest\", // required\n        \"assignDate\": \"{{isoDateTime}}\", // Correct UTC ISO8601 format // required\n        \"dueDate\": \"{{isoDateTime}}\", // Correct UTC ISO8601 format // required\n        \"class\": { // required\n            \"href\": \"/classes/c6b2a92c-6efd-4d0d-989a-dddad7edc98d\",\n            \"sourcedId\": \"{{classSourcedId}}\",\n            \"type\": \"class\"\n        },\n        \"school\": { // required\n            \"href\": \"/schools/91edfc73-d1ab-4168-93de-85a71d7f318d\",\n            \"sourcedId\": \"{{school_sourcedId}}\",\n            \"type\": \"org\"\n        },\n        \"category\": { // required\n            \"href\": \"/category/5252bd60-6196-4063-9221-a9f27fe52c55\",\n            \"sourcedId\": \"{{categorySourcedId}}\",\n            \"type\": \"category\"\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}{{endpoint}}/lineItems/{{sourcedId}}",
													"host": [
														"{{URL}}{{endpoint}}"
													],
													"path": [
														"lineItems",
														"{{sourcedId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify API throws an error for class which is deleted",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Parse the JSON response",
															"let jsonData = pm.response.json(); ",
															"",
															"pm.test(\" API should return 404 Not Found\", function () {",
															"  pm.response.to.have.status(404);",
															"});",
															"",
															"",
															"",
															"// Construct expected error message",
															"let classSourcedId = pm.environment.get(\"classSourcedId\"); // Define the sourcedId here",
															"let expectedErrorMessage = `The class with sourcedId ${classSourcedId} was not found or has already been deleted.`; // Corrected typo in \"nalready\"",
															"",
															"",
															"// Validate the error message exactly",
															"pm.test(\"Verify Error message and it should matches with requested sourcedId \", function () {",
															"    pm.expect(jsonData.imsx_description).to.eql(expectedErrorMessage);",
															"});",
															"",
															"",
															"",
															"pm.test(\"Validate response structure for LineItem unknownobject error \", function () {",
															"    const jsonData = pm.response.json();",
															"",
															"    // Top-level fields",
															"    pm.expect(jsonData).to.have.property(\"imsx_codeMajor\", \"failure\");",
															"    pm.expect(jsonData).to.have.property(\"imsx_severity\", \"error\");",
															"    pm.expect(jsonData).to.have.property(\"imsx_description\");",
															"    ",
															"",
															"    // Check imsx_CodeMinor structure",
															"    pm.expect(jsonData).to.have.property(\"imsx_CodeMinor\");",
															"    pm.expect(jsonData.imsx_CodeMinor).to.have.property(\"imsx_codeMinorField\");",
															"    pm.expect(jsonData.imsx_CodeMinor.imsx_codeMinorField).to.be.an(\"array\").that.is.not.empty;",
															"",
															"    // Validate inner fields",
															"    const minorField = jsonData.imsx_CodeMinor.imsx_codeMinorField[0];",
															"    pm.expect(minorField).to.have.property(\"imsx_codeMinorFieldName\", \"TargetEndSystem\");",
															"    pm.expect(minorField).to.have.property(\"imsx_codeMinorFieldValue\", \"unknownobject\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Set headers dynamically from environment variables",
															"pm.request.headers.upsert({ key: \"Authorization\", value: pm.environment.get(\"Auth\") });",
															"pm.request.headers.upsert({ key: \"x-app-key\", value: pm.environment.get(\"x-app-key\") });",
															"pm.request.headers.upsert({ key: \"x-client-id\", value: pm.environment.get(\"x-client-id\") });",
															"",
															"// Generate a random UUID for sourcedId",
															"function generateUUID() {",
															"    let dt = new Date().getTime();",
															"    let uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {",
															"        let r = (dt + Math.random() * 16) % 16 | 0;",
															"        dt = Math.floor(dt / 16);",
															"        return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);",
															"    });",
															"    return uuid;",
															"}",
															"",
															"let courseSourcedId = generateUUID();",
															"let classSourcedId = generateUUID();",
															"let scoreScaleSourcedId = generateUUID();",
															"let categorySourcedId = generateUUID();",
															"let sourcedId = generateUUID();",
															"",
															"",
															"pm.environment.set(\"courseSourcedId\", courseSourcedId);",
															"pm.environment.set(\"classSourcedId\", classSourcedId);",
															"pm.environment.set(\"scoreScaleSourcedId\", scoreScaleSourcedId);",
															"pm.environment.set(\"categorySourcedId\", categorySourcedId);",
															"pm.environment.set(\"sourcedId\", sourcedId);",
															"",
															"",
															"// Set headers",
															"const headers = {",
															"    'Authorization': pm.environment.get(\"Auth\"),",
															"    'x-app-key': pm.environment.get(\"x-app-key\"),",
															"    'x-client-id': pm.environment.get(\"x-client-id\"),",
															"    'Content-Type': 'application/json'",
															"};",
															"",
															"",
															"// Generate current UTC timestamp in ISO format: 2025-01-29T06:51:57Z",
															"function getCurrentISOString() {",
															"    return new Date().toISOString().split('.')[0] + \"Z\";",
															"}",
															"",
															"// Set dynamic date variables",
															"let isoDateTime = getCurrentISOString(); // full timestamp",
															"let isoDateOnly = isoDateTime.split('T')[0]; // date only",
															"",
															"pm.environment.set(\"isoDateTime\", isoDateTime);",
															"pm.environment.set(\"isoDateOnly\", isoDateOnly);",
															"",
															"console.log(\"Generated ISO DateTime: \" + isoDateTime);",
															"console.log(\"Generated ISO Date Only: \" + isoDateOnly);",
															"",
															"// Define Course API URL",
															"let courseUrl = pm.environment.get(\"URL\") + pm.environment.get(\"customPathPrefix\")+\"/courses\";",
															"",
															"// Define getAllOrgs API URL",
															"let getAllOrgsUrl = pm.environment.get(\"URL\") + pm.environment.get(\"rosterPathPrefix\")+\"/orgs\";",
															"",
															"// Define getAllterms API URL",
															"let getAllTermsUrl = pm.environment.get(\"URL\") + pm.environment.get(\"rosterPathPrefix\")+\"/terms\";",
															"",
															"// Define Class API URL",
															"let classUrl = pm.environment.get(\"URL\") + pm.environment.get(\"customPathPrefix\")+\"/classes\";",
															"",
															"// Define ScoreScale API URL",
															"let scoreScaleUrl = pm.environment.get(\"URL\") + pm.environment.get(\"pathPrefix\")+\"/scoreScales/\"+ scoreScaleSourcedId;",
															"",
															"// Define Category API URL",
															"let categoryUrl = pm.environment.get(\"URL\") + pm.environment.get(\"pathPrefix\")+\"/categories/\"+ categorySourcedId;",
															"",
															"// Define putLineItem API URL",
															"let putLineItemUrl = pm.environment.get(\"URL\") + pm.environment.get(\"pathPrefix\")+\"/lineItems/\"+ sourcedId;",
															"",
															"// Define deleteClass API URL",
															"let deleteClassUrl = pm.environment.get(\"URL\") + pm.environment.get(\"customPathPrefix\")+\"/classes/\"+ classSourcedId ;",
															"",
															"",
															"// Define Course API Request Body",
															"let courseRequestBody = {",
															"    \"sourcedId\": pm.environment.get(\"courseSourcedId\"), //required",
															"    \"status\": \"active\", //required",
															"    \"title\": \"QA\", //required",
															"    \"courseCode\": \"courseCode\" //required",
															"}",
															"",
															"",
															"// Define Class API Request Body",
															"let classRequestBody = {",
															"    \"sourcedId\": pm.environment.get(\"classSourcedId\"), //Required",
															"    \"status\": \"active\", //Required",
															"    \"title\": \"title\", //Required",
															"    \"classType\": \"SCHEDULED\", //Required",
															"    \"course\": { //required",
															"        \"href\": \"/courses/\" + pm.environment.get(\"courseSourcedId\"),",
															"        \"sourcedId\": pm.environment.get(\"courseSourcedId\"),",
															"        \"type\": \"course\"",
															"                },",
															"    \"school\": { //required",
															"        \"href\": \"/org/\" + pm.environment.get(\"school_sourcedId\"),",
															"        \"sourcedId\": pm.environment.get(\"school_sourcedId\"),",
															"        \"type\": \"org\"",
															"                },",
															"    \"terms\": [ //required",
															"        {",
															"            \"href\": \"/academicSession/\" + pm.environment.get(\"term_sourcedId\"),",
															"            \"sourcedId\":pm.environment.get(\"term_sourcedId\"),",
															"             \"type\": \"academicSession\"",
															"        }",
															"    ]",
															"}",
															"",
															"",
															"// Define ScoreScale API Request Body",
															"let scoreScaleRequestBody = {",
															"    \"scoreScale\": {",
															"    \"sourcedId\":pm.environment.get(\"scoreScaleSourcedId\"), //required",
															"    \"status\": \"active\", //required",
															"    \"dateLastModified\": isoDateTime, //required",
															"    \"metadata\": {",
															"        \"test\": \"metadata\"",
															"                },",
															"    \"title\": \"QATestProd\", //required",
															"    \"type\": \"QATestProd\", //required",
															"    \"course\": {",
															"            \"href\": \"/course/\" + pm.environment.get(\"courseSourcedId\"),",
															"            \"sourcedId\": pm.environment.get(\"courseSourcedId\"),",
															"            \"type\": \"course\"",
															"        },",
															"    \"class\": {  //required",
															"            \"href\": \"/classes/\" + pm.environment.get(\"classSourcedId\"),",
															"            \"sourcedId\": pm.environment.get(\"classSourcedId\"),",
															"            \"type\": \"class\"",
															"        },",
															"    \"scoreScaleValue\": [ //required",
															"        {",
															"            \"itemValueLHS\": \"0-57\",",
															"            \"itemValueRHS\": \"F\"",
															"        },",
															"        {",
															"            \"itemValueLHS\": \"60-69\",",
															"            \"itemValueRHS\": \"D\"",
															"        }",
															"                        ]",
															"    }",
															"}",
															"",
															"",
															"// Define Category API Request Body",
															"let categoryRequestBody = {",
															"     \"category\": {",
															"        \"sourcedId\": pm.environment.get(\"categorySourcedId\"),",
															"        \"status\": \"active\",",
															"        \"dateLastModified\": isoDateTime,",
															"        \"metadata\": {},",
															"        \"title\": \"title\",",
															"        \"weight\": 3",
															"                }",
															"}",
															"",
															"",
															"// Define putLineItem API Request Body",
															"let putLineItemRequestBody = {",
															"    \"lineItem\": {",
															"        \"sourcedId\": pm.environment.get(\"sourcedId\"), // required",
															"        \"status\": \"active\", // required",
															"        \"dateLastModified\": isoDateTime, // Correct UTC ISO8601 format // required",
															"        \"title\": \"MathTest\", // required",
															"        \"assignDate\": isoDateTime, // Correct UTC ISO8601 format // required",
															"        \"dueDate\": isoDateTime, // Correct UTC ISO8601 format // required",
															"        \"class\": { // required",
															"            \"href\": \"/classes/c6b2a92c-6efd-4d0d-989a-dddad7edc98d\",",
															"            \"sourcedId\": pm.environment.get(\"classSourcedId\"),",
															"            \"type\": \"class\"",
															"        },",
															"        \"school\": { // required",
															"            \"href\": \"/schools/91edfc73-d1ab-4168-93de-85a71d7f318d\",",
															"            \"sourcedId\": pm.environment.get(\"school_sourcedId\"),",
															"            \"type\": \"org\"",
															"        },",
															"        \"category\": { // required",
															"            \"href\": \"/category/5252bd60-6196-4063-9221-a9f27fe52c55\",",
															"            \"sourcedId\": pm.environment.get(\"categorySourcedId\"),",
															"            \"type\": \"category\"",
															"        }",
															"    }",
															"}",
															"",
															"// Make the Course POST request",
															"pm.sendRequest({",
															"    url: courseUrl,",
															"    method: 'POST',",
															"    header: headers,",
															"    body: {",
															"        mode: 'raw',",
															"        raw: JSON.stringify(courseRequestBody)",
															"    }",
															"}, function (err, res) {",
															"    if (err) {",
															"        console.error(\"POST Course API Error: \", err);",
															"        pm.environment.unset(\"courseSourcedId\"); // Clear sourcedId on failure",
															"        throw new Error(\"Course POST API request failed.\");",
															"    }",
															"",
															"    if (res.code !== 201) {  // Ensure status is 201 Created",
															"        console.error(\"Unexpected POST Course API Response Code: \" + res.code);",
															"        pm.environment.unset(\"courseSourcedId\"); // Clear sourcedId on failure",
															"        throw new Error(\"Course POST API did not return 201 Created.\");",
															"    }",
															"",
															"    console.log(\"Course POST API succeeded with status: \" + res.code);",
															"",
															"",
															" // Make getAllOrgs Request",
															"    pm.sendRequest({",
															"        url: getAllOrgsUrl,",
															"        method: 'GET',",
															"        header: headers",
															"    }, function (err, res) {",
															"        if (err || res.code !== 200) {",
															"            console.error(\"GET Orgs API Failed. Code:\", res?.code || \"No response\", \"Error:\", err);",
															"            throw new Error(\"GET Orgs API request failed.\");",
															"        }",
															"        console.log(\"GET Orgs API succeeded with status:\", res.code);",
															"        let response = res.json();",
															"        let schoolOrgs = response.orgs.filter(org => org.type === \"SCHOOL\");",
															"",
															"        if (schoolOrgs.length === 0) {",
															"            throw new Error(\"No orgs of type 'SCHOOL' found.\");",
															"        }",
															"",
															"        // Get a random school sourcedId",
															"        let randomIndex = Math.floor(Math.random() * schoolOrgs.length);",
															"        let schoolSourcedId = schoolOrgs[randomIndex].sourcedId;",
															"        console.log(\"Selected school sourcedId: \" + schoolSourcedId);",
															"        // Save to environment/collection variable for later use",
															"        pm.environment.set(\"school_sourcedId\", schoolSourcedId);",
															"",
															"",
															"     // Make getAllterms Request",
															"        pm.sendRequest({",
															"            url: getAllTermsUrl,",
															"            method: 'GET',",
															"            header: headers",
															"        }, function (err, res) {",
															"            if (err || res.code !== 200) {",
															"                console.error(\"GET TERMS API Failed. Code:\", res?.code || \"No response\", \"Error:\", err);",
															"                throw new Error(\"GET TERMS API request failed.\");",
															"            }",
															"",
															"            console.log(\"GET TERMS API succeeded with status:\", res.code);",
															"",
															"            let response = res.json();",
															"            let termSessions = response.academicSessions.filter(session => session.type === \"TERM\");",
															"",
															"            if (termSessions.length === 0) {",
															"                throw new Error(\"No academicSessions of type 'TERM' found.\");",
															"            }",
															"",
															"            // Select a random term sourcedId",
															"            let randomIndex = Math.floor(Math.random() * termSessions.length);",
															"            let termSourcedId = termSessions[randomIndex].sourcedId;",
															"",
															"            console.log(\"Selected TERM sourcedId: \" + termSourcedId);",
															"",
															"            // Save to environment/collection variable",
															"            pm.environment.set(\"term_sourcedId\", termSourcedId);",
															"",
															"            // Make the Class POST request",
															"            pm.sendRequest({",
															"                url: classUrl,",
															"                method: 'POST',",
															"                header: headers,",
															"                body: {",
															"                    mode: 'raw',",
															"                    raw: JSON.stringify(classRequestBody)",
															"                }",
															"            }, function (err, res) {",
															"                if (err) {",
															"                    console.error(\"POST Class API Error: \", err);",
															"                    pm.environment.unset(\"classSourcedId\"); // Clear sourcedId on failure",
															"                    throw new Error(\"Class POST API request failed.\");",
															"                }",
															"",
															"                if (res.code !== 201) {  // Ensure status is 201 Created",
															"                    console.error(\"Unexpected POST Class API Response Code: \" + res.code);",
															"                    pm.environment.unset(\"classSourcedId\"); // Clear sourcedId on failure",
															"                    throw new Error(\"POST Class API did not return 201 Created.\");",
															"                }",
															"",
															"                console.log(\"POST Class API succeeded with status: \" + res.code);",
															"",
															"",
															"                // Make the PUT ScoreScale request",
															"                pm.sendRequest({",
															"                    url: scoreScaleUrl,",
															"                    method: 'PUT',",
															"                    header: headers,",
															"                    body: {",
															"                        mode: 'raw',",
															"                        raw: JSON.stringify(scoreScaleRequestBody)",
															"                    }",
															"                }, function (err, res) {",
															"                    if (err) {",
															"                        console.error(\"PUT ScoreScale API Error: \", err);",
															"                        pm.environment.unset(\"scoreScaleSourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT ScoreScale API request failed.\");",
															"                    }",
															"",
															"                    if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
															"                        console.error(\"Unexpected PUT ScoreScale API Response Code: \" + res.code);",
															"                        pm.environment.unset(\"scoreScaleSourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT ScoreScale API did not return 200 or 201.\");",
															"                    }",
															"",
															"                    console.log(\"PUT ScoreScale API succeeded with status: \" + res.code);",
															"",
															"",
															"                    // Make the PUT Category request",
															"                pm.sendRequest({",
															"                    url: categoryUrl,",
															"                    method: 'PUT',",
															"                    header: headers,",
															"                    body: {",
															"                        mode: 'raw',",
															"                        raw: JSON.stringify(categoryRequestBody)",
															"                    }",
															"                }, function (err, res) {",
															"                    if (err) {",
															"                        console.error(\"PUT Category API Error: \", err);",
															"                        pm.environment.unset(\"categorySourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT Category API request failed.\");",
															"                    }",
															"",
															"                    if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
															"                        console.error(\"Unexpected PUT Category API Response Code: \" + res.code);",
															"                        pm.environment.unset(\"categorySourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT Category API did not return 200 or 201.\");",
															"                    }",
															"",
															"                    console.log(\"PUT Category API succeeded with status: \" + res.code);",
															"",
															"",
															"                    // Make the putLineItem request",
															"                pm.sendRequest({",
															"                    url: putLineItemUrl,",
															"                    method: 'PUT',",
															"                    header: headers,",
															"                    body: {",
															"                        mode: 'raw',",
															"                        raw: JSON.stringify(putLineItemRequestBody)",
															"                    }",
															"                }, function (err, res) {",
															"                    if (err) {",
															"                        console.error(\"putLineItem API Error: \", err);",
															"                        pm.environment.unset(\"sourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"putLineItem API request failed.\");",
															"                    }",
															"",
															"                    if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
															"                        console.error(\"Unexpected putLineItem API Response Code: \" + res.code);",
															"                        pm.environment.unset(\"sourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"putLineItem API did not return 200 or 201.\");",
															"                    }",
															"                    console.log(\"putLineItem API succeeded with status: \" + res.code);",
															"",
															"",
															"",
															"                    //Make DELETE class API Request",
															"                        pm.sendRequest({",
															"                            url: deleteClassUrl,",
															"                            method: 'DELETE',",
															"                            header: headers",
															"                            }, function (err, res) {",
															"                            if (err || res.code !== 204) {",
															"                             console.error(\"DELETE class API Failed. Code:\", res?.code || \"No response\", \"Error:\", err);",
															"                                throw new Error(\"DELETE class API request failed.\");",
															"                            }",
															"",
															"                            });",
															"                        });",
															"                    });",
															"                });",
															"            });",
															"        });",
															"    });",
															"});",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"lineItem\": {\n        \"sourcedId\": \"{{sourcedId}}\", // required\n        \"status\": \"active\", // required\n        \"dateLastModified\": \"{{isoDateTime}}\", // Correct UTC ISO8601 format // required\n        \"title\": \"Math\\nTest\", // required\n        \"assignDate\": \"{{isoDateTime}}\", // Correct UTC ISO8601 format // required\n        \"dueDate\": \"{{isoDateTime}}\", // Correct UTC ISO8601 format // required\n        \"class\": { // required\n            \"href\": \"/classes/c6b2a92c-6efd-4d0d-989a-dddad7edc98d\",\n            \"sourcedId\": \"{{classSourcedId}}\",\n            \"type\": \"class\"\n        },\n        \"school\": { // required\n            \"href\": \"/schools/91edfc73-d1ab-4168-93de-85a71d7f318d\",\n            \"sourcedId\": \"{{school_sourcedId}}\",\n            \"type\": \"org\"\n        },\n        \"category\": { // required\n            \"href\": \"/category/5252bd60-6196-4063-9221-a9f27fe52c55\",\n            \"sourcedId\": \"{{categorySourcedId}}\",\n            \"type\": \"category\"\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}{{endpoint}}/lineItems/{{sourcedId}}",
													"host": [
														"{{URL}}{{endpoint}}"
													],
													"path": [
														"lineItems",
														"{{sourcedId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify API throws an error for class which is not existed",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Parse the JSON response",
															"let jsonData = pm.response.json(); ",
															"",
															"// Construct expected error message",
															"let sourcedId = pm.environment.get(\"sourcedId\"); // Define the sourcedId here",
															"let expectedErrorMessage = `The class with sourcedId ${sourcedId} was not found or has already been deleted.`; // Corrected typo in \"nalready\"",
															"",
															"",
															"",
															"// 1. Verify status code",
															"pm.test(\" API should return 404 Not Found\", function () {",
															"  pm.response.to.have.status(404);",
															"});",
															"",
															"",
															"// 2. // Validate the error message exactly",
															"pm.test(\"Verify Error message and it should matches with requested sourcedId \", function () {",
															"    pm.expect(jsonData.imsx_description).to.eql(expectedErrorMessage);",
															"});",
															"",
															"",
															"// 3. Verify Response structure",
															"pm.test(\"Validate Json response structure\", function () {",
															"    const jsonData = pm.response.json();",
															"",
															"    // Top-level fields",
															"    pm.expect(jsonData).to.have.property(\"imsx_codeMajor\", \"failure\");",
															"    pm.expect(jsonData).to.have.property(\"imsx_severity\", \"error\");",
															"    pm.expect(jsonData).to.have.property(\"imsx_description\");",
															"    ",
															"",
															"    // Check imsx_CodeMinor structure",
															"    pm.expect(jsonData).to.have.property(\"imsx_CodeMinor\");",
															"    pm.expect(jsonData.imsx_CodeMinor).to.have.property(\"imsx_codeMinorField\");",
															"    pm.expect(jsonData.imsx_CodeMinor.imsx_codeMinorField).to.be.an(\"array\").that.is.not.empty;",
															"",
															"    // Validate inner fields",
															"    const minorField = jsonData.imsx_CodeMinor.imsx_codeMinorField[0];",
															"    pm.expect(minorField).to.have.property(\"imsx_codeMinorFieldName\", \"TargetEndSystem\");",
															"    pm.expect(minorField).to.have.property(\"imsx_codeMinorFieldValue\", \"unknownobject\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Set headers dynamically from environment variables",
															"pm.request.headers.upsert({ key: \"Authorization\", value: pm.environment.get(\"Auth\") });",
															"pm.request.headers.upsert({ key: \"x-app-key\", value: pm.environment.get(\"x-app-key\") });",
															"pm.request.headers.upsert({ key: \"x-client-id\", value: pm.environment.get(\"x-client-id\") });",
															"",
															"// Generate a random UUID for sourcedId",
															"function generateUUID() {",
															"    let dt = new Date().getTime();",
															"    let uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {",
															"        let r = (dt + Math.random() * 16) % 16 | 0;",
															"        dt = Math.floor(dt / 16);",
															"        return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);",
															"    });",
															"    return uuid;",
															"}",
															"",
															"let courseSourcedId = generateUUID();",
															"let classSourcedId = generateUUID();",
															"let scoreScaleSourcedId = generateUUID();",
															"let categorySourcedId = generateUUID();",
															"let sourcedId = generateUUID();",
															"",
															"",
															"pm.environment.set(\"courseSourcedId\", courseSourcedId);",
															"pm.environment.set(\"classSourcedId\", classSourcedId);",
															"pm.environment.set(\"scoreScaleSourcedId\", scoreScaleSourcedId);",
															"pm.environment.set(\"categorySourcedId\", categorySourcedId);",
															"pm.environment.set(\"sourcedId\", sourcedId);",
															"",
															"",
															"// Set headers",
															"const headers = {",
															"    'Authorization': pm.environment.get(\"Auth\"),",
															"    'x-app-key': pm.environment.get(\"x-app-key\"),",
															"    'x-client-id': pm.environment.get(\"x-client-id\"),",
															"    'Content-Type': 'application/json'",
															"};",
															"",
															"",
															"// Generate current UTC timestamp in ISO format: 2025-01-29T06:51:57Z",
															"function getCurrentISOString() {",
															"    return new Date().toISOString().split('.')[0] + \"Z\";",
															"}",
															"",
															"// Set dynamic date variables",
															"let isoDateTime = getCurrentISOString(); // full timestamp",
															"let isoDateOnly = isoDateTime.split('T')[0]; // date only",
															"",
															"pm.environment.set(\"isoDateTime\", isoDateTime);",
															"pm.environment.set(\"isoDateOnly\", isoDateOnly);",
															"",
															"console.log(\"Generated ISO DateTime: \" + isoDateTime);",
															"console.log(\"Generated ISO Date Only: \" + isoDateOnly);",
															"",
															"// Define Course API URL",
															"let courseUrl = pm.environment.get(\"URL\") + pm.environment.get(\"customPathPrefix\")+\"/courses\";",
															"",
															"// Define getAllOrgs API URL",
															"let getAllOrgsUrl = pm.environment.get(\"URL\") + pm.environment.get(\"rosterPathPrefix\")+\"/orgs\";",
															"",
															"// Define getAllterms API URL",
															"let getAllTermsUrl = pm.environment.get(\"URL\") + pm.environment.get(\"rosterPathPrefix\")+\"/terms\";",
															"",
															"// Define Class API URL",
															"let classUrl = pm.environment.get(\"URL\") + pm.environment.get(\"customPathPrefix\")+\"/classes\";",
															"",
															"// Define ScoreScale API URL",
															"let scoreScaleUrl = pm.environment.get(\"URL\") + pm.environment.get(\"pathPrefix\")+\"/scoreScales/\"+ scoreScaleSourcedId;",
															"",
															"// Define Category API URL",
															"let categoryUrl = pm.environment.get(\"URL\") + pm.environment.get(\"pathPrefix\")+\"/categories/\"+ categorySourcedId;",
															"",
															"// Define putLineItem API URL",
															"let putLineItemUrl = pm.environment.get(\"URL\") + pm.environment.get(\"pathPrefix\")+\"/lineItems/\"+ sourcedId;",
															"",
															"// Define deleteClass API URL",
															"let deleteClassUrl = pm.environment.get(\"URL\") + pm.environment.get(\"customPathPrefix\")+\"/classes/\"+ classSourcedId ;",
															"",
															"",
															"// Define Course API Request Body",
															"let courseRequestBody = {",
															"    \"sourcedId\": pm.environment.get(\"courseSourcedId\"), //required",
															"    \"status\": \"active\", //required",
															"    \"title\": \"QA\", //required",
															"    \"courseCode\": \"courseCode\" //required",
															"}",
															"",
															"",
															"// Define Class API Request Body",
															"let classRequestBody = {",
															"    \"sourcedId\": pm.environment.get(\"classSourcedId\"), //Required",
															"    \"status\": \"active\", //Required",
															"    \"title\": \"title\", //Required",
															"    \"classType\": \"SCHEDULED\", //Required",
															"    \"course\": { //required",
															"        \"href\": \"/courses/\" + pm.environment.get(\"courseSourcedId\"),",
															"        \"sourcedId\": pm.environment.get(\"courseSourcedId\"),",
															"        \"type\": \"course\"",
															"                },",
															"    \"school\": { //required",
															"        \"href\": \"/org/\" + pm.environment.get(\"school_sourcedId\"),",
															"        \"sourcedId\": pm.environment.get(\"school_sourcedId\"),",
															"        \"type\": \"org\"",
															"                },",
															"    \"terms\": [ //required",
															"        {",
															"            \"href\": \"/academicSession/\" + pm.environment.get(\"term_sourcedId\"),",
															"            \"sourcedId\":pm.environment.get(\"term_sourcedId\"),",
															"             \"type\": \"academicSession\"",
															"        }",
															"    ]",
															"}",
															"",
															"",
															"// Define ScoreScale API Request Body",
															"let scoreScaleRequestBody = {",
															"    \"scoreScale\": {",
															"    \"sourcedId\":pm.environment.get(\"scoreScaleSourcedId\"), //required",
															"    \"status\": \"active\", //required",
															"    \"dateLastModified\": isoDateTime, //required",
															"    \"metadata\": {",
															"        \"test\": \"metadata\"",
															"                },",
															"    \"title\": \"QATestProd\", //required",
															"    \"type\": \"QATestProd\", //required",
															"    \"course\": {",
															"            \"href\": \"/course/\" + pm.environment.get(\"courseSourcedId\"),",
															"            \"sourcedId\": pm.environment.get(\"courseSourcedId\"),",
															"            \"type\": \"course\"",
															"        },",
															"    \"class\": {  //required",
															"            \"href\": \"/classes/\" + pm.environment.get(\"classSourcedId\"),",
															"            \"sourcedId\": pm.environment.get(\"classSourcedId\"),",
															"            \"type\": \"class\"",
															"        },",
															"    \"scoreScaleValue\": [ //required",
															"        {",
															"            \"itemValueLHS\": \"0-57\",",
															"            \"itemValueRHS\": \"F\"",
															"        },",
															"        {",
															"            \"itemValueLHS\": \"60-69\",",
															"            \"itemValueRHS\": \"D\"",
															"        }",
															"                        ]",
															"    }",
															"}",
															"",
															"",
															"// Define Category API Request Body",
															"let categoryRequestBody = {",
															"     \"category\": {",
															"        \"sourcedId\": pm.environment.get(\"categorySourcedId\"),",
															"        \"status\": \"active\",",
															"        \"dateLastModified\": isoDateTime,",
															"        \"metadata\": {},",
															"        \"title\": \"title\",",
															"        \"weight\": 3",
															"                }",
															"}",
															"",
															"",
															"// Define Category API Request Body",
															"let putLineItemRequestBody = {",
															"    \"lineItem\": {",
															"        \"sourcedId\": pm.environment.get(\"sourcedId\"), // required",
															"        \"status\": \"active\", // required",
															"        \"dateLastModified\": isoDateTime, // Correct UTC ISO8601 format // required",
															"        \"title\": \"MathTest\", // required",
															"        \"assignDate\": isoDateTime, // Correct UTC ISO8601 format // required",
															"        \"dueDate\": isoDateTime, // Correct UTC ISO8601 format // required",
															"        \"class\": { // required",
															"            \"href\": \"/classes/c6b2a92c-6efd-4d0d-989a-dddad7edc98d\",",
															"            \"sourcedId\": pm.environment.get(\"classSourcedId\"),",
															"            \"type\": \"class\"",
															"        },",
															"        \"school\": { // required",
															"            \"href\": \"/schools/91edfc73-d1ab-4168-93de-85a71d7f318d\",",
															"            \"sourcedId\": pm.environment.get(\"school_sourcedId\"),",
															"            \"type\": \"org\"",
															"        },",
															"        \"category\": { // required",
															"            \"href\": \"/category/5252bd60-6196-4063-9221-a9f27fe52c55\",",
															"            \"sourcedId\": pm.environment.get(\"categorySourcedId\"),",
															"            \"type\": \"category\"",
															"        }",
															"    }",
															"}",
															"",
															"// Make the Course POST request",
															"pm.sendRequest({",
															"    url: courseUrl,",
															"    method: 'POST',",
															"    header: headers,",
															"    body: {",
															"        mode: 'raw',",
															"        raw: JSON.stringify(courseRequestBody)",
															"    }",
															"}, function (err, res) {",
															"    if (err) {",
															"        console.error(\"POST Course API Error: \", err);",
															"        pm.environment.unset(\"courseSourcedId\"); // Clear sourcedId on failure",
															"        throw new Error(\"Course POST API request failed.\");",
															"    }",
															"",
															"    if (res.code !== 201) {  // Ensure status is 201 Created",
															"        console.error(\"Unexpected POST Course API Response Code: \" + res.code);",
															"        pm.environment.unset(\"courseSourcedId\"); // Clear sourcedId on failure",
															"        throw new Error(\"Course POST API did not return 201 Created.\");",
															"    }",
															"",
															"    console.log(\"Course POST API succeeded with status: \" + res.code);",
															"",
															"",
															" // Make getAllOrgs Request",
															"    pm.sendRequest({",
															"        url: getAllOrgsUrl,",
															"        method: 'GET',",
															"        header: headers",
															"    }, function (err, res) {",
															"        if (err || res.code !== 200) {",
															"            console.error(\"GET Orgs API Failed. Code:\", res?.code || \"No response\", \"Error:\", err);",
															"            throw new Error(\"GET Orgs API request failed.\");",
															"        }",
															"        console.log(\"GET Orgs API succeeded with status:\", res.code);",
															"        let response = res.json();",
															"        let schoolOrgs = response.orgs.filter(org => org.type === \"SCHOOL\");",
															"",
															"        if (schoolOrgs.length === 0) {",
															"            throw new Error(\"No orgs of type 'SCHOOL' found.\");",
															"        }",
															"",
															"        // Get a random school sourcedId",
															"        let randomIndex = Math.floor(Math.random() * schoolOrgs.length);",
															"        let schoolSourcedId = schoolOrgs[randomIndex].sourcedId;",
															"        console.log(\"Selected school sourcedId: \" + schoolSourcedId);",
															"        // Save to environment/collection variable for later use",
															"        pm.environment.set(\"school_sourcedId\", schoolSourcedId);",
															"",
															"",
															"     // Make getAllterms Request",
															"        pm.sendRequest({",
															"            url: getAllTermsUrl,",
															"            method: 'GET',",
															"            header: headers",
															"        }, function (err, res) {",
															"            if (err || res.code !== 200) {",
															"                console.error(\"GET TERMS API Failed. Code:\", res?.code || \"No response\", \"Error:\", err);",
															"                throw new Error(\"GET TERMS API request failed.\");",
															"            }",
															"",
															"            console.log(\"GET TERMS API succeeded with status:\", res.code);",
															"",
															"            let response = res.json();",
															"            let termSessions = response.academicSessions.filter(session => session.type === \"TERM\");",
															"",
															"            if (termSessions.length === 0) {",
															"                throw new Error(\"No academicSessions of type 'TERM' found.\");",
															"            }",
															"",
															"            // Select a random term sourcedId",
															"            let randomIndex = Math.floor(Math.random() * termSessions.length);",
															"            let termSourcedId = termSessions[randomIndex].sourcedId;",
															"",
															"            console.log(\"Selected TERM sourcedId: \" + termSourcedId);",
															"",
															"            // Save to environment/collection variable",
															"            pm.environment.set(\"term_sourcedId\", termSourcedId);",
															"",
															"            // Make the Class POST request",
															"            pm.sendRequest({",
															"                url: classUrl,",
															"                method: 'POST',",
															"                header: headers,",
															"                body: {",
															"                    mode: 'raw',",
															"                    raw: JSON.stringify(classRequestBody)",
															"                }",
															"            }, function (err, res) {",
															"                if (err) {",
															"                    console.error(\"POST Class API Error: \", err);",
															"                    pm.environment.unset(\"classSourcedId\"); // Clear sourcedId on failure",
															"                    throw new Error(\"Class POST API request failed.\");",
															"                }",
															"",
															"                if (res.code !== 201) {  // Ensure status is 201 Created",
															"                    console.error(\"Unexpected POST Class API Response Code: \" + res.code);",
															"                    pm.environment.unset(\"classSourcedId\"); // Clear sourcedId on failure",
															"                    throw new Error(\"POST Class API did not return 201 Created.\");",
															"                }",
															"",
															"                console.log(\"POST Class API succeeded with status: \" + res.code);",
															"",
															"",
															"                // Make the PUT ScoreScale request",
															"                pm.sendRequest({",
															"                    url: scoreScaleUrl,",
															"                    method: 'PUT',",
															"                    header: headers,",
															"                    body: {",
															"                        mode: 'raw',",
															"                        raw: JSON.stringify(scoreScaleRequestBody)",
															"                    }",
															"                }, function (err, res) {",
															"                    if (err) {",
															"                        console.error(\"PUT ScoreScale API Error: \", err);",
															"                        pm.environment.unset(\"scoreScaleSourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT ScoreScale API request failed.\");",
															"                    }",
															"",
															"                    if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
															"                        console.error(\"Unexpected PUT ScoreScale API Response Code: \" + res.code);",
															"                        pm.environment.unset(\"scoreScaleSourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT ScoreScale API did not return 200 or 201.\");",
															"                    }",
															"",
															"                    console.log(\"PUT ScoreScale API succeeded with status: \" + res.code);",
															"",
															"",
															"                    // Make the PUT Category request",
															"                pm.sendRequest({",
															"                    url: categoryUrl,",
															"                    method: 'PUT',",
															"                    header: headers,",
															"                    body: {",
															"                        mode: 'raw',",
															"                        raw: JSON.stringify(categoryRequestBody)",
															"                    }",
															"                }, function (err, res) {",
															"                    if (err) {",
															"                        console.error(\"PUT Category API Error: \", err);",
															"                        pm.environment.unset(\"categorySourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT Category API request failed.\");",
															"                    }",
															"",
															"                    if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
															"                        console.error(\"Unexpected PUT Category API Response Code: \" + res.code);",
															"                        pm.environment.unset(\"categorySourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT Category API did not return 200 or 201.\");",
															"                    }",
															"",
															"                    console.log(\"PUT Category API succeeded with status: \" + res.code);",
															"                    });",
															"                });",
															"            });",
															"        });",
															"    });",
															"});",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"lineItem\": {\n        \"sourcedId\": \"{{sourcedId}}\", // required\n        \"status\": \"active\", // required\n        \"dateLastModified\": \"{{isoDateTime}}\", // Correct UTC ISO8601 format // required\n        \"title\": \"Math\\nTest\", // required\n        \"assignDate\": \"{{isoDateTime}}\", // Correct UTC ISO8601 format // required\n        \"dueDate\": \"{{isoDateTime}}\", // Correct UTC ISO8601 format // required\n        \"class\": { // required\n            \"href\": \"/classes/c6b2a92c-6efd-4d0d-989a-dddad7edc98d\",\n            \"sourcedId\": \"{{sourcedId}}\",\n            \"type\": \"class\"\n        },\n        \"school\": { // required\n            \"href\": \"/schools/91edfc73-d1ab-4168-93de-85a71d7f318d\",\n            \"sourcedId\": \"{{school_sourcedId}}\",\n            \"type\": \"org\"\n        },\n        \"category\": { // required\n            \"href\": \"/category/5252bd60-6196-4063-9221-a9f27fe52c55\",\n            \"sourcedId\": \"{{categorySourcedId}}\",\n            \"type\": \"category\"\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}{{endpoint}}/lineItems/{{sourcedId}}",
													"host": [
														"{{URL}}{{endpoint}}"
													],
													"path": [
														"lineItems",
														"{{sourcedId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify API throws an error for school which is not exist",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Parse the JSON response",
															"let jsonData = pm.response.json(); ",
															"",
															"pm.test(\" API should return 404 Not Found\", function () {",
															"  pm.response.to.have.status(404);",
															"});",
															"",
															"",
															"",
															"// Construct expected error message",
															"let sourcedId = pm.environment.get(\"sourcedId\"); // Define the sourcedId here",
															"let expectedErrorMessage = `The school with sourcedId ${sourcedId} was not found or has already been deleted.`; // Corrected typo in \"nalready\"",
															"",
															"",
															"// Validate the error message exactly",
															"pm.test(\"Verify Error message and it should matches with requested sourcedId \", function () {",
															"    pm.expect(jsonData.imsx_description).to.eql(expectedErrorMessage);",
															"});",
															"",
															"",
															"",
															"pm.test(\"Validate response structure for LineItem unknownobject error \", function () {",
															"    const jsonData = pm.response.json();",
															"",
															"    // Top-level fields",
															"    pm.expect(jsonData).to.have.property(\"imsx_codeMajor\", \"failure\");",
															"    pm.expect(jsonData).to.have.property(\"imsx_severity\", \"error\");",
															"    pm.expect(jsonData).to.have.property(\"imsx_description\");",
															"    ",
															"",
															"    // Check imsx_CodeMinor structure",
															"    pm.expect(jsonData).to.have.property(\"imsx_CodeMinor\");",
															"    pm.expect(jsonData.imsx_CodeMinor).to.have.property(\"imsx_codeMinorField\");",
															"    pm.expect(jsonData.imsx_CodeMinor.imsx_codeMinorField).to.be.an(\"array\").that.is.not.empty;",
															"",
															"    // Validate inner fields",
															"    const minorField = jsonData.imsx_CodeMinor.imsx_codeMinorField[0];",
															"    pm.expect(minorField).to.have.property(\"imsx_codeMinorFieldName\", \"TargetEndSystem\");",
															"    pm.expect(minorField).to.have.property(\"imsx_codeMinorFieldValue\", \"unknownobject\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Set headers dynamically from environment variables",
															"pm.request.headers.upsert({ key: \"Authorization\", value: pm.environment.get(\"Auth\") });",
															"pm.request.headers.upsert({ key: \"x-app-key\", value: pm.environment.get(\"x-app-key\") });",
															"pm.request.headers.upsert({ key: \"x-client-id\", value: pm.environment.get(\"x-client-id\") });",
															"",
															"// Generate a random UUID for sourcedId",
															"function generateUUID() {",
															"    let dt = new Date().getTime();",
															"    let uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {",
															"        let r = (dt + Math.random() * 16) % 16 | 0;",
															"        dt = Math.floor(dt / 16);",
															"        return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);",
															"    });",
															"    return uuid;",
															"}",
															"",
															"let courseSourcedId = generateUUID();",
															"let classSourcedId = generateUUID();",
															"let scoreScaleSourcedId = generateUUID();",
															"let categorySourcedId = generateUUID();",
															"let sourcedId = generateUUID();",
															"",
															"",
															"pm.environment.set(\"courseSourcedId\", courseSourcedId);",
															"pm.environment.set(\"classSourcedId\", classSourcedId);",
															"pm.environment.set(\"scoreScaleSourcedId\", scoreScaleSourcedId);",
															"pm.environment.set(\"categorySourcedId\", categorySourcedId);",
															"pm.environment.set(\"sourcedId\", sourcedId);",
															"",
															"",
															"// Set headers",
															"const headers = {",
															"    'Authorization': pm.environment.get(\"Auth\"),",
															"    'x-app-key': pm.environment.get(\"x-app-key\"),",
															"    'x-client-id': pm.environment.get(\"x-client-id\"),",
															"    'Content-Type': 'application/json'",
															"};",
															"",
															"",
															"// Generate current UTC timestamp in ISO format: 2025-01-29T06:51:57Z",
															"function getCurrentISOString() {",
															"    return new Date().toISOString().split('.')[0] + \"Z\";",
															"}",
															"",
															"// Set dynamic date variables",
															"let isoDateTime = getCurrentISOString(); // full timestamp",
															"let isoDateOnly = isoDateTime.split('T')[0]; // date only",
															"",
															"pm.environment.set(\"isoDateTime\", isoDateTime);",
															"pm.environment.set(\"isoDateOnly\", isoDateOnly);",
															"",
															"console.log(\"Generated ISO DateTime: \" + isoDateTime);",
															"console.log(\"Generated ISO Date Only: \" + isoDateOnly);",
															"",
															"// Define Course API URL",
															"let courseUrl = pm.environment.get(\"URL\") + pm.environment.get(\"customPathPrefix\")+\"/courses\";",
															"",
															"// Define getAllOrgs API URL",
															"let getAllOrgsUrl = pm.environment.get(\"URL\") + pm.environment.get(\"rosterPathPrefix\")+\"/orgs\";",
															"",
															"// Define getAllterms API URL",
															"let getAllTermsUrl = pm.environment.get(\"URL\") + pm.environment.get(\"rosterPathPrefix\")+\"/terms\";",
															"",
															"// Define Class API URL",
															"let classUrl = pm.environment.get(\"URL\") + pm.environment.get(\"customPathPrefix\")+\"/classes\";",
															"",
															"// Define ScoreScale API URL",
															"let scoreScaleUrl = pm.environment.get(\"URL\") + pm.environment.get(\"pathPrefix\")+\"/scoreScales/\"+ scoreScaleSourcedId;",
															"",
															"// Define Category API URL",
															"let categoryUrl = pm.environment.get(\"URL\") + pm.environment.get(\"pathPrefix\")+\"/categories/\"+ categorySourcedId;",
															"",
															"// Define putLineItem API URL",
															"let putLineItemUrl = pm.environment.get(\"URL\") + pm.environment.get(\"pathPrefix\")+\"/lineItems/\"+ sourcedId;",
															"",
															"// Define deleteClass API URL",
															"let deleteClassUrl = pm.environment.get(\"URL\") + pm.environment.get(\"customPathPrefix\")+\"/classes/\"+ classSourcedId ;",
															"",
															"",
															"// Define Course API Request Body",
															"let courseRequestBody = {",
															"    \"sourcedId\": pm.environment.get(\"courseSourcedId\"), //required",
															"    \"status\": \"active\", //required",
															"    \"title\": \"QA\", //required",
															"    \"courseCode\": \"courseCode\" //required",
															"}",
															"",
															"",
															"// Define Class API Request Body",
															"let classRequestBody = {",
															"    \"sourcedId\": pm.environment.get(\"classSourcedId\"), //Required",
															"    \"status\": \"active\", //Required",
															"    \"title\": \"title\", //Required",
															"    \"classType\": \"SCHEDULED\", //Required",
															"    \"course\": { //required",
															"        \"href\": \"/courses/\" + pm.environment.get(\"courseSourcedId\"),",
															"        \"sourcedId\": pm.environment.get(\"courseSourcedId\"),",
															"        \"type\": \"course\"",
															"                },",
															"    \"school\": { //required",
															"        \"href\": \"/org/\" + pm.environment.get(\"school_sourcedId\"),",
															"        \"sourcedId\": pm.environment.get(\"school_sourcedId\"),",
															"        \"type\": \"org\"",
															"                },",
															"    \"terms\": [ //required",
															"        {",
															"            \"href\": \"/academicSession/\" + pm.environment.get(\"term_sourcedId\"),",
															"            \"sourcedId\":pm.environment.get(\"term_sourcedId\"),",
															"             \"type\": \"academicSession\"",
															"        }",
															"    ]",
															"}",
															"",
															"",
															"// Define ScoreScale API Request Body",
															"let scoreScaleRequestBody = {",
															"    \"scoreScale\": {",
															"    \"sourcedId\":pm.environment.get(\"scoreScaleSourcedId\"), //required",
															"    \"status\": \"active\", //required",
															"    \"dateLastModified\": isoDateTime, //required",
															"    \"metadata\": {",
															"        \"test\": \"metadata\"",
															"                },",
															"    \"title\": \"QATestProd\", //required",
															"    \"type\": \"QATestProd\", //required",
															"    \"course\": {",
															"            \"href\": \"/course/\" + pm.environment.get(\"courseSourcedId\"),",
															"            \"sourcedId\": pm.environment.get(\"courseSourcedId\"),",
															"            \"type\": \"course\"",
															"        },",
															"    \"class\": {  //required",
															"            \"href\": \"/classes/\" + pm.environment.get(\"classSourcedId\"),",
															"            \"sourcedId\": pm.environment.get(\"classSourcedId\"),",
															"            \"type\": \"class\"",
															"        },",
															"    \"scoreScaleValue\": [ //required",
															"        {",
															"            \"itemValueLHS\": \"0-57\",",
															"            \"itemValueRHS\": \"F\"",
															"        },",
															"        {",
															"            \"itemValueLHS\": \"60-69\",",
															"            \"itemValueRHS\": \"D\"",
															"        }",
															"                        ]",
															"    }",
															"}",
															"",
															"",
															"// Define Category API Request Body",
															"let categoryRequestBody = {",
															"     \"category\": {",
															"        \"sourcedId\": pm.environment.get(\"categorySourcedId\"),",
															"        \"status\": \"active\",",
															"        \"dateLastModified\": isoDateTime,",
															"        \"metadata\": {},",
															"        \"title\": \"title\",",
															"        \"weight\": 3",
															"                }",
															"}",
															"",
															"",
															"// Define Category API Request Body",
															"let putLineItemRequestBody = {",
															"    \"lineItem\": {",
															"        \"sourcedId\": pm.environment.get(\"sourcedId\"), // required",
															"        \"status\": \"active\", // required",
															"        \"dateLastModified\": isoDateTime, // Correct UTC ISO8601 format // required",
															"        \"title\": \"MathTest\", // required",
															"        \"assignDate\": isoDateTime, // Correct UTC ISO8601 format // required",
															"        \"dueDate\": isoDateTime, // Correct UTC ISO8601 format // required",
															"        \"class\": { // required",
															"            \"href\": \"/classes/c6b2a92c-6efd-4d0d-989a-dddad7edc98d\",",
															"            \"sourcedId\": pm.environment.get(\"classSourcedId\"),",
															"            \"type\": \"class\"",
															"        },",
															"        \"school\": { // required",
															"            \"href\": \"/schools/91edfc73-d1ab-4168-93de-85a71d7f318d\",",
															"            \"sourcedId\": pm.environment.get(\"school_sourcedId\"),",
															"            \"type\": \"org\"",
															"        },",
															"        \"category\": { // required",
															"            \"href\": \"/category/5252bd60-6196-4063-9221-a9f27fe52c55\",",
															"            \"sourcedId\": pm.environment.get(\"categorySourcedId\"),",
															"            \"type\": \"category\"",
															"        }",
															"    }",
															"}",
															"",
															"// Make the Course POST request",
															"pm.sendRequest({",
															"    url: courseUrl,",
															"    method: 'POST',",
															"    header: headers,",
															"    body: {",
															"        mode: 'raw',",
															"        raw: JSON.stringify(courseRequestBody)",
															"    }",
															"}, function (err, res) {",
															"    if (err) {",
															"        console.error(\"POST Course API Error: \", err);",
															"        pm.environment.unset(\"courseSourcedId\"); // Clear sourcedId on failure",
															"        throw new Error(\"Course POST API request failed.\");",
															"    }",
															"",
															"    if (res.code !== 201) {  // Ensure status is 201 Created",
															"        console.error(\"Unexpected POST Course API Response Code: \" + res.code);",
															"        pm.environment.unset(\"courseSourcedId\"); // Clear sourcedId on failure",
															"        throw new Error(\"Course POST API did not return 201 Created.\");",
															"    }",
															"",
															"    console.log(\"Course POST API succeeded with status: \" + res.code);",
															"",
															"",
															" // Make getAllOrgs Request",
															"    pm.sendRequest({",
															"        url: getAllOrgsUrl,",
															"        method: 'GET',",
															"        header: headers",
															"    }, function (err, res) {",
															"        if (err || res.code !== 200) {",
															"            console.error(\"GET Orgs API Failed. Code:\", res?.code || \"No response\", \"Error:\", err);",
															"            throw new Error(\"GET Orgs API request failed.\");",
															"        }",
															"        console.log(\"GET Orgs API succeeded with status:\", res.code);",
															"        let response = res.json();",
															"        let schoolOrgs = response.orgs.filter(org => org.type === \"SCHOOL\");",
															"",
															"        if (schoolOrgs.length === 0) {",
															"            throw new Error(\"No orgs of type 'SCHOOL' found.\");",
															"        }",
															"",
															"        // Get a random school sourcedId",
															"        let randomIndex = Math.floor(Math.random() * schoolOrgs.length);",
															"        let schoolSourcedId = schoolOrgs[randomIndex].sourcedId;",
															"        console.log(\"Selected school sourcedId: \" + schoolSourcedId);",
															"        // Save to environment/collection variable for later use",
															"        pm.environment.set(\"school_sourcedId\", schoolSourcedId);",
															"",
															"",
															"     // Make getAllterms Request",
															"        pm.sendRequest({",
															"            url: getAllTermsUrl,",
															"            method: 'GET',",
															"            header: headers",
															"        }, function (err, res) {",
															"            if (err || res.code !== 200) {",
															"                console.error(\"GET TERMS API Failed. Code:\", res?.code || \"No response\", \"Error:\", err);",
															"                throw new Error(\"GET TERMS API request failed.\");",
															"            }",
															"",
															"            console.log(\"GET TERMS API succeeded with status:\", res.code);",
															"",
															"            let response = res.json();",
															"            let termSessions = response.academicSessions.filter(session => session.type === \"TERM\");",
															"",
															"            if (termSessions.length === 0) {",
															"                throw new Error(\"No academicSessions of type 'TERM' found.\");",
															"            }",
															"",
															"            // Select a random term sourcedId",
															"            let randomIndex = Math.floor(Math.random() * termSessions.length);",
															"            let termSourcedId = termSessions[randomIndex].sourcedId;",
															"",
															"            console.log(\"Selected TERM sourcedId: \" + termSourcedId);",
															"",
															"            // Save to environment/collection variable",
															"            pm.environment.set(\"term_sourcedId\", termSourcedId);",
															"",
															"            // Make the Class POST request",
															"            pm.sendRequest({",
															"                url: classUrl,",
															"                method: 'POST',",
															"                header: headers,",
															"                body: {",
															"                    mode: 'raw',",
															"                    raw: JSON.stringify(classRequestBody)",
															"                }",
															"            }, function (err, res) {",
															"                if (err) {",
															"                    console.error(\"POST Class API Error: \", err);",
															"                    pm.environment.unset(\"classSourcedId\"); // Clear sourcedId on failure",
															"                    throw new Error(\"Class POST API request failed.\");",
															"                }",
															"",
															"                if (res.code !== 201) {  // Ensure status is 201 Created",
															"                    console.error(\"Unexpected POST Class API Response Code: \" + res.code);",
															"                    pm.environment.unset(\"classSourcedId\"); // Clear sourcedId on failure",
															"                    throw new Error(\"POST Class API did not return 201 Created.\");",
															"                }",
															"",
															"                console.log(\"POST Class API succeeded with status: \" + res.code);",
															"",
															"",
															"                // Make the PUT ScoreScale request",
															"                pm.sendRequest({",
															"                    url: scoreScaleUrl,",
															"                    method: 'PUT',",
															"                    header: headers,",
															"                    body: {",
															"                        mode: 'raw',",
															"                        raw: JSON.stringify(scoreScaleRequestBody)",
															"                    }",
															"                }, function (err, res) {",
															"                    if (err) {",
															"                        console.error(\"PUT ScoreScale API Error: \", err);",
															"                        pm.environment.unset(\"scoreScaleSourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT ScoreScale API request failed.\");",
															"                    }",
															"",
															"                    if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
															"                        console.error(\"Unexpected PUT ScoreScale API Response Code: \" + res.code);",
															"                        pm.environment.unset(\"scoreScaleSourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT ScoreScale API did not return 200 or 201.\");",
															"                    }",
															"",
															"                    console.log(\"PUT ScoreScale API succeeded with status: \" + res.code);",
															"",
															"",
															"                    // Make the PUT Category request",
															"                pm.sendRequest({",
															"                    url: categoryUrl,",
															"                    method: 'PUT',",
															"                    header: headers,",
															"                    body: {",
															"                        mode: 'raw',",
															"                        raw: JSON.stringify(categoryRequestBody)",
															"                    }",
															"                }, function (err, res) {",
															"                    if (err) {",
															"                        console.error(\"PUT Category API Error: \", err);",
															"                        pm.environment.unset(\"categorySourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT Category API request failed.\");",
															"                    }",
															"",
															"                    if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
															"                        console.error(\"Unexpected PUT Category API Response Code: \" + res.code);",
															"                        pm.environment.unset(\"categorySourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT Category API did not return 200 or 201.\");",
															"                    }",
															"",
															"                    console.log(\"PUT Category API succeeded with status: \" + res.code);",
															"                    });",
															"                });",
															"            });",
															"        });",
															"    });",
															"});",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"lineItem\": {\n        \"sourcedId\": \"{{sourcedId}}\", // required\n        \"status\": \"active\", // required\n        \"dateLastModified\": \"{{isoDateTime}}\", // Correct UTC ISO8601 format // required\n        \"title\": \"Math\\nTest\", // required\n        \"assignDate\": \"{{isoDateTime}}\", // Correct UTC ISO8601 format // required\n        \"dueDate\": \"{{isoDateTime}}\", // Correct UTC ISO8601 format // required\n        \"class\": { // required\n            \"href\": \"/classes/c6b2a92c-6efd-4d0d-989a-dddad7edc98d\",\n            \"sourcedId\": \"{{classSourcedId}}\",\n            \"type\": \"class\"\n        },\n        \"school\": { // required\n            \"href\": \"/schools/91edfc73-d1ab-4168-93de-85a71d7f318d\",\n            \"sourcedId\": \"{{sourcedId}}\",\n            \"type\": \"org\"\n        },\n        \"category\": { // required\n            \"href\": \"/category/5252bd60-6196-4063-9221-a9f27fe52c55\",\n            \"sourcedId\": \"{{categorySourcedId}}\",\n            \"type\": \"category\"\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}{{endpoint}}/lineItems/{{sourcedId}}",
													"host": [
														"{{URL}}{{endpoint}}"
													],
													"path": [
														"lineItems",
														"{{sourcedId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify API throws an error for Category which is not exist",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Parse the JSON response",
															"let jsonData = pm.response.json(); ",
															"",
															"pm.test(\" API should return 404 Not Found\", function () {",
															"  pm.response.to.have.status(404);",
															"});",
															"",
															"",
															"",
															"// Construct expected error message",
															"let sourcedId = pm.environment.get(\"sourcedId\"); // Define the sourcedId here",
															"let expectedErrorMessage = `The category with sourcedId ${sourcedId} was not found or has already been deleted.`; // Corrected typo in \"nalready\"",
															"",
															"",
															"",
															"// Validate the error message exactly",
															"pm.test(\"Verify Error message and it should matches with requested sourcedId \", function () {",
															"    pm.expect(jsonData.imsx_description).to.eql(expectedErrorMessage);",
															"});",
															"",
															"",
															"",
															"pm.test(\"Validate response structure for LineItem unknownobject error \", function () {",
															"    const jsonData = pm.response.json();",
															"",
															"    // Top-level fields",
															"    pm.expect(jsonData).to.have.property(\"imsx_codeMajor\", \"failure\");",
															"    pm.expect(jsonData).to.have.property(\"imsx_severity\", \"error\");",
															"    pm.expect(jsonData).to.have.property(\"imsx_description\");",
															"    ",
															"",
															"    // Check imsx_CodeMinor structure",
															"    pm.expect(jsonData).to.have.property(\"imsx_CodeMinor\");",
															"    pm.expect(jsonData.imsx_CodeMinor).to.have.property(\"imsx_codeMinorField\");",
															"    pm.expect(jsonData.imsx_CodeMinor.imsx_codeMinorField).to.be.an(\"array\").that.is.not.empty;",
															"",
															"    // Validate inner fields",
															"    const minorField = jsonData.imsx_CodeMinor.imsx_codeMinorField[0];",
															"    pm.expect(minorField).to.have.property(\"imsx_codeMinorFieldName\", \"TargetEndSystem\");",
															"    pm.expect(minorField).to.have.property(\"imsx_codeMinorFieldValue\", \"unknownobject\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Set headers dynamically from environment variables",
															"pm.request.headers.upsert({ key: \"Authorization\", value: pm.environment.get(\"Auth\") });",
															"pm.request.headers.upsert({ key: \"x-app-key\", value: pm.environment.get(\"x-app-key\") });",
															"pm.request.headers.upsert({ key: \"x-client-id\", value: pm.environment.get(\"x-client-id\") });",
															"",
															"// Generate a random UUID for sourcedId",
															"function generateUUID() {",
															"    let dt = new Date().getTime();",
															"    let uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {",
															"        let r = (dt + Math.random() * 16) % 16 | 0;",
															"        dt = Math.floor(dt / 16);",
															"        return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);",
															"    });",
															"    return uuid;",
															"}",
															"",
															"let courseSourcedId = generateUUID();",
															"let classSourcedId = generateUUID();",
															"let scoreScaleSourcedId = generateUUID();",
															"let categorySourcedId = generateUUID();",
															"let sourcedId = generateUUID();",
															"",
															"",
															"pm.environment.set(\"courseSourcedId\", courseSourcedId);",
															"pm.environment.set(\"classSourcedId\", classSourcedId);",
															"pm.environment.set(\"scoreScaleSourcedId\", scoreScaleSourcedId);",
															"pm.environment.set(\"categorySourcedId\", categorySourcedId);",
															"pm.environment.set(\"sourcedId\", sourcedId);",
															"",
															"",
															"// Set headers",
															"const headers = {",
															"    'Authorization': pm.environment.get(\"Auth\"),",
															"    'x-app-key': pm.environment.get(\"x-app-key\"),",
															"    'x-client-id': pm.environment.get(\"x-client-id\"),",
															"    'Content-Type': 'application/json'",
															"};",
															"",
															"",
															"// Generate current UTC timestamp in ISO format: 2025-01-29T06:51:57Z",
															"function getCurrentISOString() {",
															"    return new Date().toISOString().split('.')[0] + \"Z\";",
															"}",
															"",
															"// Set dynamic date variables",
															"let isoDateTime = getCurrentISOString(); // full timestamp",
															"let isoDateOnly = isoDateTime.split('T')[0]; // date only",
															"",
															"pm.environment.set(\"isoDateTime\", isoDateTime);",
															"pm.environment.set(\"isoDateOnly\", isoDateOnly);",
															"",
															"console.log(\"Generated ISO DateTime: \" + isoDateTime);",
															"console.log(\"Generated ISO Date Only: \" + isoDateOnly);",
															"",
															"// Define Course API URL",
															"let courseUrl = pm.environment.get(\"URL\") + pm.environment.get(\"customPathPrefix\")+\"/courses\";",
															"",
															"// Define getAllOrgs API URL",
															"let getAllOrgsUrl = pm.environment.get(\"URL\") + pm.environment.get(\"rosterPathPrefix\")+\"/orgs\";",
															"",
															"// Define getAllterms API URL",
															"let getAllTermsUrl = pm.environment.get(\"URL\") + pm.environment.get(\"rosterPathPrefix\")+\"/terms\";",
															"",
															"// Define Class API URL",
															"let classUrl = pm.environment.get(\"URL\") + pm.environment.get(\"customPathPrefix\")+\"/classes\";",
															"",
															"// Define ScoreScale API URL",
															"let scoreScaleUrl = pm.environment.get(\"URL\") + pm.environment.get(\"pathPrefix\")+\"/scoreScales/\"+ scoreScaleSourcedId;",
															"",
															"// Define Category API URL",
															"let categoryUrl = pm.environment.get(\"URL\") + pm.environment.get(\"pathPrefix\")+\"/categories/\"+ categorySourcedId;",
															"",
															"// Define putLineItem API URL",
															"let putLineItemUrl = pm.environment.get(\"URL\") + pm.environment.get(\"pathPrefix\")+\"/lineItems/\"+ sourcedId;",
															"",
															"// Define deleteClass API URL",
															"let deleteClassUrl = pm.environment.get(\"URL\") + pm.environment.get(\"customPathPrefix\")+\"/classes/\"+ classSourcedId ;",
															"",
															"",
															"// Define Course API Request Body",
															"let courseRequestBody = {",
															"    \"sourcedId\": pm.environment.get(\"courseSourcedId\"), //required",
															"    \"status\": \"active\", //required",
															"    \"title\": \"QA\", //required",
															"    \"courseCode\": \"courseCode\" //required",
															"}",
															"",
															"",
															"// Define Class API Request Body",
															"let classRequestBody = {",
															"    \"sourcedId\": pm.environment.get(\"classSourcedId\"), //Required",
															"    \"status\": \"active\", //Required",
															"    \"title\": \"title\", //Required",
															"    \"classType\": \"SCHEDULED\", //Required",
															"    \"course\": { //required",
															"        \"href\": \"/courses/\" + pm.environment.get(\"courseSourcedId\"),",
															"        \"sourcedId\": pm.environment.get(\"courseSourcedId\"),",
															"        \"type\": \"course\"",
															"                },",
															"    \"school\": { //required",
															"        \"href\": \"/org/\" + pm.environment.get(\"school_sourcedId\"),",
															"        \"sourcedId\": pm.environment.get(\"school_sourcedId\"),",
															"        \"type\": \"org\"",
															"                },",
															"    \"terms\": [ //required",
															"        {",
															"            \"href\": \"/academicSession/\" + pm.environment.get(\"term_sourcedId\"),",
															"            \"sourcedId\":pm.environment.get(\"term_sourcedId\"),",
															"             \"type\": \"academicSession\"",
															"        }",
															"    ]",
															"}",
															"",
															"",
															"// Define ScoreScale API Request Body",
															"let scoreScaleRequestBody = {",
															"    \"scoreScale\": {",
															"    \"sourcedId\":pm.environment.get(\"scoreScaleSourcedId\"), //required",
															"    \"status\": \"active\", //required",
															"    \"dateLastModified\": isoDateTime, //required",
															"    \"metadata\": {",
															"        \"test\": \"metadata\"",
															"                },",
															"    \"title\": \"QATestProd\", //required",
															"    \"type\": \"QATestProd\", //required",
															"    \"course\": {",
															"            \"href\": \"/course/\" + pm.environment.get(\"courseSourcedId\"),",
															"            \"sourcedId\": pm.environment.get(\"courseSourcedId\"),",
															"            \"type\": \"course\"",
															"        },",
															"    \"class\": {  //required",
															"            \"href\": \"/classes/\" + pm.environment.get(\"classSourcedId\"),",
															"            \"sourcedId\": pm.environment.get(\"classSourcedId\"),",
															"            \"type\": \"class\"",
															"        },",
															"    \"scoreScaleValue\": [ //required",
															"        {",
															"            \"itemValueLHS\": \"0-57\",",
															"            \"itemValueRHS\": \"F\"",
															"        },",
															"        {",
															"            \"itemValueLHS\": \"60-69\",",
															"            \"itemValueRHS\": \"D\"",
															"        }",
															"                        ]",
															"    }",
															"}",
															"",
															"",
															"// Define Category API Request Body",
															"let categoryRequestBody = {",
															"     \"category\": {",
															"        \"sourcedId\": pm.environment.get(\"categorySourcedId\"),",
															"        \"status\": \"active\",",
															"        \"dateLastModified\": isoDateTime,",
															"        \"metadata\": {},",
															"        \"title\": \"title\",",
															"        \"weight\": 3",
															"                }",
															"}",
															"",
															"",
															"// Define Category API Request Body",
															"let putLineItemRequestBody = {",
															"    \"lineItem\": {",
															"        \"sourcedId\": pm.environment.get(\"sourcedId\"), // required",
															"        \"status\": \"active\", // required",
															"        \"dateLastModified\": isoDateTime, // Correct UTC ISO8601 format // required",
															"        \"title\": \"MathTest\", // required",
															"        \"assignDate\": isoDateTime, // Correct UTC ISO8601 format // required",
															"        \"dueDate\": isoDateTime, // Correct UTC ISO8601 format // required",
															"        \"class\": { // required",
															"            \"href\": \"/classes/c6b2a92c-6efd-4d0d-989a-dddad7edc98d\",",
															"            \"sourcedId\": pm.environment.get(\"classSourcedId\"),",
															"            \"type\": \"class\"",
															"        },",
															"        \"school\": { // required",
															"            \"href\": \"/schools/91edfc73-d1ab-4168-93de-85a71d7f318d\",",
															"            \"sourcedId\": pm.environment.get(\"school_sourcedId\"),",
															"            \"type\": \"org\"",
															"        },",
															"        \"category\": { // required",
															"            \"href\": \"/category/5252bd60-6196-4063-9221-a9f27fe52c55\",",
															"            \"sourcedId\": pm.environment.get(\"categorySourcedId\"),",
															"            \"type\": \"category\"",
															"        }",
															"    }",
															"}",
															"",
															"// Make the Course POST request",
															"pm.sendRequest({",
															"    url: courseUrl,",
															"    method: 'POST',",
															"    header: headers,",
															"    body: {",
															"        mode: 'raw',",
															"        raw: JSON.stringify(courseRequestBody)",
															"    }",
															"}, function (err, res) {",
															"    if (err) {",
															"        console.error(\"POST Course API Error: \", err);",
															"        pm.environment.unset(\"courseSourcedId\"); // Clear sourcedId on failure",
															"        throw new Error(\"Course POST API request failed.\");",
															"    }",
															"",
															"    if (res.code !== 201) {  // Ensure status is 201 Created",
															"        console.error(\"Unexpected POST Course API Response Code: \" + res.code);",
															"        pm.environment.unset(\"courseSourcedId\"); // Clear sourcedId on failure",
															"        throw new Error(\"Course POST API did not return 201 Created.\");",
															"    }",
															"",
															"    console.log(\"Course POST API succeeded with status: \" + res.code);",
															"",
															"",
															" // Make getAllOrgs Request",
															"    pm.sendRequest({",
															"        url: getAllOrgsUrl,",
															"        method: 'GET',",
															"        header: headers",
															"    }, function (err, res) {",
															"        if (err || res.code !== 200) {",
															"            console.error(\"GET Orgs API Failed. Code:\", res?.code || \"No response\", \"Error:\", err);",
															"            throw new Error(\"GET Orgs API request failed.\");",
															"        }",
															"        console.log(\"GET Orgs API succeeded with status:\", res.code);",
															"        let response = res.json();",
															"        let schoolOrgs = response.orgs.filter(org => org.type === \"SCHOOL\");",
															"",
															"        if (schoolOrgs.length === 0) {",
															"            throw new Error(\"No orgs of type 'SCHOOL' found.\");",
															"        }",
															"",
															"        // Get a random school sourcedId",
															"        let randomIndex = Math.floor(Math.random() * schoolOrgs.length);",
															"        let schoolSourcedId = schoolOrgs[randomIndex].sourcedId;",
															"        console.log(\"Selected school sourcedId: \" + schoolSourcedId);",
															"        // Save to environment/collection variable for later use",
															"        pm.environment.set(\"school_sourcedId\", schoolSourcedId);",
															"",
															"",
															"     // Make getAllterms Request",
															"        pm.sendRequest({",
															"            url: getAllTermsUrl,",
															"            method: 'GET',",
															"            header: headers",
															"        }, function (err, res) {",
															"            if (err || res.code !== 200) {",
															"                console.error(\"GET TERMS API Failed. Code:\", res?.code || \"No response\", \"Error:\", err);",
															"                throw new Error(\"GET TERMS API request failed.\");",
															"            }",
															"",
															"            console.log(\"GET TERMS API succeeded with status:\", res.code);",
															"",
															"            let response = res.json();",
															"            let termSessions = response.academicSessions.filter(session => session.type === \"TERM\");",
															"",
															"            if (termSessions.length === 0) {",
															"                throw new Error(\"No academicSessions of type 'TERM' found.\");",
															"            }",
															"",
															"            // Select a random term sourcedId",
															"            let randomIndex = Math.floor(Math.random() * termSessions.length);",
															"            let termSourcedId = termSessions[randomIndex].sourcedId;",
															"",
															"            console.log(\"Selected TERM sourcedId: \" + termSourcedId);",
															"",
															"            // Save to environment/collection variable",
															"            pm.environment.set(\"term_sourcedId\", termSourcedId);",
															"",
															"            // Make the Class POST request",
															"            pm.sendRequest({",
															"                url: classUrl,",
															"                method: 'POST',",
															"                header: headers,",
															"                body: {",
															"                    mode: 'raw',",
															"                    raw: JSON.stringify(classRequestBody)",
															"                }",
															"            }, function (err, res) {",
															"                if (err) {",
															"                    console.error(\"POST Class API Error: \", err);",
															"                    pm.environment.unset(\"classSourcedId\"); // Clear sourcedId on failure",
															"                    throw new Error(\"Class POST API request failed.\");",
															"                }",
															"",
															"                if (res.code !== 201) {  // Ensure status is 201 Created",
															"                    console.error(\"Unexpected POST Class API Response Code: \" + res.code);",
															"                    pm.environment.unset(\"classSourcedId\"); // Clear sourcedId on failure",
															"                    throw new Error(\"POST Class API did not return 201 Created.\");",
															"                }",
															"",
															"                console.log(\"POST Class API succeeded with status: \" + res.code);",
															"",
															"",
															"                // Make the PUT ScoreScale request",
															"                pm.sendRequest({",
															"                    url: scoreScaleUrl,",
															"                    method: 'PUT',",
															"                    header: headers,",
															"                    body: {",
															"                        mode: 'raw',",
															"                        raw: JSON.stringify(scoreScaleRequestBody)",
															"                    }",
															"                }, function (err, res) {",
															"                    if (err) {",
															"                        console.error(\"PUT ScoreScale API Error: \", err);",
															"                        pm.environment.unset(\"scoreScaleSourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT ScoreScale API request failed.\");",
															"                    }",
															"",
															"                    if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
															"                        console.error(\"Unexpected PUT ScoreScale API Response Code: \" + res.code);",
															"                        pm.environment.unset(\"scoreScaleSourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT ScoreScale API did not return 200 or 201.\");",
															"                    }",
															"",
															"                    console.log(\"PUT ScoreScale API succeeded with status: \" + res.code);",
															"",
															"",
															"                    // Make the PUT Category request",
															"                pm.sendRequest({",
															"                    url: categoryUrl,",
															"                    method: 'PUT',",
															"                    header: headers,",
															"                    body: {",
															"                        mode: 'raw',",
															"                        raw: JSON.stringify(categoryRequestBody)",
															"                    }",
															"                }, function (err, res) {",
															"                    if (err) {",
															"                        console.error(\"PUT Category API Error: \", err);",
															"                        pm.environment.unset(\"categorySourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT Category API request failed.\");",
															"                    }",
															"",
															"                    if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
															"                        console.error(\"Unexpected PUT Category API Response Code: \" + res.code);",
															"                        pm.environment.unset(\"categorySourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT Category API did not return 200 or 201.\");",
															"                    }",
															"",
															"                    console.log(\"PUT Category API succeeded with status: \" + res.code);",
															"                    });",
															"                });",
															"            });",
															"        });",
															"    });",
															"});",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"lineItem\": {\n        \"sourcedId\": \"{{sourcedId}}\", // required\n        \"status\": \"active\", // required\n        \"dateLastModified\": \"{{isoDateTime}}\", // Correct UTC ISO8601 format // required\n        \"title\": \"Math\\nTest\", // required\n        \"assignDate\": \"{{isoDateTime}}\", // Correct UTC ISO8601 format // required\n        \"dueDate\": \"{{isoDateTime}}\", // Correct UTC ISO8601 format // required\n        \"class\": { // required\n            \"href\": \"/classes/c6b2a92c-6efd-4d0d-989a-dddad7edc98d\",\n            \"sourcedId\": \"{{classSourcedId}}\",\n            \"type\": \"class\"\n        },\n        \"school\": { // required\n            \"href\": \"/schools/91edfc73-d1ab-4168-93de-85a71d7f318d\",\n            \"sourcedId\": \"{{school_sourcedId}}\",\n            \"type\": \"org\"\n        },\n        \"category\": { // required\n            \"href\": \"/category/5252bd60-6196-4063-9221-a9f27fe52c55\",\n            \"sourcedId\": \"{{sourcedId}}\",\n            \"type\": \"category\"\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}{{endpoint}}/lineItems/{{sourcedId}}",
													"host": [
														"{{URL}}{{endpoint}}"
													],
													"path": [
														"lineItems",
														"{{sourcedId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify API throws an error for Category which is deleted",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Parse the JSON response",
															"let jsonData = pm.response.json(); ",
															"",
															"pm.test(\" API should return 404 Not Found\", function () {",
															"  pm.response.to.have.status(404);",
															"});",
															"",
															"",
															"",
															"// Construct expected error message",
															"let categorySourcedId = pm.environment.get(\"categorySourcedId\"); // Define the sourcedId here",
															"let expectedErrorMessage = `The category with sourcedId ${categorySourcedId} was not found or has already been deleted.`; // Corrected typo in \"nalready\"",
															"",
															"",
															"// Validate the error message exactly",
															"pm.test(\"Verify Error message and it should matches with requested sourcedId \", function () {",
															"    pm.expect(jsonData.imsx_description).to.eql(expectedErrorMessage);",
															"});",
															"",
															"",
															"",
															"pm.test(\"Validate response structure for LineItem unknownobject error \", function () {",
															"    const jsonData = pm.response.json();",
															"",
															"    // Top-level fields",
															"    pm.expect(jsonData).to.have.property(\"imsx_codeMajor\", \"failure\");",
															"    pm.expect(jsonData).to.have.property(\"imsx_severity\", \"error\");",
															"    pm.expect(jsonData).to.have.property(\"imsx_description\");",
															"    ",
															"",
															"    // Check imsx_CodeMinor structure",
															"    pm.expect(jsonData).to.have.property(\"imsx_CodeMinor\");",
															"    pm.expect(jsonData.imsx_CodeMinor).to.have.property(\"imsx_codeMinorField\");",
															"    pm.expect(jsonData.imsx_CodeMinor.imsx_codeMinorField).to.be.an(\"array\").that.is.not.empty;",
															"",
															"    // Validate inner fields",
															"    const minorField = jsonData.imsx_CodeMinor.imsx_codeMinorField[0];",
															"    pm.expect(minorField).to.have.property(\"imsx_codeMinorFieldName\", \"TargetEndSystem\");",
															"    pm.expect(minorField).to.have.property(\"imsx_codeMinorFieldValue\", \"unknownobject\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Set headers dynamically from environment variables",
															"pm.request.headers.upsert({ key: \"Authorization\", value: pm.environment.get(\"Auth\") });",
															"pm.request.headers.upsert({ key: \"x-app-key\", value: pm.environment.get(\"x-app-key\") });",
															"pm.request.headers.upsert({ key: \"x-client-id\", value: pm.environment.get(\"x-client-id\") });",
															"",
															"// Generate a random UUID for sourcedId",
															"function generateUUID() {",
															"    let dt = new Date().getTime();",
															"    let uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {",
															"        let r = (dt + Math.random() * 16) % 16 | 0;",
															"        dt = Math.floor(dt / 16);",
															"        return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);",
															"    });",
															"    return uuid;",
															"}",
															"",
															"let courseSourcedId = generateUUID();",
															"let classSourcedId = generateUUID();",
															"let scoreScaleSourcedId = generateUUID();",
															"let categorySourcedId = generateUUID();",
															"let sourcedId = generateUUID();",
															"",
															"",
															"pm.environment.set(\"courseSourcedId\", courseSourcedId);",
															"pm.environment.set(\"classSourcedId\", classSourcedId);",
															"pm.environment.set(\"scoreScaleSourcedId\", scoreScaleSourcedId);",
															"pm.environment.set(\"categorySourcedId\", categorySourcedId);",
															"pm.environment.set(\"sourcedId\", sourcedId);",
															"",
															"",
															"// Set headers",
															"const headers = {",
															"    'Authorization': pm.environment.get(\"Auth\"),",
															"    'x-app-key': pm.environment.get(\"x-app-key\"),",
															"    'x-client-id': pm.environment.get(\"x-client-id\"),",
															"    'Content-Type': 'application/json'",
															"};",
															"",
															"",
															"// Generate current UTC timestamp in ISO format: 2025-01-29T06:51:57Z",
															"function getCurrentISOString() {",
															"    return new Date().toISOString().split('.')[0] + \"Z\";",
															"}",
															"",
															"// Set dynamic date variables",
															"let isoDateTime = getCurrentISOString(); // full timestamp",
															"let isoDateOnly = isoDateTime.split('T')[0]; // date only",
															"",
															"pm.environment.set(\"isoDateTime\", isoDateTime);",
															"pm.environment.set(\"isoDateOnly\", isoDateOnly);",
															"",
															"console.log(\"Generated ISO DateTime: \" + isoDateTime);",
															"console.log(\"Generated ISO Date Only: \" + isoDateOnly);",
															"",
															"// Define Course API URL",
															"let courseUrl = pm.environment.get(\"URL\") + pm.environment.get(\"customPathPrefix\")+\"/courses\";",
															"",
															"// Define getAllOrgs API URL",
															"let getAllOrgsUrl = pm.environment.get(\"URL\") + pm.environment.get(\"rosterPathPrefix\")+\"/orgs\";",
															"",
															"// Define getAllterms API URL",
															"let getAllTermsUrl = pm.environment.get(\"URL\") + pm.environment.get(\"rosterPathPrefix\")+\"/terms\";",
															"",
															"// Define Class API URL",
															"let classUrl = pm.environment.get(\"URL\") + pm.environment.get(\"customPathPrefix\")+\"/classes\";",
															"",
															"// Define ScoreScale API URL",
															"let scoreScaleUrl = pm.environment.get(\"URL\") + pm.environment.get(\"pathPrefix\")+\"/scoreScales/\"+ scoreScaleSourcedId;",
															"",
															"// Define Category API URL",
															"let categoryUrl = pm.environment.get(\"URL\") + pm.environment.get(\"pathPrefix\")+\"/categories/\"+ categorySourcedId;",
															"",
															"// Define putLineItem API URL",
															"let putLineItemUrl = pm.environment.get(\"URL\") + pm.environment.get(\"pathPrefix\")+\"/lineItems/\"+ sourcedId;",
															"",
															"// Define deleteClass API URL",
															"let deleteClassUrl = pm.environment.get(\"URL\") + pm.environment.get(\"customPathPrefix\")+\"/classes/\"+ classSourcedId ;",
															"",
															"",
															"// Define Course API Request Body",
															"let courseRequestBody = {",
															"    \"sourcedId\": pm.environment.get(\"courseSourcedId\"), //required",
															"    \"status\": \"active\", //required",
															"    \"title\": \"QA\", //required",
															"    \"courseCode\": \"courseCode\" //required",
															"}",
															"",
															"",
															"// Define Class API Request Body",
															"let classRequestBody = {",
															"    \"sourcedId\": pm.environment.get(\"classSourcedId\"), //Required",
															"    \"status\": \"active\", //Required",
															"    \"title\": \"title\", //Required",
															"    \"classType\": \"SCHEDULED\", //Required",
															"    \"course\": { //required",
															"        \"href\": \"/courses/\" + pm.environment.get(\"courseSourcedId\"),",
															"        \"sourcedId\": pm.environment.get(\"courseSourcedId\"),",
															"        \"type\": \"course\"",
															"                },",
															"    \"school\": { //required",
															"        \"href\": \"/org/\" + pm.environment.get(\"school_sourcedId\"),",
															"        \"sourcedId\": pm.environment.get(\"school_sourcedId\"),",
															"        \"type\": \"org\"",
															"                },",
															"    \"terms\": [ //required",
															"        {",
															"            \"href\": \"/academicSession/\" + pm.environment.get(\"term_sourcedId\"),",
															"            \"sourcedId\":pm.environment.get(\"term_sourcedId\"),",
															"             \"type\": \"academicSession\"",
															"        }",
															"    ]",
															"}",
															"",
															"",
															"// Define ScoreScale API Request Body",
															"let scoreScaleRequestBody = {",
															"    \"scoreScale\": {",
															"    \"sourcedId\":pm.environment.get(\"scoreScaleSourcedId\"), //required",
															"    \"status\": \"active\", //required",
															"    \"dateLastModified\": isoDateTime, //required",
															"    \"metadata\": {",
															"        \"test\": \"metadata\"",
															"                },",
															"    \"title\": \"QATestProd\", //required",
															"    \"type\": \"QATestProd\", //required",
															"    \"course\": {",
															"            \"href\": \"/course/\" + pm.environment.get(\"courseSourcedId\"),",
															"            \"sourcedId\": pm.environment.get(\"courseSourcedId\"),",
															"            \"type\": \"course\"",
															"        },",
															"    \"class\": {  //required",
															"            \"href\": \"/classes/\" + pm.environment.get(\"classSourcedId\"),",
															"            \"sourcedId\": pm.environment.get(\"classSourcedId\"),",
															"            \"type\": \"class\"",
															"        },",
															"    \"scoreScaleValue\": [ //required",
															"        {",
															"            \"itemValueLHS\": \"0-57\",",
															"            \"itemValueRHS\": \"F\"",
															"        },",
															"        {",
															"            \"itemValueLHS\": \"60-69\",",
															"            \"itemValueRHS\": \"D\"",
															"        }",
															"                        ]",
															"    }",
															"}",
															"",
															"",
															"// Define Category API Request Body",
															"let categoryRequestBody = {",
															"     \"category\": {",
															"        \"sourcedId\": pm.environment.get(\"categorySourcedId\"),",
															"        \"status\": \"active\",",
															"        \"dateLastModified\": isoDateTime,",
															"        \"metadata\": {},",
															"        \"title\": \"title\",",
															"        \"weight\": 3",
															"                }",
															"}",
															"",
															"",
															"// Define Category API Request Body",
															"let putLineItemRequestBody = {",
															"    \"lineItem\": {",
															"        \"sourcedId\": pm.environment.get(\"sourcedId\"), // required",
															"        \"status\": \"active\", // required",
															"        \"dateLastModified\": isoDateTime, // Correct UTC ISO8601 format // required",
															"        \"title\": \"MathTest\", // required",
															"        \"assignDate\": isoDateTime, // Correct UTC ISO8601 format // required",
															"        \"dueDate\": isoDateTime, // Correct UTC ISO8601 format // required",
															"        \"class\": { // required",
															"            \"href\": \"/classes/c6b2a92c-6efd-4d0d-989a-dddad7edc98d\",",
															"            \"sourcedId\": pm.environment.get(\"classSourcedId\"),",
															"            \"type\": \"class\"",
															"        },",
															"        \"school\": { // required",
															"            \"href\": \"/schools/91edfc73-d1ab-4168-93de-85a71d7f318d\",",
															"            \"sourcedId\": pm.environment.get(\"school_sourcedId\"),",
															"            \"type\": \"org\"",
															"        },",
															"        \"category\": { // required",
															"            \"href\": \"/category/5252bd60-6196-4063-9221-a9f27fe52c55\",",
															"            \"sourcedId\": pm.environment.get(\"categorySourcedId\"),",
															"            \"type\": \"category\"",
															"        }",
															"    }",
															"}",
															"",
															"// Make the Course POST request",
															"pm.sendRequest({",
															"    url: courseUrl,",
															"    method: 'POST',",
															"    header: headers,",
															"    body: {",
															"        mode: 'raw',",
															"        raw: JSON.stringify(courseRequestBody)",
															"    }",
															"}, function (err, res) {",
															"    if (err) {",
															"        console.error(\"POST Course API Error: \", err);",
															"        pm.environment.unset(\"courseSourcedId\"); // Clear sourcedId on failure",
															"        throw new Error(\"Course POST API request failed.\");",
															"    }",
															"",
															"    if (res.code !== 201) {  // Ensure status is 201 Created",
															"        console.error(\"Unexpected POST Course API Response Code: \" + res.code);",
															"        pm.environment.unset(\"courseSourcedId\"); // Clear sourcedId on failure",
															"        throw new Error(\"Course POST API did not return 201 Created.\");",
															"    }",
															"",
															"    console.log(\"Course POST API succeeded with status: \" + res.code);",
															"",
															"",
															" // Make getAllOrgs Request",
															"    pm.sendRequest({",
															"        url: getAllOrgsUrl,",
															"        method: 'GET',",
															"        header: headers",
															"    }, function (err, res) {",
															"        if (err || res.code !== 200) {",
															"            console.error(\"GET Orgs API Failed. Code:\", res?.code || \"No response\", \"Error:\", err);",
															"            throw new Error(\"GET Orgs API request failed.\");",
															"        }",
															"        console.log(\"GET Orgs API succeeded with status:\", res.code);",
															"        let response = res.json();",
															"        let schoolOrgs = response.orgs.filter(org => org.type === \"SCHOOL\");",
															"",
															"        if (schoolOrgs.length === 0) {",
															"            throw new Error(\"No orgs of type 'SCHOOL' found.\");",
															"        }",
															"",
															"        // Get a random school sourcedId",
															"        let randomIndex = Math.floor(Math.random() * schoolOrgs.length);",
															"        let schoolSourcedId = schoolOrgs[randomIndex].sourcedId;",
															"        console.log(\"Selected school sourcedId: \" + schoolSourcedId);",
															"        // Save to environment/collection variable for later use",
															"        pm.environment.set(\"school_sourcedId\", schoolSourcedId);",
															"",
															"",
															"     // Make getAllterms Request",
															"        pm.sendRequest({",
															"            url: getAllTermsUrl,",
															"            method: 'GET',",
															"            header: headers",
															"        }, function (err, res) {",
															"            if (err || res.code !== 200) {",
															"                console.error(\"GET TERMS API Failed. Code:\", res?.code || \"No response\", \"Error:\", err);",
															"                throw new Error(\"GET TERMS API request failed.\");",
															"            }",
															"",
															"            console.log(\"GET TERMS API succeeded with status:\", res.code);",
															"",
															"            let response = res.json();",
															"            let termSessions = response.academicSessions.filter(session => session.type === \"TERM\");",
															"",
															"            if (termSessions.length === 0) {",
															"                throw new Error(\"No academicSessions of type 'TERM' found.\");",
															"            }",
															"",
															"            // Select a random term sourcedId",
															"            let randomIndex = Math.floor(Math.random() * termSessions.length);",
															"            let termSourcedId = termSessions[randomIndex].sourcedId;",
															"",
															"            console.log(\"Selected TERM sourcedId: \" + termSourcedId);",
															"",
															"            // Save to environment/collection variable",
															"            pm.environment.set(\"term_sourcedId\", termSourcedId);",
															"",
															"            // Make the Class POST request",
															"            pm.sendRequest({",
															"                url: classUrl,",
															"                method: 'POST',",
															"                header: headers,",
															"                body: {",
															"                    mode: 'raw',",
															"                    raw: JSON.stringify(classRequestBody)",
															"                }",
															"            }, function (err, res) {",
															"                if (err) {",
															"                    console.error(\"POST Class API Error: \", err);",
															"                    pm.environment.unset(\"classSourcedId\"); // Clear sourcedId on failure",
															"                    throw new Error(\"Class POST API request failed.\");",
															"                }",
															"",
															"                if (res.code !== 201) {  // Ensure status is 201 Created",
															"                    console.error(\"Unexpected POST Class API Response Code: \" + res.code);",
															"                    pm.environment.unset(\"classSourcedId\"); // Clear sourcedId on failure",
															"                    throw new Error(\"POST Class API did not return 201 Created.\");",
															"                }",
															"",
															"                console.log(\"POST Class API succeeded with status: \" + res.code);",
															"",
															"",
															"                // Make the PUT ScoreScale request",
															"                pm.sendRequest({",
															"                    url: scoreScaleUrl,",
															"                    method: 'PUT',",
															"                    header: headers,",
															"                    body: {",
															"                        mode: 'raw',",
															"                        raw: JSON.stringify(scoreScaleRequestBody)",
															"                    }",
															"                }, function (err, res) {",
															"                    if (err) {",
															"                        console.error(\"PUT ScoreScale API Error: \", err);",
															"                        pm.environment.unset(\"scoreScaleSourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT ScoreScale API request failed.\");",
															"                    }",
															"",
															"                    if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
															"                        console.error(\"Unexpected PUT ScoreScale API Response Code: \" + res.code);",
															"                        pm.environment.unset(\"scoreScaleSourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT ScoreScale API did not return 200 or 201.\");",
															"                    }",
															"",
															"                    console.log(\"PUT ScoreScale API succeeded with status: \" + res.code);",
															"",
															"",
															"                    // Make the PUT Category request",
															"                pm.sendRequest({",
															"                    url: categoryUrl,",
															"                    method: 'PUT',",
															"                    header: headers,",
															"                    body: {",
															"                        mode: 'raw',",
															"                        raw: JSON.stringify(categoryRequestBody)",
															"                    }",
															"                }, function (err, res) {",
															"                    if (err) {",
															"                        console.error(\"PUT Category API Error: \", err);",
															"                        pm.environment.unset(\"categorySourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT Category API request failed.\");",
															"                    }",
															"",
															"                    if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
															"                        console.error(\"Unexpected PUT Category API Response Code: \" + res.code);",
															"                        pm.environment.unset(\"categorySourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT Category API did not return 200 or 201.\");",
															"                    }",
															"",
															"                    console.log(\"PUT Category API succeeded with status: \" + res.code);",
															"",
															"",
															"                    //Make DELETE Category API Request",
															"                        pm.sendRequest({",
															"                            url: categoryUrl,",
															"                            method: 'DELETE',",
															"                            header: headers",
															"                            }, function (err, res) {",
															"                            if (err || res.code !== 204) {",
															"                             console.error(\"DELETE Category API Failed. Code:\", res?.code || \"No response\", \"Error:\", err);",
															"                                throw new Error(\"DELETE Category API request failed.\");",
															"                            }",
															"                        });",
															"                    });",
															"                });",
															"            });",
															"        });",
															"    });",
															"});",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"lineItem\": {\n        \"sourcedId\": \"{{sourcedId}}\", // required\n        \"status\": \"active\", // required\n        \"dateLastModified\": \"{{isoDateTime}}\", // Correct UTC ISO8601 format // required\n        \"title\": \"Math\\nTest\", // required\n        \"assignDate\": \"{{isoDateTime}}\", // Correct UTC ISO8601 format // required\n        \"dueDate\": \"{{isoDateTime}}\", // Correct UTC ISO8601 format // required\n        \"class\": { // required\n            \"href\": \"/classes/c6b2a92c-6efd-4d0d-989a-dddad7edc98d\",\n            \"sourcedId\": \"{{classSourcedId}}\",\n            \"type\": \"class\"\n        },\n        \"school\": { // required\n            \"href\": \"/schools/91edfc73-d1ab-4168-93de-85a71d7f318d\",\n            \"sourcedId\": \"{{school_sourcedId}}\",\n            \"type\": \"org\"\n        },\n        \"category\": { // required\n            \"href\": \"/category/5252bd60-6196-4063-9221-a9f27fe52c55\",\n            \"sourcedId\": \"{{categorySourcedId}}\",\n            \"type\": \"category\"\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}{{endpoint}}/lineItems/{{sourcedId}}",
													"host": [
														"{{URL}}{{endpoint}}"
													],
													"path": [
														"lineItems",
														"{{sourcedId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "getLineItem",
									"item": [
										{
											"name": "Validate successful retrieval of LineItem",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Parse response JSON",
															"let response = pm.response.json();",
															"",
															"// 1. Validate the response status is success",
															"pm.test(\"Response should have success status\", function () {",
															"    pm.expect(response.imsx_codeMajor).to.eql(\"success\");",
															"});",
															"",
															"// 2. Validate the Status code",
															"pm.test(\"Validate Status Code, It should be 200 OK\", function () {",
															"    pm.expect([200]).to.include(pm.response.code, \"Unexpected status code\");",
															"});",
															"",
															"// Retrieve the stored sourcedId from the environment (set in PUT request)",
															"let sourcedId = pm.environment.get(\"sourcedId\");",
															"",
															"",
															"//3. SourcedId should match the request SourcedId",
															"pm.test(\"Response SourcedId should match with requested sourcedId\", function () {",
															"    pm.expect(response.lineItem.sourcedId).to.eql(sourcedId);",
															"});",
															"",
															"",
															"// 4. Validate Json Response Structure and Types",
															"pm.test(\"Validate JSON Response Structure and Types\", () => {",
															"    // Check for the top-level keys",
															"    pm.expect(response).to.have.keys(\"imsx_codeMajor\", \"imsx_severity\", \"lineItem\");",
															"",
															"    // Validate imsx_codeMajor and imsx_severity types and values",
															"    pm.expect(response.imsx_codeMajor).to.be.a(\"string\").to.eql(\"success\");",
															"    pm.expect(response.imsx_severity).to.be.a(\"string\").to.eql(\"status\");",
															"",
															"    // Validate lineItem structure",
															"    const lineItemResponse = response.lineItem;",
															"    pm.expect(lineItemResponse).to.be.an(\"object\").to.have.keys(",
															"        \"sourcedId\", \"status\", \"dateLastModified\", \"metadata\", \"title\",",
															"        \"description\", \"assignDate\", \"dueDate\", \"category\", \"resultValueMin\",",
															"        \"resultValueMax\", \"class\", \"school\", \"scoreScale\", \"gradingPeriod\",",
															"        \"academicSession\", \"learningObjectiveSet\"",
															"    );",
															"",
															"    // Validate lineItem field types",
															"    pm.expect(lineItemResponse.sourcedId).to.be.a(\"string\");",
															"    pm.expect(lineItemResponse.status).to.be.a(\"string\");",
															"    pm.expect(lineItemResponse.dateLastModified).to.be.a(\"string\");",
															"    pm.expect(lineItemResponse.metadata).to.be.an(\"object\");",
															"    pm.expect(lineItemResponse.title).to.be.a(\"string\");",
															"    pm.expect(lineItemResponse.description).to.be.a(\"string\");",
															"    pm.expect(lineItemResponse.assignDate).to.be.a(\"string\");",
															"    pm.expect(lineItemResponse.dueDate).to.be.a(\"string\");",
															"    pm.expect(lineItemResponse.category).to.be.an(\"object\").to.have.keys(\"href\", \"sourcedId\", \"type\");",
															"    pm.expect(lineItemResponse.resultValueMin).to.satisfy(value => value === null || typeof value === 'number');",
															"    pm.expect(lineItemResponse.resultValueMax).to.satisfy(value => value === null || typeof value === 'number');",
															"    pm.expect(lineItemResponse.class).to.be.an(\"object\").to.have.keys(\"href\", \"sourcedId\", \"type\");",
															"    pm.expect(lineItemResponse.school).to.be.an(\"object\").to.have.keys(\"href\", \"sourcedId\", \"type\");",
															"    pm.expect(lineItemResponse.scoreScale).to.be.an(\"object\").to.have.keys(\"href\", \"sourcedId\", \"type\");",
															"    pm.expect(lineItemResponse.gradingPeriod).to.be.a(\"null\");",
															"    pm.expect(lineItemResponse.academicSession).to.be.a(\"null\");",
															"    pm.expect(lineItemResponse.learningObjectiveSet).to.be.a(\"null\");",
															"",
															"    // Validate metadata structure",
															"    const metadataResponse = lineItemResponse.metadata;",
															"    pm.expect(metadataResponse).to.be.an(\"object\").to.have.key(\"extensions\");",
															"",
															"    // Validate metadata.extensions structure",
															"    const extensionsResponse = metadataResponse.extensions;",
															"    pm.expect(extensionsResponse).to.be.an(\"object\").to.have.keys(\"fields\", \"type\", \"adaptive\", \"storageName\", \"subject\", \"creator\", \"mediaType\", \"keywords\", \"datePublished\", \"dateToActivate\", \"dateToShow\", \"dateToStartOn\", \"maxAttempts\", \"maxSubmits\", \"version\", \"applicationId\", \"competencyId\");",
															"    pm.expect(extensionsResponse.fields).to.be.an(\"object\").to.have.keys(\"type\", \"adaptive\", \"storageName\", \"subject\", \"creator\", \"mediaType\", \"keywords\", \"datePublished\", \"dateToActivate\", \"dateToShow\", \"dateToStartOn\", \"maxAttempts\", \"maxSubmits\", \"version\", \"applicationId\", \"competencyId\");",
															"",
															"    // Validate metadata.extensions field types and values",
															"    pm.expect(extensionsResponse.type).to.be.a(\"string\").to.eql(\"DIGITAL_RESOURCE\");",
															"    pm.expect(extensionsResponse.adaptive).to.be.a(\"boolean\").to.eql(true);",
															"    pm.expect(extensionsResponse.storageName).to.be.a(\"string\").to.eql(\"example_storage_name\");",
															"    pm.expect(extensionsResponse.subject).to.be.a(\"string\").to.eql(\"Mathematics\");",
															"    pm.expect(extensionsResponse.creator).to.be.an(\"array\").to.have.lengthOf(1);",
															"    pm.expect(extensionsResponse.creator[0]).to.be.a(\"string\");",
															"    pm.expect(extensionsResponse.mediaType).to.be.a(\"string\").to.eql(\"application/pdf\");",
															"    pm.expect(extensionsResponse.keywords).to.be.an(\"array\").to.have.lengthOf(2);",
															"    pm.expect(extensionsResponse.keywords[0]).to.be.a(\"string\").to.eql(\"keyword1\");",
															"    pm.expect(extensionsResponse.keywords[1]).to.be.a(\"string\").to.eql(\"keyword2\");",
															"    pm.expect(extensionsResponse.datePublished).to.be.a(\"string\");",
															"    pm.expect(extensionsResponse.dateToActivate).to.be.a(\"string\");",
															"    pm.expect(extensionsResponse.dateToShow).to.be.a(\"string\");",
															"    pm.expect(extensionsResponse.dateToStartOn).to.be.a(\"string\");",
															"    pm.expect(extensionsResponse.maxAttempts).to.be.a(\"number\").to.eql(5);",
															"    pm.expect(extensionsResponse.maxSubmits).to.be.a(\"number\").to.eql(3);",
															"    pm.expect(extensionsResponse.version).to.be.a(\"string\").to.eql(\"1.0\");",
															"    pm.expect(extensionsResponse.applicationId).to.be.a(\"string\").to.eql(\"string\");",
															"    pm.expect(extensionsResponse.competencyId).to.be.a(\"null\");",
															"",
															"    // Validate metadata.extensions.fields field types and values",
															"    pm.expect(extensionsResponse.fields.type).to.be.a(\"string\").to.eql(\"DIGITAL_RESOURCE\");",
															"    pm.expect(extensionsResponse.fields.adaptive).to.be.a(\"null\");",
															"    pm.expect(extensionsResponse.fields.storageName).to.be.a(\"null\");",
															"    pm.expect(extensionsResponse.fields.subject).to.be.a(\"string\").to.eql(\"Mathematics\");",
															"    pm.expect(extensionsResponse.fields.creator).to.be.a(\"null\");",
															"    pm.expect(extensionsResponse.fields.mediaType).to.be.a(\"null\");",
															"    pm.expect(extensionsResponse.fields.keywords).to.be.a(\"null\");",
															"    pm.expect(extensionsResponse.fields.datePublished).to.be.a(\"null\");",
															"    pm.expect(extensionsResponse.fields.dateToActivate).to.be.a(\"null\");",
															"    pm.expect(extensionsResponse.fields.dateToShow).to.be.a(\"null\");",
															"    pm.expect(extensionsResponse.fields.dateToStartOn).to.be.a(\"null\");",
															"    pm.expect(extensionsResponse.fields.maxAttempts).to.be.a(\"null\");",
															"    pm.expect(extensionsResponse.fields.maxSubmits).to.be.a(\"null\");",
															"    pm.expect(extensionsResponse.fields.version).to.be.a(\"null\");",
															"    pm.expect(extensionsResponse.fields.applicationId).to.be.a(\"null\");",
															"    pm.expect(extensionsResponse.fields.competencyId).to.be.a(\"null\");",
															"",
															"    // Validate category, class, school, scoreScale structure",
															"    pm.expect(lineItemResponse.category).to.be.an(\"object\").to.have.keys(\"href\", \"sourcedId\", \"type\");",
															"    pm.expect(lineItemResponse.class).to.be.an(\"object\").to.have.keys(\"href\", \"sourcedId\", \"type\");",
															"    pm.expect(lineItemResponse.school).to.be.an(\"object\").to.have.keys(\"href\", \"sourcedId\", \"type\");",
															"    pm.expect(lineItemResponse.scoreScale).to.be.an(\"object\").to.have.keys(\"href\", \"sourcedId\", \"type\");",
															"",
															"    // Validate category, class, school, scoreScale field types and values (can add specific value checks if needed)",
															"    pm.expect(lineItemResponse.category.href).to.be.a(\"string\");",
															"    pm.expect(lineItemResponse.category.sourcedId).to.be.a(\"string\");",
															"    pm.expect(lineItemResponse.category.type).to.be.a(\"string\").to.eql(\"category\");",
															"",
															"    pm.expect(lineItemResponse.class.href).to.be.a(\"string\");",
															"    pm.expect(lineItemResponse.class.sourcedId).to.be.a(\"string\");",
															"    pm.expect(lineItemResponse.class.type).to.be.a(\"string\").to.eql(\"class\");",
															"",
															"    pm.expect(lineItemResponse.school.href).to.be.a(\"string\");",
															"    pm.expect(lineItemResponse.school.sourcedId).to.be.a(\"string\");",
															"    pm.expect(lineItemResponse.school.type).to.be.a(\"string\").to.eql(\"org\");",
															"",
															"    pm.expect(lineItemResponse.scoreScale.href).to.be.a(\"string\");",
															"    pm.expect(lineItemResponse.scoreScale.sourcedId).to.be.a(\"string\");",
															"    pm.expect(lineItemResponse.scoreScale.type).to.be.a(\"string\").to.eql(\"scoreScale\");",
															"});",
															"",
															"",
															"let expected = JSON.parse(pm.environment.get(\"putLineItemRequestBody\"));",
															"",
															"",
															"// 5. Validate status",
															"pm.test(\"Response Status should match with requested Status\", function () {",
															"    pm.expect(response.lineItem.status).to.eql(expected.lineItem.status);",
															"});",
															"",
															"// 6. Validate title",
															"pm.test(\"Response title should match with requested title\", function () {",
															"    pm.expect(response.lineItem.title).to.eql(expected.lineItem.title);",
															"});",
															"",
															"// 7. Validate description",
															"pm.test(\"Response description should match with requested description\", function () {",
															"    pm.expect(response.lineItem.description).to.eql(expected.lineItem.description);",
															"});",
															"",
															"// 8. Validate category",
															"pm.test(\"Response category should match with requested category\", function () {",
															"    pm.expect(response.lineItem.category.sourcedId).to.eql(expected.lineItem.category.sourcedId);",
															"    pm.expect(response.lineItem.category.type).to.eql(expected.lineItem.category.type);",
															"});",
															"",
															"// 9. Validate class",
															"pm.test(\"Response class should match with requested class\", function () {",
															"    pm.expect(response.lineItem.class.sourcedId).to.eql(expected.lineItem.class.sourcedId);",
															"    pm.expect(response.lineItem.class.type).to.eql(expected.lineItem.class.type);",
															"});",
															"",
															"// 10. Validate scoreScale",
															"pm.test(\"Response scoreScale should match with requested scoreScale\", function () {",
															"    pm.expect(response.lineItem.scoreScale.sourcedId).to.eql(expected.lineItem.scoreScale.sourcedId);",
															"    pm.expect(response.lineItem.scoreScale.type).to.eql(expected.lineItem.scoreScale.type);",
															"});",
															"",
															"",
															"// 11. Validate school",
															"pm.test(\"Response school should match with requested school\", function () {",
															"    pm.expect(response.lineItem.school.sourcedId).to.eql(expected.lineItem.school.sourcedId);",
															"    pm.expect(response.lineItem.school.type).to.eql(expected.lineItem.school.type);",
															"});",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Set headers dynamically from environment variables",
															"pm.request.headers.upsert({ key: \"Authorization\", value: pm.environment.get(\"Auth\") });",
															"pm.request.headers.upsert({ key: \"x-app-key\", value: pm.environment.get(\"x-app-key\") });",
															"pm.request.headers.upsert({ key: \"x-client-id\", value: pm.environment.get(\"x-client-id\") });",
															"",
															"// Cache environment variables",
															"const auth = pm.environment.get(\"Auth\");",
															"const appKey = pm.environment.get(\"x-app-key\");",
															"const clientId = pm.environment.get(\"x-client-id\");",
															"const baseURL = pm.environment.get(\"URL\");",
															"",
															"// Common headers",
															"const headers = {",
															"    Authorization: auth,",
															"    \"x-app-key\": appKey,",
															"    \"x-client-id\": clientId,",
															"    \"Content-Type\": \"application/json\"",
															"};",
															"",
															"// Generate a random UUID for sourcedId",
															"function generateUUID() {",
															"    let dt = new Date().getTime();",
															"    let uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {",
															"        let r = (dt + Math.random() * 16) % 16 | 0;",
															"        dt = Math.floor(dt / 16);",
															"        return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);",
															"    });",
															"    return uuid;",
															"}",
															"",
															"// Generate current UTC timestamp in ISO format: 2025-01-29T06:51:57Z",
															"function getCurrentISOString() {",
															"    return new Date().toISOString().split('.')[0] + \"Z\";",
															"}",
															"",
															"// Generate dynamic variables",
															"let courseSourcedId = generateUUID();",
															"let classSourcedId = generateUUID();",
															"let scoreScaleSourcedId = generateUUID();",
															"let categorySourcedId = generateUUID();",
															"let sourcedId = generateUUID();",
															"let isoDateTime = getCurrentISOString(); // full timestamp",
															"let isoDateOnly = isoDateTime.split('T')[0]; // date only",
															"",
															"// Set dynamic variables",
															"pm.environment.set(\"courseSourcedId\", courseSourcedId);",
															"pm.environment.set(\"classSourcedId\", classSourcedId);",
															"pm.environment.set(\"scoreScaleSourcedId\", scoreScaleSourcedId);",
															"pm.environment.set(\"categorySourcedId\", categorySourcedId);",
															"pm.environment.set(\"sourcedId\", sourcedId);",
															"pm.environment.set(\"isoDateTime\", isoDateTime);",
															"pm.environment.set(\"isoDateOnly\", isoDateOnly);",
															"",
															"console.log(\"Generated ISO DateTime: \" + isoDateTime);",
															"console.log(\"Generated ISO Date Only: \" + isoDateOnly);",
															"",
															"// API URLs",
															"const courseUrl = `${baseURL}${pm.environment.get(\"customPathPrefix\")}/courses`;",
															"const getAllOrgsUrl = `${baseURL}${pm.environment.get(\"rosterPathPrefix\")}/orgs`;",
															"const getAllTermsUrl = `${baseURL}${pm.environment.get(\"rosterPathPrefix\")}/terms`;",
															"const classUrl = `${baseURL}${pm.environment.get(\"customPathPrefix\")}/classes`;",
															"const scoreScaleUrl = `${baseURL}${pm.environment.get(\"pathPrefix\")}/scoreScales/${scoreScaleSourcedId}`;",
															"const categoryUrl = `${baseURL}${pm.environment.get(\"pathPrefix\")}/categories/${categorySourcedId}`;",
															"const putLineItemUrl = `${baseURL}${pm.environment.get(\"pathPrefix\")}/lineItems/${sourcedId}`;",
															"",
															"",
															"",
															"// Define Course API Request Body",
															"let courseRequestBody = {",
															"    \"sourcedId\": pm.environment.get(\"courseSourcedId\"), //required",
															"    \"status\": \"active\", //required",
															"    \"title\": \"QA\", //required",
															"    \"courseCode\": \"courseCode\" //required",
															"}",
															"",
															"",
															"// Define Class API Request Body",
															"let classRequestBody = {",
															"    \"sourcedId\": pm.environment.get(\"classSourcedId\"), //Required",
															"    \"status\": \"active\", //Required",
															"    \"title\": \"title\", //Required",
															"    \"classType\": \"SCHEDULED\", //Required",
															"    \"course\": { //required",
															"        \"href\": \"/courses/\" + pm.environment.get(\"courseSourcedId\"),",
															"        \"sourcedId\": pm.environment.get(\"courseSourcedId\"),",
															"        \"type\": \"course\"",
															"                },",
															"    \"school\": { //required",
															"        \"href\": \"/org/\" + pm.environment.get(\"school_sourcedId\"),",
															"        \"sourcedId\": pm.environment.get(\"school_sourcedId\"),",
															"        \"type\": \"org\"",
															"                },",
															"    \"terms\": [ //required",
															"        {",
															"            \"href\": \"/academicSession/\" + pm.environment.get(\"term_sourcedId\"),",
															"            \"sourcedId\":pm.environment.get(\"term_sourcedId\"),",
															"             \"type\": \"academicSession\"",
															"        }",
															"    ]",
															"}",
															"",
															"",
															"// Define ScoreScale API Request Body",
															"let scoreScaleRequestBody = {",
															"    \"scoreScale\": {",
															"    \"sourcedId\":pm.environment.get(\"scoreScaleSourcedId\"), //required",
															"    \"status\": \"active\", //required",
															"    \"dateLastModified\": isoDateTime, //required",
															"    \"metadata\": {",
															"        \"test\": \"metadata\"",
															"                },",
															"    \"title\": \"QATestProd\", //required",
															"    \"type\": \"QATestProd\", //required",
															"    \"course\": {",
															"            \"href\": \"/course/\" + pm.environment.get(\"courseSourcedId\"),",
															"            \"sourcedId\": pm.environment.get(\"courseSourcedId\"),",
															"            \"type\": \"course\"",
															"        },",
															"    \"class\": {  //required",
															"            \"href\": \"/classes/\" + pm.environment.get(\"classSourcedId\"),",
															"            \"sourcedId\": pm.environment.get(\"classSourcedId\"),",
															"            \"type\": \"class\"",
															"        },",
															"    \"scoreScaleValue\": [ //required",
															"        {",
															"            \"itemValueLHS\": \"0-57\",",
															"            \"itemValueRHS\": \"F\"",
															"        },",
															"        {",
															"            \"itemValueLHS\": \"60-69\",",
															"            \"itemValueRHS\": \"D\"",
															"        }",
															"                        ]",
															"    }",
															"}",
															"",
															"",
															"// Define Category API Request Body",
															"let categoryRequestBody = {",
															"     \"category\": {",
															"        \"sourcedId\": pm.environment.get(\"categorySourcedId\"),",
															"        \"status\": \"active\",",
															"        \"dateLastModified\": isoDateTime,",
															"        \"metadata\": {},",
															"        \"title\": \"title\",",
															"        \"weight\": 3",
															"                }",
															"}",
															"",
															"",
															"// Define putLineItem API Request Body",
															"let putLineItemRequestBody = {",
															"    \"lineItem\": {",
															"        \"sourcedId\": pm.environment.get(\"sourcedId\"),",
															"        \"status\": \"active\",",
															"        \"dateLastModified\": isoDateTime, // Correct UTC ISO8601 format",
															"        \"metadata\": {",
															"            \"extensions\": {",
															"                \"type\": \"DIGITAL_RESOURCE\",",
															"                \"adaptive\": true,",
															"                \"storageName\": \"example_storage_name\",",
															"                \"subject\": \"Mathematics\",",
															"                \"creator\": [",
															"                    \"0bb114e1-6f8a-4d81-8d27-1e641fdeddf7\"",
															"                ],",
															"                \"mediaType\": \"application/pdf\",",
															"                \"keywords\": [",
															"                    \"keyword1\",",
															"                    \"keyword2\"",
															"                ],",
															"                \"datePublished\": isoDateTime, // Correct UTC ISO8601 format",
															"                \"dateToActivate\": isoDateTime, // Correct UTC ISO8601 format",
															"                \"dateToShow\": isoDateTime, // Correct UTC ISO8601 format",
															"                \"dateToStartOn\": isoDateTime, // Correct UTC ISO8601 format",
															"                \"maxAttempts\": 5,",
															"                \"maxSubmits\": 3,",
															"                \"version\": \"1.0\",",
															"                \"applicationId\": \"string\",",
															"                \"competencyId\": null",
															"            }",
															"        },",
															"        \"title\": \"title\",",
															"        \"description\": \"A foundational resource for understanding algebra.\",",
															"        \"assignDate\": isoDateTime, // Correct UTC ISO8601 format",
															"        \"dueDate\": isoDateTime, // Correct UTC ISO8601 format",
															"        \"class\": {",
															"            \"href\": \"/classes/c6b2a92c-6efd-4d0d-989a-dddad7edc98d\",",
															"            \"sourcedId\": pm.environment.get(\"classSourcedId\"),",
															"            \"type\": \"class\"",
															"        },",
															"        \"school\": {",
															"            \"href\": \"/schools/91edfc73-d1ab-4168-93de-85a71d7f318d\",",
															"            \"sourcedId\": pm.environment.get(\"school_sourcedId\"),",
															"            \"type\": \"org\"",
															"        },",
															"        \"scoreScale\": {",
															"            \"href\": \"/scoreScales/5252bd60-6196-4063-9221-a9f27fe52c55\",",
															"            \"sourcedId\": pm.environment.get(\"scoreScaleSourcedId\"),",
															"            \"type\": \"scoreScale\"",
															"        },",
															"        \"category\": {",
															"            \"href\": \"/category/5252bd60-6196-4063-9221-a9f27fe52c55\",",
															"            \"sourcedId\": pm.environment.get(\"categorySourcedId\"),",
															"            \"type\": \"category\"",
															"        },",
															"        \"resultValueMin\": 0,",
															"        \"resultValueMax\": 100,",
															"        \"academicSession\": null",
															"    }",
															"}",
															"",
															"",
															"// Make the Course POST request",
															"pm.sendRequest({",
															"    url: courseUrl,",
															"    method: 'POST',",
															"    header: headers,",
															"    body: {",
															"        mode: 'raw',",
															"        raw: JSON.stringify(courseRequestBody)",
															"    }",
															"}, function (err, res) {",
															"    if (err) {",
															"        console.error(\"POST Course API Error: \", err);",
															"        pm.environment.unset(\"courseSourcedId\"); // Clear sourcedId on failure",
															"        throw new Error(\"Course POST API request failed.\");",
															"    }",
															"",
															"    if (res.code !== 201) {  // Ensure status is 201 Created",
															"        console.error(\"Unexpected POST Course API Response Code: \" + res.code);",
															"        pm.environment.unset(\"courseSourcedId\"); // Clear sourcedId on failure",
															"        throw new Error(\"Course POST API did not return 201 Created.\");",
															"    }",
															"",
															"    console.log(\"Course POST API succeeded with status: \" + res.code);",
															"",
															"",
															" // Make getAllOrgs Request",
															"    pm.sendRequest({",
															"        url: getAllOrgsUrl,",
															"        method: 'GET',",
															"        header: headers",
															"    }, function (err, res) {",
															"        if (err || res.code !== 200) {",
															"            console.error(\"GET Orgs API Failed. Code:\", res?.code || \"No response\", \"Error:\", err);",
															"            throw new Error(\"GET Orgs API request failed.\");",
															"        }",
															"        console.log(\"GET Orgs API succeeded with status:\", res.code);",
															"        let response = res.json();",
															"        let schoolOrgs = response.orgs.filter(org => org.type === \"SCHOOL\");",
															"",
															"        if (schoolOrgs.length === 0) {",
															"            throw new Error(\"No orgs of type 'SCHOOL' found.\");",
															"        }",
															"",
															"        // Get a random school sourcedId",
															"        let randomIndex = Math.floor(Math.random() * schoolOrgs.length);",
															"        let schoolSourcedId = schoolOrgs[randomIndex].sourcedId;",
															"        console.log(\"Selected school sourcedId: \" + schoolSourcedId);",
															"        // Save to environment/collection variable for later use",
															"        pm.environment.set(\"school_sourcedId\", schoolSourcedId);",
															"",
															"",
															"     // Make getAllterms Request",
															"        pm.sendRequest({",
															"            url: getAllTermsUrl,",
															"            method: 'GET',",
															"            header: headers",
															"        }, function (err, res) {",
															"            if (err || res.code !== 200) {",
															"                console.error(\"GET TERMS API Failed. Code:\", res?.code || \"No response\", \"Error:\", err);",
															"                throw new Error(\"GET TERMS API request failed.\");",
															"            }",
															"",
															"            console.log(\"GET TERMS API succeeded with status:\", res.code);",
															"",
															"            let response = res.json();",
															"            let termSessions = response.academicSessions.filter(session => session.type === \"TERM\");",
															"",
															"            if (termSessions.length === 0) {",
															"                throw new Error(\"No academicSessions of type 'TERM' found.\");",
															"            }",
															"",
															"            // Select a random term sourcedId",
															"            let randomIndex = Math.floor(Math.random() * termSessions.length);",
															"            let termSourcedId = termSessions[randomIndex].sourcedId;",
															"",
															"            console.log(\"Selected TERM sourcedId: \" + termSourcedId);",
															"",
															"            // Save to environment/collection variable",
															"            pm.environment.set(\"term_sourcedId\", termSourcedId);",
															"",
															"            // Make the Class POST request",
															"            pm.sendRequest({",
															"                url: classUrl,",
															"                method: 'POST',",
															"                header: headers,",
															"                body: {",
															"                    mode: 'raw',",
															"                    raw: JSON.stringify(classRequestBody)",
															"                }",
															"            }, function (err, res) {",
															"                if (err) {",
															"                    console.error(\"POST Class API Error: \", err);",
															"                    pm.environment.unset(\"classSourcedId\"); // Clear sourcedId on failure",
															"                    throw new Error(\"Class POST API request failed.\");",
															"                }",
															"",
															"                if (res.code !== 201) {  // Ensure status is 201 Created",
															"                    console.error(\"Unexpected POST Class API Response Code: \" + res.code);",
															"                    pm.environment.unset(\"classSourcedId\"); // Clear sourcedId on failure",
															"                    throw new Error(\"POST Class API did not return 201 Created.\");",
															"                }",
															"",
															"                console.log(\"POST Class API succeeded with status: \" + res.code);",
															"",
															"",
															"                // Make the PUT ScoreScale request",
															"                pm.sendRequest({",
															"                    url: scoreScaleUrl,",
															"                    method: 'PUT',",
															"                    header: headers,",
															"                    body: {",
															"                        mode: 'raw',",
															"                        raw: JSON.stringify(scoreScaleRequestBody)",
															"                    }",
															"                }, function (err, res) {",
															"                    if (err) {",
															"                        console.error(\"PUT ScoreScale API Error: \", err);",
															"                        pm.environment.unset(\"scoreScaleSourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT ScoreScale API request failed.\");",
															"                    }",
															"",
															"                    if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
															"                        console.error(\"Unexpected PUT ScoreScale API Response Code: \" + res.code);",
															"                        pm.environment.unset(\"scoreScaleSourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT ScoreScale API did not return 200 or 201.\");",
															"                    }",
															"",
															"                    console.log(\"PUT ScoreScale API succeeded with status: \" + res.code);",
															"",
															"",
															"                    // Make the PUT Category request",
															"                pm.sendRequest({",
															"                    url: categoryUrl,",
															"                    method: 'PUT',",
															"                    header: headers,",
															"                    body: {",
															"                        mode: 'raw',",
															"                        raw: JSON.stringify(categoryRequestBody)",
															"                    }",
															"                }, function (err, res) {",
															"                    if (err) {",
															"                        console.error(\"PUT Category API Error: \", err);",
															"                        pm.environment.unset(\"categorySourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT Category API request failed.\");",
															"                    }",
															"",
															"                    if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
															"                        console.error(\"Unexpected PUT Category API Response Code: \" + res.code);",
															"                        pm.environment.unset(\"categorySourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT Category API did not return 200 or 201.\");",
															"                    }",
															"",
															"                    console.log(\"PUT Category API succeeded with status: \" + res.code);",
															"",
															"",
															"                    // Make the putLineItem request",
															"                pm.sendRequest({",
															"                    url: putLineItemUrl,",
															"                    method: 'PUT',",
															"                    header: headers,",
															"                    body: {",
															"                        mode: 'raw',",
															"                        raw: JSON.stringify(putLineItemRequestBody)",
															"                    }",
															"                }, function (err, res) {",
															"                    if (err) {",
															"                        console.error(\"putLineItem API Error: \", err);",
															"                        pm.environment.unset(\"sourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"putLineItem API request failed.\");",
															"                    }",
															"",
															"                    if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
															"                        console.error(\"Unexpected putLineItem API Response Code: \" + res.code);",
															"                        pm.environment.unset(\"sourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"putLineItem API did not return 200 or 201.\");",
															"                    }",
															"                    console.log(\"putLineItem API succeeded with status: \" + res.code);",
															"                        });                       ",
															"                    });",
															"                });               ",
															"            });",
															"        });",
															"    });",
															"});",
															"pm.environment.set(\"putLineItemRequestBody\", JSON.stringify(putLineItemRequestBody)); ",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}{{endpoint}}/lineItems/{{sourcedId}}",
													"host": [
														"{{URL}}{{endpoint}}"
													],
													"path": [
														"lineItems",
														"{{sourcedId}}"
													],
													"query": [
														{
															"key": "fields",
															"value": "category",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Validate successful retrieval of LineItem is deleted",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Parse response JSON",
															"let response = pm.response.json();",
															"",
															"// 1. Validate the response status is success",
															"pm.test(\"Response should have success status\", function () {",
															"    pm.expect(response.imsx_codeMajor).to.eql(\"success\");",
															"});",
															"",
															"// 2. Validate the Status code",
															"pm.test(\"Validate Status Code, It should be 200 OK\", function () {",
															"    pm.expect([200]).to.include(pm.response.code, \"Unexpected status code\");",
															"});",
															"",
															"// Retrieve the stored sourcedId from the environment (set in PUT request)",
															"let sourcedId = pm.environment.get(\"sourcedId\");",
															"",
															"",
															"//3. SourcedId should match the request SourcedId",
															"pm.test(\"Response SourcedId should match with requested sourcedId\", function () {",
															"    pm.expect(response.lineItem.sourcedId).to.eql(sourcedId);",
															"});",
															"",
															"",
															"// 4. Validate Json Response Structure and Types",
															"pm.test(\"Validate JSON Response Structure and Types\", () => {",
															"    // Check for the top-level keys",
															"    pm.expect(response).to.have.keys(\"imsx_codeMajor\", \"imsx_severity\", \"lineItem\");",
															"",
															"    // Validate imsx_codeMajor and imsx_severity types and values",
															"    pm.expect(response.imsx_codeMajor).to.be.a(\"string\").to.eql(\"success\");",
															"    pm.expect(response.imsx_severity).to.be.a(\"string\").to.eql(\"status\");",
															"",
															"    // Validate lineItem structure",
															"    const lineItemResponse = response.lineItem;",
															"    pm.expect(lineItemResponse).to.be.an(\"object\").to.have.keys(",
															"        \"sourcedId\", \"status\", \"dateLastModified\", \"metadata\", \"title\",",
															"        \"description\", \"assignDate\", \"dueDate\", \"category\", \"resultValueMin\",",
															"        \"resultValueMax\", \"class\", \"school\", \"scoreScale\", \"gradingPeriod\",",
															"        \"academicSession\", \"learningObjectiveSet\"",
															"    );",
															"",
															"    // Validate lineItem field types",
															"    pm.expect(lineItemResponse.sourcedId).to.be.a(\"string\");",
															"    pm.expect(lineItemResponse.status).to.be.a(\"string\");",
															"    pm.expect(lineItemResponse.dateLastModified).to.be.a(\"string\");",
															"    pm.expect(lineItemResponse.metadata).to.be.an(\"object\");",
															"    pm.expect(lineItemResponse.title).to.be.a(\"string\");",
															"    pm.expect(lineItemResponse.description).to.be.a(\"string\");",
															"    pm.expect(lineItemResponse.assignDate).to.be.a(\"string\");",
															"    pm.expect(lineItemResponse.dueDate).to.be.a(\"string\");",
															"    pm.expect(lineItemResponse.category).to.be.an(\"object\").to.have.keys(\"href\", \"sourcedId\", \"type\");",
															"    pm.expect(lineItemResponse.resultValueMin).to.satisfy(value => value === null || typeof value === 'number');",
															"    pm.expect(lineItemResponse.resultValueMax).to.satisfy(value => value === null || typeof value === 'number');",
															"    pm.expect(lineItemResponse.class).to.be.an(\"object\").to.have.keys(\"href\", \"sourcedId\", \"type\");",
															"    pm.expect(lineItemResponse.school).to.be.an(\"object\").to.have.keys(\"href\", \"sourcedId\", \"type\");",
															"    pm.expect(lineItemResponse.scoreScale).to.be.an(\"object\").to.have.keys(\"href\", \"sourcedId\", \"type\");",
															"    pm.expect(lineItemResponse.gradingPeriod).to.be.a(\"null\");",
															"    pm.expect(lineItemResponse.academicSession).to.be.a(\"null\");",
															"    pm.expect(lineItemResponse.learningObjectiveSet).to.be.a(\"null\");",
															"",
															"    // Validate metadata structure",
															"    const metadataResponse = lineItemResponse.metadata;",
															"    pm.expect(metadataResponse).to.be.an(\"object\").to.have.key(\"extensions\");",
															"",
															"    // Validate metadata.extensions structure",
															"    const extensionsResponse = metadataResponse.extensions;",
															"    pm.expect(extensionsResponse).to.be.an(\"object\").to.have.keys(\"fields\", \"type\", \"adaptive\", \"storageName\", \"subject\", \"creator\", \"mediaType\", \"keywords\", \"datePublished\", \"dateToActivate\", \"dateToShow\", \"dateToStartOn\", \"maxAttempts\", \"maxSubmits\", \"version\", \"applicationId\", \"competencyId\");",
															"    pm.expect(extensionsResponse.fields).to.be.an(\"object\").to.have.keys(\"type\", \"adaptive\", \"storageName\", \"subject\", \"creator\", \"mediaType\", \"keywords\", \"datePublished\", \"dateToActivate\", \"dateToShow\", \"dateToStartOn\", \"maxAttempts\", \"maxSubmits\", \"version\", \"applicationId\", \"competencyId\");",
															"",
															"    // Validate metadata.extensions field types and values",
															"    pm.expect(extensionsResponse.type).to.be.a(\"string\").to.eql(\"DIGITAL_RESOURCE\");",
															"    pm.expect(extensionsResponse.adaptive).to.be.a(\"boolean\").to.eql(true);",
															"    pm.expect(extensionsResponse.storageName).to.be.a(\"string\").to.eql(\"example_storage_name\");",
															"    pm.expect(extensionsResponse.subject).to.be.a(\"string\").to.eql(\"Mathematics\");",
															"    pm.expect(extensionsResponse.creator).to.be.an(\"array\").to.have.lengthOf(1);",
															"    pm.expect(extensionsResponse.creator[0]).to.be.a(\"string\");",
															"    pm.expect(extensionsResponse.mediaType).to.be.a(\"string\").to.eql(\"application/pdf\");",
															"    pm.expect(extensionsResponse.keywords).to.be.an(\"array\").to.have.lengthOf(2);",
															"    pm.expect(extensionsResponse.keywords[0]).to.be.a(\"string\").to.eql(\"keyword1\");",
															"    pm.expect(extensionsResponse.keywords[1]).to.be.a(\"string\").to.eql(\"keyword2\");",
															"    pm.expect(extensionsResponse.datePublished).to.be.a(\"string\");",
															"    pm.expect(extensionsResponse.dateToActivate).to.be.a(\"string\");",
															"    pm.expect(extensionsResponse.dateToShow).to.be.a(\"string\");",
															"    pm.expect(extensionsResponse.dateToStartOn).to.be.a(\"string\");",
															"    pm.expect(extensionsResponse.maxAttempts).to.be.a(\"number\").to.eql(5);",
															"    pm.expect(extensionsResponse.maxSubmits).to.be.a(\"number\").to.eql(3);",
															"    pm.expect(extensionsResponse.version).to.be.a(\"string\").to.eql(\"1.0\");",
															"    pm.expect(extensionsResponse.applicationId).to.be.a(\"string\").to.eql(\"string\");",
															"    pm.expect(extensionsResponse.competencyId).to.be.a(\"null\");",
															"",
															"    // Validate metadata.extensions.fields field types and values",
															"    pm.expect(extensionsResponse.fields.type).to.be.a(\"string\").to.eql(\"DIGITAL_RESOURCE\");",
															"    pm.expect(extensionsResponse.fields.adaptive).to.be.a(\"null\");",
															"    pm.expect(extensionsResponse.fields.storageName).to.be.a(\"null\");",
															"    pm.expect(extensionsResponse.fields.subject).to.be.a(\"string\").to.eql(\"Mathematics\");",
															"    pm.expect(extensionsResponse.fields.creator).to.be.a(\"null\");",
															"    pm.expect(extensionsResponse.fields.mediaType).to.be.a(\"null\");",
															"    pm.expect(extensionsResponse.fields.keywords).to.be.a(\"null\");",
															"    pm.expect(extensionsResponse.fields.datePublished).to.be.a(\"null\");",
															"    pm.expect(extensionsResponse.fields.dateToActivate).to.be.a(\"null\");",
															"    pm.expect(extensionsResponse.fields.dateToShow).to.be.a(\"null\");",
															"    pm.expect(extensionsResponse.fields.dateToStartOn).to.be.a(\"null\");",
															"    pm.expect(extensionsResponse.fields.maxAttempts).to.be.a(\"null\");",
															"    pm.expect(extensionsResponse.fields.maxSubmits).to.be.a(\"null\");",
															"    pm.expect(extensionsResponse.fields.version).to.be.a(\"null\");",
															"    pm.expect(extensionsResponse.fields.applicationId).to.be.a(\"null\");",
															"    pm.expect(extensionsResponse.fields.competencyId).to.be.a(\"null\");",
															"",
															"    // Validate category, class, school, scoreScale structure",
															"    pm.expect(lineItemResponse.category).to.be.an(\"object\").to.have.keys(\"href\", \"sourcedId\", \"type\");",
															"    pm.expect(lineItemResponse.class).to.be.an(\"object\").to.have.keys(\"href\", \"sourcedId\", \"type\");",
															"    pm.expect(lineItemResponse.school).to.be.an(\"object\").to.have.keys(\"href\", \"sourcedId\", \"type\");",
															"    pm.expect(lineItemResponse.scoreScale).to.be.an(\"object\").to.have.keys(\"href\", \"sourcedId\", \"type\");",
															"",
															"    // Validate category, class, school, scoreScale field types and values (can add specific value checks if needed)",
															"    pm.expect(lineItemResponse.category.href).to.be.a(\"string\");",
															"    pm.expect(lineItemResponse.category.sourcedId).to.be.a(\"string\");",
															"    pm.expect(lineItemResponse.category.type).to.be.a(\"string\").to.eql(\"category\");",
															"",
															"    pm.expect(lineItemResponse.class.href).to.be.a(\"string\");",
															"    pm.expect(lineItemResponse.class.sourcedId).to.be.a(\"string\");",
															"    pm.expect(lineItemResponse.class.type).to.be.a(\"string\").to.eql(\"class\");",
															"",
															"    pm.expect(lineItemResponse.school.href).to.be.a(\"string\");",
															"    pm.expect(lineItemResponse.school.sourcedId).to.be.a(\"string\");",
															"    pm.expect(lineItemResponse.school.type).to.be.a(\"string\").to.eql(\"org\");",
															"",
															"    pm.expect(lineItemResponse.scoreScale.href).to.be.a(\"string\");",
															"    pm.expect(lineItemResponse.scoreScale.sourcedId).to.be.a(\"string\");",
															"    pm.expect(lineItemResponse.scoreScale.type).to.be.a(\"string\").to.eql(\"scoreScale\");",
															"});",
															"",
															"",
															"let expected = JSON.parse(pm.environment.get(\"putLineItemRequestBody\"));",
															"",
															"",
															"// 5. Validate status",
															"pm.test(\"Response Status should match with requested Status\", function () {",
															"    pm.expect(response.lineItem.status).to.eql(\"tobedeleted\");",
															"});",
															"",
															"// 6. Validate title",
															"pm.test(\"Response title should match with requested title\", function () {",
															"    pm.expect(response.lineItem.title).to.eql(expected.lineItem.title);",
															"});",
															"",
															"// 7. Validate description",
															"pm.test(\"Response description should match with requested description\", function () {",
															"    pm.expect(response.lineItem.description).to.eql(expected.lineItem.description);",
															"});",
															"",
															"// 8. Validate category",
															"pm.test(\"Response category should match with requested category\", function () {",
															"    pm.expect(response.lineItem.category.sourcedId).to.eql(expected.lineItem.category.sourcedId);",
															"    pm.expect(response.lineItem.category.type).to.eql(expected.lineItem.category.type);",
															"});",
															"",
															"// 9. Validate class",
															"pm.test(\"Response class should match with requested class\", function () {",
															"    pm.expect(response.lineItem.class.sourcedId).to.eql(expected.lineItem.class.sourcedId);",
															"    pm.expect(response.lineItem.class.type).to.eql(expected.lineItem.class.type);",
															"});",
															"",
															"// 10. Validate scoreScale",
															"pm.test(\"Response scoreScale should match with requested scoreScale\", function () {",
															"    pm.expect(response.lineItem.scoreScale.sourcedId).to.eql(expected.lineItem.scoreScale.sourcedId);",
															"    pm.expect(response.lineItem.scoreScale.type).to.eql(expected.lineItem.scoreScale.type);",
															"});",
															"",
															"",
															"// 11. Validate school",
															"pm.test(\"Response school should match with requested school\", function () {",
															"    pm.expect(response.lineItem.school.sourcedId).to.eql(expected.lineItem.school.sourcedId);",
															"    pm.expect(response.lineItem.school.type).to.eql(expected.lineItem.school.type);",
															"});",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Set headers dynamically from environment variables",
															"pm.request.headers.upsert({ key: \"Authorization\", value: pm.environment.get(\"Auth\") });",
															"pm.request.headers.upsert({ key: \"x-app-key\", value: pm.environment.get(\"x-app-key\") });",
															"pm.request.headers.upsert({ key: \"x-client-id\", value: pm.environment.get(\"x-client-id\") });",
															"",
															"// Cache environment variables",
															"const auth = pm.environment.get(\"Auth\");",
															"const appKey = pm.environment.get(\"x-app-key\");",
															"const clientId = pm.environment.get(\"x-client-id\");",
															"const baseURL = pm.environment.get(\"URL\");",
															"",
															"// Common headers",
															"const headers = {",
															"    Authorization: auth,",
															"    \"x-app-key\": appKey,",
															"    \"x-client-id\": clientId,",
															"    \"Content-Type\": \"application/json\"",
															"};",
															"",
															"// Generate a random UUID for sourcedId",
															"function generateUUID() {",
															"    let dt = new Date().getTime();",
															"    let uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {",
															"        let r = (dt + Math.random() * 16) % 16 | 0;",
															"        dt = Math.floor(dt / 16);",
															"        return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);",
															"    });",
															"    return uuid;",
															"}",
															"",
															"// Generate current UTC timestamp in ISO format: 2025-01-29T06:51:57Z",
															"function getCurrentISOString() {",
															"    return new Date().toISOString().split('.')[0] + \"Z\";",
															"}",
															"",
															"// Generate dynamic variables",
															"let courseSourcedId = generateUUID();",
															"let classSourcedId = generateUUID();",
															"let scoreScaleSourcedId = generateUUID();",
															"let categorySourcedId = generateUUID();",
															"let sourcedId = generateUUID();",
															"let isoDateTime = getCurrentISOString(); // full timestamp",
															"let isoDateOnly = isoDateTime.split('T')[0]; // date only",
															"",
															"// Set dynamic variables",
															"pm.environment.set(\"courseSourcedId\", courseSourcedId);",
															"pm.environment.set(\"classSourcedId\", classSourcedId);",
															"pm.environment.set(\"scoreScaleSourcedId\", scoreScaleSourcedId);",
															"pm.environment.set(\"categorySourcedId\", categorySourcedId);",
															"pm.environment.set(\"sourcedId\", sourcedId);",
															"pm.environment.set(\"isoDateTime\", isoDateTime);",
															"pm.environment.set(\"isoDateOnly\", isoDateOnly);",
															"",
															"console.log(\"Generated ISO DateTime: \" + isoDateTime);",
															"console.log(\"Generated ISO Date Only: \" + isoDateOnly);",
															"",
															"// API URLs",
															"const courseUrl = `${baseURL}${pm.environment.get(\"customPathPrefix\")}/courses`;",
															"const getAllOrgsUrl = `${baseURL}${pm.environment.get(\"rosterPathPrefix\")}/orgs`;",
															"const getAllTermsUrl = `${baseURL}${pm.environment.get(\"rosterPathPrefix\")}/terms`;",
															"const classUrl = `${baseURL}${pm.environment.get(\"customPathPrefix\")}/classes`;",
															"const scoreScaleUrl = `${baseURL}${pm.environment.get(\"pathPrefix\")}/scoreScales/${scoreScaleSourcedId}`;",
															"const categoryUrl = `${baseURL}${pm.environment.get(\"pathPrefix\")}/categories/${categorySourcedId}`;",
															"const putLineItemUrl = `${baseURL}${pm.environment.get(\"pathPrefix\")}/lineItems/${sourcedId}`;",
															"",
															"",
															"",
															"// Define Course API Request Body",
															"let courseRequestBody = {",
															"    \"sourcedId\": pm.environment.get(\"courseSourcedId\"), //required",
															"    \"status\": \"active\", //required",
															"    \"title\": \"QA\", //required",
															"    \"courseCode\": \"courseCode\" //required",
															"}",
															"",
															"",
															"// Define Class API Request Body",
															"let classRequestBody = {",
															"    \"sourcedId\": pm.environment.get(\"classSourcedId\"), //Required",
															"    \"status\": \"active\", //Required",
															"    \"title\": \"title\", //Required",
															"    \"classType\": \"SCHEDULED\", //Required",
															"    \"course\": { //required",
															"        \"href\": \"/courses/\" + pm.environment.get(\"courseSourcedId\"),",
															"        \"sourcedId\": pm.environment.get(\"courseSourcedId\"),",
															"        \"type\": \"course\"",
															"                },",
															"    \"school\": { //required",
															"        \"href\": \"/org/\" + pm.environment.get(\"school_sourcedId\"),",
															"        \"sourcedId\": pm.environment.get(\"school_sourcedId\"),",
															"        \"type\": \"org\"",
															"                },",
															"    \"terms\": [ //required",
															"        {",
															"            \"href\": \"/academicSession/\" + pm.environment.get(\"term_sourcedId\"),",
															"            \"sourcedId\":pm.environment.get(\"term_sourcedId\"),",
															"             \"type\": \"academicSession\"",
															"        }",
															"    ]",
															"}",
															"",
															"",
															"// Define ScoreScale API Request Body",
															"let scoreScaleRequestBody = {",
															"    \"scoreScale\": {",
															"    \"sourcedId\":pm.environment.get(\"scoreScaleSourcedId\"), //required",
															"    \"status\": \"active\", //required",
															"    \"dateLastModified\": isoDateTime, //required",
															"    \"metadata\": {",
															"        \"test\": \"metadata\"",
															"                },",
															"    \"title\": \"QATestProd\", //required",
															"    \"type\": \"QATestProd\", //required",
															"    \"course\": {",
															"            \"href\": \"/course/\" + pm.environment.get(\"courseSourcedId\"),",
															"            \"sourcedId\": pm.environment.get(\"courseSourcedId\"),",
															"            \"type\": \"course\"",
															"        },",
															"    \"class\": {  //required",
															"            \"href\": \"/classes/\" + pm.environment.get(\"classSourcedId\"),",
															"            \"sourcedId\": pm.environment.get(\"classSourcedId\"),",
															"            \"type\": \"class\"",
															"        },",
															"    \"scoreScaleValue\": [ //required",
															"        {",
															"            \"itemValueLHS\": \"0-57\",",
															"            \"itemValueRHS\": \"F\"",
															"        },",
															"        {",
															"            \"itemValueLHS\": \"60-69\",",
															"            \"itemValueRHS\": \"D\"",
															"        }",
															"                        ]",
															"    }",
															"}",
															"",
															"",
															"// Define Category API Request Body",
															"let categoryRequestBody = {",
															"     \"category\": {",
															"        \"sourcedId\": pm.environment.get(\"categorySourcedId\"),",
															"        \"status\": \"active\",",
															"        \"dateLastModified\": isoDateTime,",
															"        \"metadata\": {},",
															"        \"title\": \"title\",",
															"        \"weight\": 3",
															"                }",
															"}",
															"",
															"",
															"// Define putLineItem API Request Body",
															"let putLineItemRequestBody = {",
															"    \"lineItem\": {",
															"        \"sourcedId\": pm.environment.get(\"sourcedId\"),",
															"        \"status\": \"active\",",
															"        \"dateLastModified\": isoDateTime, // Correct UTC ISO8601 format",
															"        \"metadata\": {",
															"            \"extensions\": {",
															"                \"type\": \"DIGITAL_RESOURCE\",",
															"                \"adaptive\": true,",
															"                \"storageName\": \"example_storage_name\",",
															"                \"subject\": \"Mathematics\",",
															"                \"creator\": [",
															"                    \"0bb114e1-6f8a-4d81-8d27-1e641fdeddf7\"",
															"                ],",
															"                \"mediaType\": \"application/pdf\",",
															"                \"keywords\": [",
															"                    \"keyword1\",",
															"                    \"keyword2\"",
															"                ],",
															"                \"datePublished\": isoDateTime, // Correct UTC ISO8601 format",
															"                \"dateToActivate\": isoDateTime, // Correct UTC ISO8601 format",
															"                \"dateToShow\": isoDateTime, // Correct UTC ISO8601 format",
															"                \"dateToStartOn\": isoDateTime, // Correct UTC ISO8601 format",
															"                \"maxAttempts\": 5,",
															"                \"maxSubmits\": 3,",
															"                \"version\": \"1.0\",",
															"                \"applicationId\": \"string\",",
															"                \"competencyId\": null",
															"            }",
															"        },",
															"        \"title\": \"title\",",
															"        \"description\": \"A foundational resource for understanding algebra.\",",
															"        \"assignDate\": isoDateTime, // Correct UTC ISO8601 format",
															"        \"dueDate\": isoDateTime, // Correct UTC ISO8601 format",
															"        \"class\": {",
															"            \"href\": \"/classes/c6b2a92c-6efd-4d0d-989a-dddad7edc98d\",",
															"            \"sourcedId\": pm.environment.get(\"classSourcedId\"),",
															"            \"type\": \"class\"",
															"        },",
															"        \"school\": {",
															"            \"href\": \"/schools/91edfc73-d1ab-4168-93de-85a71d7f318d\",",
															"            \"sourcedId\": pm.environment.get(\"school_sourcedId\"),",
															"            \"type\": \"org\"",
															"        },",
															"        \"scoreScale\": {",
															"            \"href\": \"/scoreScales/5252bd60-6196-4063-9221-a9f27fe52c55\",",
															"            \"sourcedId\": pm.environment.get(\"scoreScaleSourcedId\"),",
															"            \"type\": \"scoreScale\"",
															"        },",
															"        \"category\": {",
															"            \"href\": \"/category/5252bd60-6196-4063-9221-a9f27fe52c55\",",
															"            \"sourcedId\": pm.environment.get(\"categorySourcedId\"),",
															"            \"type\": \"category\"",
															"        },",
															"        \"resultValueMin\": 0,",
															"        \"resultValueMax\": 100,",
															"        \"academicSession\": null",
															"    }",
															"}",
															"",
															"",
															"// Make the Course POST request",
															"pm.sendRequest({",
															"    url: courseUrl,",
															"    method: 'POST',",
															"    header: headers,",
															"    body: {",
															"        mode: 'raw',",
															"        raw: JSON.stringify(courseRequestBody)",
															"    }",
															"}, function (err, res) {",
															"    if (err) {",
															"        console.error(\"POST Course API Error: \", err);",
															"        pm.environment.unset(\"courseSourcedId\"); // Clear sourcedId on failure",
															"        throw new Error(\"Course POST API request failed.\");",
															"    }",
															"",
															"    if (res.code !== 201) {  // Ensure status is 201 Created",
															"        console.error(\"Unexpected POST Course API Response Code: \" + res.code);",
															"        pm.environment.unset(\"courseSourcedId\"); // Clear sourcedId on failure",
															"        throw new Error(\"Course POST API did not return 201 Created.\");",
															"    }",
															"",
															"    console.log(\"Course POST API succeeded with status: \" + res.code);",
															"",
															"",
															" // Make getAllOrgs Request",
															"    pm.sendRequest({",
															"        url: getAllOrgsUrl,",
															"        method: 'GET',",
															"        header: headers",
															"    }, function (err, res) {",
															"        if (err || res.code !== 200) {",
															"            console.error(\"GET Orgs API Failed. Code:\", res?.code || \"No response\", \"Error:\", err);",
															"            throw new Error(\"GET Orgs API request failed.\");",
															"        }",
															"        console.log(\"GET Orgs API succeeded with status:\", res.code);",
															"        let response = res.json();",
															"        let schoolOrgs = response.orgs.filter(org => org.type === \"SCHOOL\");",
															"",
															"        if (schoolOrgs.length === 0) {",
															"            throw new Error(\"No orgs of type 'SCHOOL' found.\");",
															"        }",
															"",
															"        // Get a random school sourcedId",
															"        let randomIndex = Math.floor(Math.random() * schoolOrgs.length);",
															"        let schoolSourcedId = schoolOrgs[randomIndex].sourcedId;",
															"        console.log(\"Selected school sourcedId: \" + schoolSourcedId);",
															"        // Save to environment/collection variable for later use",
															"        pm.environment.set(\"school_sourcedId\", schoolSourcedId);",
															"",
															"",
															"     // Make getAllterms Request",
															"        pm.sendRequest({",
															"            url: getAllTermsUrl,",
															"            method: 'GET',",
															"            header: headers",
															"        }, function (err, res) {",
															"            if (err || res.code !== 200) {",
															"                console.error(\"GET TERMS API Failed. Code:\", res?.code || \"No response\", \"Error:\", err);",
															"                throw new Error(\"GET TERMS API request failed.\");",
															"            }",
															"",
															"            console.log(\"GET TERMS API succeeded with status:\", res.code);",
															"",
															"            let response = res.json();",
															"            let termSessions = response.academicSessions.filter(session => session.type === \"TERM\");",
															"",
															"            if (termSessions.length === 0) {",
															"                throw new Error(\"No academicSessions of type 'TERM' found.\");",
															"            }",
															"",
															"            // Select a random term sourcedId",
															"            let randomIndex = Math.floor(Math.random() * termSessions.length);",
															"            let termSourcedId = termSessions[randomIndex].sourcedId;",
															"",
															"            console.log(\"Selected TERM sourcedId: \" + termSourcedId);",
															"",
															"            // Save to environment/collection variable",
															"            pm.environment.set(\"term_sourcedId\", termSourcedId);",
															"",
															"            // Make the Class POST request",
															"            pm.sendRequest({",
															"                url: classUrl,",
															"                method: 'POST',",
															"                header: headers,",
															"                body: {",
															"                    mode: 'raw',",
															"                    raw: JSON.stringify(classRequestBody)",
															"                }",
															"            }, function (err, res) {",
															"                if (err) {",
															"                    console.error(\"POST Class API Error: \", err);",
															"                    pm.environment.unset(\"classSourcedId\"); // Clear sourcedId on failure",
															"                    throw new Error(\"Class POST API request failed.\");",
															"                }",
															"",
															"                if (res.code !== 201) {  // Ensure status is 201 Created",
															"                    console.error(\"Unexpected POST Class API Response Code: \" + res.code);",
															"                    pm.environment.unset(\"classSourcedId\"); // Clear sourcedId on failure",
															"                    throw new Error(\"POST Class API did not return 201 Created.\");",
															"                }",
															"",
															"                console.log(\"POST Class API succeeded with status: \" + res.code);",
															"",
															"",
															"                // Make the PUT ScoreScale request",
															"                pm.sendRequest({",
															"                    url: scoreScaleUrl,",
															"                    method: 'PUT',",
															"                    header: headers,",
															"                    body: {",
															"                        mode: 'raw',",
															"                        raw: JSON.stringify(scoreScaleRequestBody)",
															"                    }",
															"                }, function (err, res) {",
															"                    if (err) {",
															"                        console.error(\"PUT ScoreScale API Error: \", err);",
															"                        pm.environment.unset(\"scoreScaleSourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT ScoreScale API request failed.\");",
															"                    }",
															"",
															"                    if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
															"                        console.error(\"Unexpected PUT ScoreScale API Response Code: \" + res.code);",
															"                        pm.environment.unset(\"scoreScaleSourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT ScoreScale API did not return 200 or 201.\");",
															"                    }",
															"",
															"                    console.log(\"PUT ScoreScale API succeeded with status: \" + res.code);",
															"",
															"",
															"                    // Make the PUT Category request",
															"                pm.sendRequest({",
															"                    url: categoryUrl,",
															"                    method: 'PUT',",
															"                    header: headers,",
															"                    body: {",
															"                        mode: 'raw',",
															"                        raw: JSON.stringify(categoryRequestBody)",
															"                    }",
															"                }, function (err, res) {",
															"                    if (err) {",
															"                        console.error(\"PUT Category API Error: \", err);",
															"                        pm.environment.unset(\"categorySourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT Category API request failed.\");",
															"                    }",
															"",
															"                    if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
															"                        console.error(\"Unexpected PUT Category API Response Code: \" + res.code);",
															"                        pm.environment.unset(\"categorySourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT Category API did not return 200 or 201.\");",
															"                    }",
															"",
															"                    console.log(\"PUT Category API succeeded with status: \" + res.code);",
															"",
															"",
															"                    // Make the putLineItem request",
															"                pm.sendRequest({",
															"                    url: putLineItemUrl,",
															"                    method: 'PUT',",
															"                    header: headers,",
															"                    body: {",
															"                        mode: 'raw',",
															"                        raw: JSON.stringify(putLineItemRequestBody)",
															"                    }",
															"                }, function (err, res) {",
															"                    if (err) {",
															"                        console.error(\"putLineItem API Error: \", err);",
															"                        pm.environment.unset(\"sourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"putLineItem API request failed.\");",
															"                    }",
															"",
															"                    if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
															"                        console.error(\"Unexpected putLineItem API Response Code: \" + res.code);",
															"                        pm.environment.unset(\"sourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"putLineItem API did not return 200 or 201.\");",
															"                    }",
															"                    console.log(\"putLineItem API succeeded with status: \" + res.code);",
															"",
															"",
															"                         //Make DELETE LineItem API Request",
															"                        pm.sendRequest({",
															"                            url: putLineItemUrl,",
															"                            method: 'DELETE',",
															"                            header: headers",
															"                            }, function (err, res) {",
															"                            if (err || res.code !== 204) {",
															"                             console.error(\"DELETE LineItem API Failed. Code:\", res?.code || \"No response\", \"Error:\", err);",
															"                                throw new Error(\"DELETE LineItem API request failed.\");",
															"                            }",
															"                            });",
															"                        });                       ",
															"                    });",
															"                });               ",
															"            });",
															"        });",
															"    });",
															"});",
															"pm.environment.set(\"putLineItemRequestBody\", JSON.stringify(putLineItemRequestBody)); ",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}{{endpoint}}/lineItems/{{sourcedId}}",
													"host": [
														"{{URL}}{{endpoint}}"
													],
													"path": [
														"lineItems",
														"{{sourcedId}}"
													],
													"query": [
														{
															"key": "fields",
															"value": "category",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Validate API limit the response only for specified field",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Parse response JSON",
															"let response = pm.response.json();",
															"",
															"// 1. Validate the response status is success",
															"pm.test(\"Response should have success status\", function () {",
															"    pm.expect(response.imsx_codeMajor).to.eql(\"success\");",
															"});",
															"",
															"// 2. Validate the Status code",
															"pm.test(\"Validate Status Code, It should be 200 OK\", function () {",
															"    pm.expect([200]).to.include(pm.response.code, \"Unexpected status code\");",
															"});",
															"",
															"",
															"// 3. Validate response fields match the query fields",
															"pm.test(\"Validate response fields match the query fields\", function () {",
															"    console.log(\"Full response body:\", response);",
															"",
															"    const selectedFields = pm.environment.get(\"randomFields\").split(\",\");",
															"    console.log(\"Selected fields from query param:\", selectedFields);",
															"",
															"    const result = response.lineItem;",
															"    if (!result) {",
															"        throw new Error(\"Missing 'lineItem' in response\");",
															"    }",
															"",
															"    const responseFields = Object.keys(result);",
															"    console.log(\"Top-level fields in response.lineItem:\", responseFields);",
															"",
															"    // Ensure each selected field exists in the response",
															"    selectedFields.forEach(field => {",
															"        pm.expect(result, `'${field}' is missing in response`).to.have.property(field);",
															"    });",
															"",
															"    // Optional strict check: Fail if there are extra fields",
															"    const extraFields = responseFields.filter(f => !selectedFields.includes(f));",
															"    if (extraFields.length > 0) {",
															"        console.warn(\"Extra fields in response:\", extraFields);",
															"    }",
															"",
															"    pm.expect(extraFields.length, \"Unexpected fields in response\").to.eql(0);",
															"});",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Set headers dynamically from environment variables",
															"pm.request.headers.upsert({ key: \"Authorization\", value: pm.environment.get(\"Auth\") });",
															"pm.request.headers.upsert({ key: \"x-app-key\", value: pm.environment.get(\"x-app-key\") });",
															"pm.request.headers.upsert({ key: \"x-client-id\", value: pm.environment.get(\"x-client-id\") });",
															"",
															"// Cache environment variables",
															"const auth = pm.environment.get(\"Auth\");",
															"const appKey = pm.environment.get(\"x-app-key\");",
															"const clientId = pm.environment.get(\"x-client-id\");",
															"const baseURL = pm.environment.get(\"URL\");",
															"",
															"// Common headers",
															"const headers = {",
															"    Authorization: auth,",
															"    \"x-app-key\": appKey,",
															"    \"x-client-id\": clientId,",
															"    \"Content-Type\": \"application/json\"",
															"};",
															"",
															"// Generate a random UUID for sourcedId",
															"function generateUUID() {",
															"    let dt = new Date().getTime();",
															"    let uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {",
															"        let r = (dt + Math.random() * 16) % 16 | 0;",
															"        dt = Math.floor(dt / 16);",
															"        return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);",
															"    });",
															"    return uuid;",
															"}",
															"",
															"// Generate current UTC timestamp in ISO format: 2025-01-29T06:51:57Z",
															"function getCurrentISOString() {",
															"    return new Date().toISOString().split('.')[0] + \"Z\";",
															"}",
															"",
															"// Generate dynamic variables",
															"let courseSourcedId = generateUUID();",
															"let classSourcedId = generateUUID();",
															"let scoreScaleSourcedId = generateUUID();",
															"let categorySourcedId = generateUUID();",
															"let sourcedId = generateUUID();",
															"let isoDateTime = getCurrentISOString(); // full timestamp",
															"let isoDateOnly = isoDateTime.split('T')[0]; // date only",
															"",
															"// Set dynamic variables",
															"pm.environment.set(\"courseSourcedId\", courseSourcedId);",
															"pm.environment.set(\"classSourcedId\", classSourcedId);",
															"pm.environment.set(\"scoreScaleSourcedId\", scoreScaleSourcedId);",
															"pm.environment.set(\"categorySourcedId\", categorySourcedId);",
															"pm.environment.set(\"sourcedId\", sourcedId);",
															"pm.environment.set(\"isoDateTime\", isoDateTime);",
															"pm.environment.set(\"isoDateOnly\", isoDateOnly);",
															"",
															"console.log(\"Generated ISO DateTime: \" + isoDateTime);",
															"console.log(\"Generated ISO Date Only: \" + isoDateOnly);",
															"",
															"// API URLs",
															"const courseUrl = `${baseURL}${pm.environment.get(\"customPathPrefix\")}/courses`;",
															"const getAllOrgsUrl = `${baseURL}${pm.environment.get(\"rosterPathPrefix\")}/orgs`;",
															"const getAllTermsUrl = `${baseURL}${pm.environment.get(\"rosterPathPrefix\")}/terms`;",
															"const classUrl = `${baseURL}${pm.environment.get(\"customPathPrefix\")}/classes`;",
															"const scoreScaleUrl = `${baseURL}${pm.environment.get(\"pathPrefix\")}/scoreScales/${scoreScaleSourcedId}`;",
															"const categoryUrl = `${baseURL}${pm.environment.get(\"pathPrefix\")}/categories/${categorySourcedId}`;",
															"const putLineItemUrl = `${baseURL}${pm.environment.get(\"pathPrefix\")}/lineItems/${sourcedId}`;",
															"",
															"",
															"",
															"// Define Course API Request Body",
															"let courseRequestBody = {",
															"    \"sourcedId\": pm.environment.get(\"courseSourcedId\"), //required",
															"    \"status\": \"active\", //required",
															"    \"title\": \"QA\", //required",
															"    \"courseCode\": \"courseCode\" //required",
															"}",
															"",
															"",
															"// Define Class API Request Body",
															"let classRequestBody = {",
															"    \"sourcedId\": pm.environment.get(\"classSourcedId\"), //Required",
															"    \"status\": \"active\", //Required",
															"    \"title\": \"title\", //Required",
															"    \"classType\": \"SCHEDULED\", //Required",
															"    \"course\": { //required",
															"        \"href\": \"/courses/\" + pm.environment.get(\"courseSourcedId\"),",
															"        \"sourcedId\": pm.environment.get(\"courseSourcedId\"),",
															"        \"type\": \"course\"",
															"                },",
															"    \"school\": { //required",
															"        \"href\": \"/org/\" + pm.environment.get(\"school_sourcedId\"),",
															"        \"sourcedId\": pm.environment.get(\"school_sourcedId\"),",
															"        \"type\": \"org\"",
															"                },",
															"    \"terms\": [ //required",
															"        {",
															"            \"href\": \"/academicSession/\" + pm.environment.get(\"term_sourcedId\"),",
															"            \"sourcedId\":pm.environment.get(\"term_sourcedId\"),",
															"             \"type\": \"academicSession\"",
															"        }",
															"    ]",
															"}",
															"",
															"",
															"// Define ScoreScale API Request Body",
															"let scoreScaleRequestBody = {",
															"    \"scoreScale\": {",
															"    \"sourcedId\":pm.environment.get(\"scoreScaleSourcedId\"), //required",
															"    \"status\": \"active\", //required",
															"    \"dateLastModified\": isoDateTime, //required",
															"    \"metadata\": {",
															"        \"test\": \"metadata\"",
															"                },",
															"    \"title\": \"QATestProd\", //required",
															"    \"type\": \"QATestProd\", //required",
															"    \"course\": {",
															"            \"href\": \"/course/\" + pm.environment.get(\"courseSourcedId\"),",
															"            \"sourcedId\": pm.environment.get(\"courseSourcedId\"),",
															"            \"type\": \"course\"",
															"        },",
															"    \"class\": {  //required",
															"            \"href\": \"/classes/\" + pm.environment.get(\"classSourcedId\"),",
															"            \"sourcedId\": pm.environment.get(\"classSourcedId\"),",
															"            \"type\": \"class\"",
															"        },",
															"    \"scoreScaleValue\": [ //required",
															"        {",
															"            \"itemValueLHS\": \"0-57\",",
															"            \"itemValueRHS\": \"F\"",
															"        },",
															"        {",
															"            \"itemValueLHS\": \"60-69\",",
															"            \"itemValueRHS\": \"D\"",
															"        }",
															"                        ]",
															"    }",
															"}",
															"",
															"",
															"// Define Category API Request Body",
															"let categoryRequestBody = {",
															"     \"category\": {",
															"        \"sourcedId\": pm.environment.get(\"categorySourcedId\"),",
															"        \"status\": \"active\",",
															"        \"dateLastModified\": isoDateTime,",
															"        \"metadata\": {},",
															"        \"title\": \"title\",",
															"        \"weight\": 3",
															"                }",
															"}",
															"",
															"",
															"// Define putLineItem API Request Body",
															"let putLineItemRequestBody = {",
															"    \"lineItem\": {",
															"        \"sourcedId\": pm.environment.get(\"sourcedId\"),",
															"        \"status\": \"active\",",
															"        \"dateLastModified\": isoDateTime, // Correct UTC ISO8601 format",
															"        \"metadata\": {",
															"            \"extensions\": {",
															"                \"type\": \"DIGITAL_RESOURCE\",",
															"                \"adaptive\": true,",
															"                \"storageName\": \"example_storage_name\",",
															"                \"subject\": \"Mathematics\",",
															"                \"creator\": [",
															"                    \"0bb114e1-6f8a-4d81-8d27-1e641fdeddf7\"",
															"                ],",
															"                \"mediaType\": \"application/pdf\",",
															"                \"keywords\": [",
															"                    \"keyword1\",",
															"                    \"keyword2\"",
															"                ],",
															"                \"datePublished\": isoDateTime, // Correct UTC ISO8601 format",
															"                \"dateToActivate\": isoDateTime, // Correct UTC ISO8601 format",
															"                \"dateToShow\": isoDateTime, // Correct UTC ISO8601 format",
															"                \"dateToStartOn\": isoDateTime, // Correct UTC ISO8601 format",
															"                \"maxAttempts\": 5,",
															"                \"maxSubmits\": 3,",
															"                \"version\": \"1.0\",",
															"                \"applicationId\": \"string\",",
															"                \"competencyId\": null",
															"            }",
															"        },",
															"        \"title\": \"title\",",
															"        \"description\": \"A foundational resource for understanding algebra.\",",
															"        \"assignDate\": isoDateTime, // Correct UTC ISO8601 format",
															"        \"dueDate\": isoDateTime, // Correct UTC ISO8601 format",
															"        \"class\": {",
															"            \"href\": \"/classes/c6b2a92c-6efd-4d0d-989a-dddad7edc98d\",",
															"            \"sourcedId\": pm.environment.get(\"classSourcedId\"),",
															"            \"type\": \"class\"",
															"        },",
															"        \"school\": {",
															"            \"href\": \"/schools/91edfc73-d1ab-4168-93de-85a71d7f318d\",",
															"            \"sourcedId\": pm.environment.get(\"school_sourcedId\"),",
															"            \"type\": \"org\"",
															"        },",
															"        \"scoreScale\": {",
															"            \"href\": \"/scoreScales/5252bd60-6196-4063-9221-a9f27fe52c55\",",
															"            \"sourcedId\": pm.environment.get(\"scoreScaleSourcedId\"),",
															"            \"type\": \"scoreScale\"",
															"        },",
															"        \"category\": {",
															"            \"href\": \"/category/5252bd60-6196-4063-9221-a9f27fe52c55\",",
															"            \"sourcedId\": pm.environment.get(\"categorySourcedId\"),",
															"            \"type\": \"category\"",
															"        },",
															"        \"resultValueMin\": 0,",
															"        \"resultValueMax\": 100,",
															"        \"academicSession\": null",
															"    }",
															"}",
															"",
															"",
															"// Make the Course POST request",
															"pm.sendRequest({",
															"    url: courseUrl,",
															"    method: 'POST',",
															"    header: headers,",
															"    body: {",
															"        mode: 'raw',",
															"        raw: JSON.stringify(courseRequestBody)",
															"    }",
															"}, function (err, res) {",
															"    if (err) {",
															"        console.error(\"POST Course API Error: \", err);",
															"        pm.environment.unset(\"courseSourcedId\"); // Clear sourcedId on failure",
															"        throw new Error(\"Course POST API request failed.\");",
															"    }",
															"",
															"    if (res.code !== 201) {  // Ensure status is 201 Created",
															"        console.error(\"Unexpected POST Course API Response Code: \" + res.code);",
															"        pm.environment.unset(\"courseSourcedId\"); // Clear sourcedId on failure",
															"        throw new Error(\"Course POST API did not return 201 Created.\");",
															"    }",
															"",
															"    console.log(\"Course POST API succeeded with status: \" + res.code);",
															"",
															"",
															" // Make getAllOrgs Request",
															"    pm.sendRequest({",
															"        url: getAllOrgsUrl,",
															"        method: 'GET',",
															"        header: headers",
															"    }, function (err, res) {",
															"        if (err || res.code !== 200) {",
															"            console.error(\"GET Orgs API Failed. Code:\", res?.code || \"No response\", \"Error:\", err);",
															"            throw new Error(\"GET Orgs API request failed.\");",
															"        }",
															"        console.log(\"GET Orgs API succeeded with status:\", res.code);",
															"        let response = res.json();",
															"        let schoolOrgs = response.orgs.filter(org => org.type === \"SCHOOL\");",
															"",
															"        if (schoolOrgs.length === 0) {",
															"            throw new Error(\"No orgs of type 'SCHOOL' found.\");",
															"        }",
															"",
															"        // Get a random school sourcedId",
															"        let randomIndex = Math.floor(Math.random() * schoolOrgs.length);",
															"        let schoolSourcedId = schoolOrgs[randomIndex].sourcedId;",
															"        console.log(\"Selected school sourcedId: \" + schoolSourcedId);",
															"        // Save to environment/collection variable for later use",
															"        pm.environment.set(\"school_sourcedId\", schoolSourcedId);",
															"",
															"",
															"     // Make getAllterms Request",
															"        pm.sendRequest({",
															"            url: getAllTermsUrl,",
															"            method: 'GET',",
															"            header: headers",
															"        }, function (err, res) {",
															"            if (err || res.code !== 200) {",
															"                console.error(\"GET TERMS API Failed. Code:\", res?.code || \"No response\", \"Error:\", err);",
															"                throw new Error(\"GET TERMS API request failed.\");",
															"            }",
															"",
															"            console.log(\"GET TERMS API succeeded with status:\", res.code);",
															"",
															"            let response = res.json();",
															"            let termSessions = response.academicSessions.filter(session => session.type === \"TERM\");",
															"",
															"            if (termSessions.length === 0) {",
															"                throw new Error(\"No academicSessions of type 'TERM' found.\");",
															"            }",
															"",
															"            // Select a random term sourcedId",
															"            let randomIndex = Math.floor(Math.random() * termSessions.length);",
															"            let termSourcedId = termSessions[randomIndex].sourcedId;",
															"",
															"            console.log(\"Selected TERM sourcedId: \" + termSourcedId);",
															"",
															"            // Save to environment/collection variable",
															"            pm.environment.set(\"term_sourcedId\", termSourcedId);",
															"",
															"            // Make the Class POST request",
															"            pm.sendRequest({",
															"                url: classUrl,",
															"                method: 'POST',",
															"                header: headers,",
															"                body: {",
															"                    mode: 'raw',",
															"                    raw: JSON.stringify(classRequestBody)",
															"                }",
															"            }, function (err, res) {",
															"                if (err) {",
															"                    console.error(\"POST Class API Error: \", err);",
															"                    pm.environment.unset(\"classSourcedId\"); // Clear sourcedId on failure",
															"                    throw new Error(\"Class POST API request failed.\");",
															"                }",
															"",
															"                if (res.code !== 201) {  // Ensure status is 201 Created",
															"                    console.error(\"Unexpected POST Class API Response Code: \" + res.code);",
															"                    pm.environment.unset(\"classSourcedId\"); // Clear sourcedId on failure",
															"                    throw new Error(\"POST Class API did not return 201 Created.\");",
															"                }",
															"",
															"                console.log(\"POST Class API succeeded with status: \" + res.code);",
															"",
															"",
															"                // Make the PUT ScoreScale request",
															"                pm.sendRequest({",
															"                    url: scoreScaleUrl,",
															"                    method: 'PUT',",
															"                    header: headers,",
															"                    body: {",
															"                        mode: 'raw',",
															"                        raw: JSON.stringify(scoreScaleRequestBody)",
															"                    }",
															"                }, function (err, res) {",
															"                    if (err) {",
															"                        console.error(\"PUT ScoreScale API Error: \", err);",
															"                        pm.environment.unset(\"scoreScaleSourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT ScoreScale API request failed.\");",
															"                    }",
															"",
															"                    if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
															"                        console.error(\"Unexpected PUT ScoreScale API Response Code: \" + res.code);",
															"                        pm.environment.unset(\"scoreScaleSourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT ScoreScale API did not return 200 or 201.\");",
															"                    }",
															"",
															"                    console.log(\"PUT ScoreScale API succeeded with status: \" + res.code);",
															"",
															"",
															"                    // Make the PUT Category request",
															"                pm.sendRequest({",
															"                    url: categoryUrl,",
															"                    method: 'PUT',",
															"                    header: headers,",
															"                    body: {",
															"                        mode: 'raw',",
															"                        raw: JSON.stringify(categoryRequestBody)",
															"                    }",
															"                }, function (err, res) {",
															"                    if (err) {",
															"                        console.error(\"PUT Category API Error: \", err);",
															"                        pm.environment.unset(\"categorySourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT Category API request failed.\");",
															"                    }",
															"",
															"                    if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
															"                        console.error(\"Unexpected PUT Category API Response Code: \" + res.code);",
															"                        pm.environment.unset(\"categorySourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT Category API did not return 200 or 201.\");",
															"                    }",
															"",
															"                    console.log(\"PUT Category API succeeded with status: \" + res.code);",
															"",
															"",
															"                    // Make the putLineItem request",
															"                pm.sendRequest({",
															"                    url: putLineItemUrl,",
															"                    method: 'PUT',",
															"                    header: headers,",
															"                    body: {",
															"                        mode: 'raw',",
															"                        raw: JSON.stringify(putLineItemRequestBody)",
															"                    }",
															"                }, function (err, res) {",
															"                    if (err) {",
															"                        console.error(\"putLineItem API Error: \", err);",
															"                        pm.environment.unset(\"sourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"putLineItem API request failed.\");",
															"                    }",
															"",
															"                    if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
															"                        console.error(\"Unexpected putLineItem API Response Code: \" + res.code);",
															"                        pm.environment.unset(\"sourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"putLineItem API did not return 200 or 201.\");",
															"                    }",
															"                    console.log(\"putLineItem API succeeded with status: \" + res.code);",
															"                        });                       ",
															"                    });",
															"                });               ",
															"            });",
															"        });",
															"    });",
															"});",
															"pm.environment.set(\"putLineItemRequestBody\", JSON.stringify(putLineItemRequestBody)); ",
															"",
															"",
															"// Extract keys from assessmentLineItem",
															"let allFields = Object.keys(putLineItemRequestBody.lineItem);",
															"",
															"// Shuffle and pick 3 random fields",
															"function getRandomFields(fields, count) {",
															"    let shuffled = fields.sort(() => 0.5 - Math.random());",
															"    return shuffled.slice(0, count);",
															"}",
															"",
															"let selectedFields = getRandomFields(allFields, 3);",
															"let fieldsParam = selectedFields.join(\",\");",
															"console.log(\"Randomly selected query fields: \" + fieldsParam);",
															"",
															"",
															"// Save to environment or collection variable",
															"pm.environment.set(\"randomFields\", fieldsParam);",
															"console.log(\"Query param 'fields':\", fieldsParam);",
															"",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}{{endpoint}}/lineItems/{{sourcedId}}?fields={{randomFields}}",
													"host": [
														"{{URL}}{{endpoint}}"
													],
													"path": [
														"lineItems",
														"{{sourcedId}}"
													],
													"query": [
														{
															"key": "fields",
															"value": "{{randomFields}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Validate API throws an error for sending non existing sourcedId in the path parameter",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Parse response JSON",
															"let response = pm.response.json();",
															"",
															"// Retrive requested sourcedId",
															"let sourcedId = pm.environment.get(\"sourcedId\");",
															"",
															"// Construct expected error message",
															"let expectedDescription = `LineItem with sourcedId: ${sourcedId} was not found.`;",
															"",
															"",
															"// 1. Validate the Status code",
															"pm.test(\"Validate Status Code, It should be 404 Not Found\", function () {",
															"    pm.expect([404]).to.include(pm.response.code, \"Unexpected status code\");",
															"});",
															"",
															"// 2. Validate Json Response Structure and Types",
															"pm.test(\"Validate Json Response Structure\", function () {",
															"    const response = pm.response.json();",
															"",
															"    // 2.1. Validate top-level keys",
															"    pm.expect(response).to.have.keys(\"imsx_codeMajor\", \"imsx_severity\", \"imsx_description\", \"imsx_CodeMinor\");",
															"",
															"    // 2.2 Validate imsx_codeMajor",
															"    pm.expect(response.imsx_codeMajor).to.be.a(\"string\");",
															"    pm.expect(response.imsx_codeMajor).to.eql(\"failure\");",
															"",
															"    // 2.3 Validate imsx_severity",
															"    pm.expect(response.imsx_severity).to.be.a(\"string\");",
															"    pm.expect(response.imsx_severity).to.eql(\"error\");",
															"",
															"    // 2.4 Validate imsx_description",
															"    pm.expect(response.imsx_description).to.be.a(\"string\");",
															"    pm.expect(response.imsx_description).to.include(\"LineItem with sourcedId\");",
															"    pm.expect(response.imsx_description).to.include(\"was not found.\");",
															"",
															"    // 5. Validate imsx_CodeMinor structure",
															"    pm.expect(response.imsx_CodeMinor).to.be.an(\"object\");",
															"    pm.expect(response.imsx_CodeMinor).to.have.keys(\"imsx_codeMinorField\");",
															"",
															"    // 2.5 Validate imsx_codeMinorField is an array",
															"    pm.expect(response.imsx_CodeMinor.imsx_codeMinorField).to.be.an(\"array\");",
															"    pm.expect(response.imsx_CodeMinor.imsx_codeMinorField).to.have.lengthOf.at.least(1); // Expect at least one item",
															"",
															"    // 2.6 Validate the structure of each item in imsx_codeMinorField",
															"    response.imsx_CodeMinor.imsx_codeMinorField.forEach(minorField => {",
															"        pm.expect(minorField).to.be.an(\"object\");",
															"        pm.expect(minorField).to.have.keys(\"imsx_codeMinorFieldName\", \"imsx_codeMinorFieldValue\");",
															"",
															"        // Validate imsx_codeMinorFieldName and imsx_codeMinorFieldValue types",
															"        pm.expect(minorField.imsx_codeMinorFieldName).to.be.a(\"string\");",
															"        pm.expect(minorField.imsx_codeMinorFieldValue).to.be.a(\"string\");",
															"",
															"        // Optional: Specific value check for imsx_codeMinorFieldName and imsx_codeMinorFieldValue",
															"        // You can add more specific checks if you expect certain values.",
															"        // For example, to check if the first item has specific values:",
															"        if (response.imsx_CodeMinor.imsx_codeMinorField.length > 0) {",
															"            if (response.imsx_CodeMinor.imsx_codeMinorField[0]) {",
															"                pm.expect(response.imsx_CodeMinor.imsx_codeMinorField[0].imsx_codeMinorFieldName).to.eql(\"TargetEndSystem\");",
															"                pm.expect(response.imsx_CodeMinor.imsx_codeMinorField[0].imsx_codeMinorFieldValue).to.eql(\"unknownobject\");",
															"            }",
															"        }",
															"    });",
															"});",
															"",
															"",
															"// 3. Validate the error message exactly",
															"pm.test(\"Verify Error message and it should matches with requested sourcedId and indicates sourcedId is unknown \", function () {",
															"    pm.expect(response.imsx_description).to.eql(expectedDescription);",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Set headers dynamically from environment variables",
															"pm.request.headers.upsert({ key: \"Authorization\", value: pm.environment.get(\"Auth\") });",
															"pm.request.headers.upsert({ key: \"x-app-key\", value: pm.environment.get(\"x-app-key\") });",
															"pm.request.headers.upsert({ key: \"x-client-id\", value: pm.environment.get(\"x-client-id\") });",
															"",
															"// Cache environment variables",
															"const auth = pm.environment.get(\"Auth\");",
															"const appKey = pm.environment.get(\"x-app-key\");",
															"const clientId = pm.environment.get(\"x-client-id\");",
															"const baseURL = pm.environment.get(\"URL\");",
															"",
															"// Common headers",
															"const headers = {",
															"    Authorization: auth,",
															"    \"x-app-key\": appKey,",
															"    \"x-client-id\": clientId,",
															"    \"Content-Type\": \"application/json\"",
															"};",
															"",
															"// Generate a random UUID for sourcedId",
															"function generateUUID() {",
															"    let dt = new Date().getTime();",
															"    let uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {",
															"        let r = (dt + Math.random() * 16) % 16 | 0;",
															"        dt = Math.floor(dt / 16);",
															"        return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);",
															"    });",
															"    return uuid;",
															"}",
															"",
															"// Generate current UTC timestamp in ISO format: 2025-01-29T06:51:57Z",
															"function getCurrentISOString() {",
															"    return new Date().toISOString().split('.')[0] + \"Z\";",
															"}",
															"",
															"// Generate dynamic variables",
															"let courseSourcedId = generateUUID();",
															"let classSourcedId = generateUUID();",
															"let scoreScaleSourcedId = generateUUID();",
															"let categorySourcedId = generateUUID();",
															"let sourcedId = generateUUID();",
															"let isoDateTime = getCurrentISOString(); // full timestamp",
															"let isoDateOnly = isoDateTime.split('T')[0]; // date only",
															"",
															"// Set dynamic variables",
															"pm.environment.set(\"courseSourcedId\", courseSourcedId);",
															"pm.environment.set(\"classSourcedId\", classSourcedId);",
															"pm.environment.set(\"scoreScaleSourcedId\", scoreScaleSourcedId);",
															"pm.environment.set(\"categorySourcedId\", categorySourcedId);",
															"pm.environment.set(\"sourcedId\", sourcedId);",
															"pm.environment.set(\"isoDateTime\", isoDateTime);",
															"pm.environment.set(\"isoDateOnly\", isoDateOnly);",
															"",
															"console.log(\"Generated ISO DateTime: \" + isoDateTime);",
															"console.log(\"Generated ISO Date Only: \" + isoDateOnly);",
															"",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}{{endpoint}}/lineItems/{{sourcedId}}",
													"host": [
														"{{URL}}{{endpoint}}"
													],
													"path": [
														"lineItems",
														"{{sourcedId}}"
													],
													"query": [
														{
															"key": "fields",
															"value": "category",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Validate API throws an error for sending sourcedId which is of type PLACEMENT_TEST",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Parse response JSON",
															"let response = pm.response.json();",
															"",
															"// Retrive requested sourcedId",
															"let sourcedId = pm.environment.get(\"assmentLineitemSourcedId\");",
															"",
															"// Construct expected error message",
															"let expectedDescription = `LineItem with sourcedId: ${sourcedId} was not found.`;",
															"",
															"",
															"// 1. Validate the Status code",
															"pm.test(\"Validate Status Code, It should be 404 Not Found\", function () {",
															"    pm.expect([404]).to.include(pm.response.code, \"Unexpected status code\");",
															"});",
															"",
															"// 2. Validate Json Response Structure and Types",
															"pm.test(\"Validate Json Response Structure\", function () {",
															"    const response = pm.response.json();",
															"",
															"    // 2.1. Validate top-level keys",
															"    pm.expect(response).to.have.keys(\"imsx_codeMajor\", \"imsx_severity\", \"imsx_description\", \"imsx_CodeMinor\");",
															"",
															"    // 2.2 Validate imsx_codeMajor",
															"    pm.expect(response.imsx_codeMajor).to.be.a(\"string\");",
															"    pm.expect(response.imsx_codeMajor).to.eql(\"failure\");",
															"",
															"    // 2.3 Validate imsx_severity",
															"    pm.expect(response.imsx_severity).to.be.a(\"string\");",
															"    pm.expect(response.imsx_severity).to.eql(\"error\");",
															"",
															"    // 2.4 Validate imsx_description",
															"    pm.expect(response.imsx_description).to.be.a(\"string\");",
															"    pm.expect(response.imsx_description).to.include(\"LineItem with sourcedId\");",
															"    pm.expect(response.imsx_description).to.include(\"was not found.\");",
															"",
															"    // 5. Validate imsx_CodeMinor structure",
															"    pm.expect(response.imsx_CodeMinor).to.be.an(\"object\");",
															"    pm.expect(response.imsx_CodeMinor).to.have.keys(\"imsx_codeMinorField\");",
															"",
															"    // 2.5 Validate imsx_codeMinorField is an array",
															"    pm.expect(response.imsx_CodeMinor.imsx_codeMinorField).to.be.an(\"array\");",
															"    pm.expect(response.imsx_CodeMinor.imsx_codeMinorField).to.have.lengthOf.at.least(1); // Expect at least one item",
															"",
															"    // 2.6 Validate the structure of each item in imsx_codeMinorField",
															"    response.imsx_CodeMinor.imsx_codeMinorField.forEach(minorField => {",
															"        pm.expect(minorField).to.be.an(\"object\");",
															"        pm.expect(minorField).to.have.keys(\"imsx_codeMinorFieldName\", \"imsx_codeMinorFieldValue\");",
															"",
															"        // Validate imsx_codeMinorFieldName and imsx_codeMinorFieldValue types",
															"        pm.expect(minorField.imsx_codeMinorFieldName).to.be.a(\"string\");",
															"        pm.expect(minorField.imsx_codeMinorFieldValue).to.be.a(\"string\");",
															"",
															"        // Optional: Specific value check for imsx_codeMinorFieldName and imsx_codeMinorFieldValue",
															"        // You can add more specific checks if you expect certain values.",
															"        // For example, to check if the first item has specific values:",
															"        if (response.imsx_CodeMinor.imsx_codeMinorField.length > 0) {",
															"            if (response.imsx_CodeMinor.imsx_codeMinorField[0]) {",
															"                pm.expect(response.imsx_CodeMinor.imsx_codeMinorField[0].imsx_codeMinorFieldName).to.eql(\"TargetEndSystem\");",
															"                pm.expect(response.imsx_CodeMinor.imsx_codeMinorField[0].imsx_codeMinorFieldValue).to.eql(\"unknownobject\");",
															"            }",
															"        }",
															"    });",
															"});",
															"",
															"",
															"// 3. Validate the error message exactly",
															"pm.test(\"Verify Error message and it should matches with requested sourcedId and indicates sourcedId is unknown \", function () {",
															"    pm.expect(response.imsx_description).to.eql(expectedDescription);",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Set headers dynamically from environment variables",
															"pm.request.headers.upsert({ key: \"Authorization\", value: pm.environment.get(\"Auth\") });",
															"pm.request.headers.upsert({ key: \"x-app-key\", value: pm.environment.get(\"x-app-key\") });",
															"pm.request.headers.upsert({ key: \"x-client-id\", value: pm.environment.get(\"x-client-id\") });",
															"",
															"// Cache environment variables",
															"const auth = pm.environment.get(\"Auth\");",
															"const appKey = pm.environment.get(\"x-app-key\");",
															"const clientId = pm.environment.get(\"x-client-id\");",
															"const baseURL = pm.environment.get(\"URL\");",
															"",
															"// Common headers",
															"const headers = {",
															"    Authorization: auth,",
															"    \"x-app-key\": appKey,",
															"    \"x-client-id\": clientId,",
															"    \"Content-Type\": \"application/json\"",
															"};",
															"",
															"// Generate a random UUID for sourcedId",
															"function generateUUID() {",
															"    let dt = new Date().getTime();",
															"    let uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {",
															"        let r = (dt + Math.random() * 16) % 16 | 0;",
															"        dt = Math.floor(dt / 16);",
															"        return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);",
															"    });",
															"    return uuid;",
															"}",
															"",
															"// Generate current UTC timestamp in ISO format: 2025-01-29T06:51:57Z",
															"function getCurrentISOString() {",
															"    return new Date().toISOString().split('.')[0] + \"Z\";",
															"}",
															"",
															"// Generate dynamic variables",
															"let courseSourcedId = generateUUID();",
															"let classSourcedId = generateUUID();",
															"let scoreScaleSourcedId = generateUUID();",
															"let categorySourcedId = generateUUID();",
															"let sourcedId = generateUUID();",
															"let assmentLineitemSourcedId = generateUUID();",
															"let isoDateTime = getCurrentISOString(); // full timestamp",
															"let isoDateOnly = isoDateTime.split('T')[0]; // date only",
															"",
															"// Set dynamic variables",
															"pm.environment.set(\"courseSourcedId\", courseSourcedId);",
															"pm.environment.set(\"classSourcedId\", classSourcedId);",
															"pm.environment.set(\"scoreScaleSourcedId\", scoreScaleSourcedId);",
															"pm.environment.set(\"categorySourcedId\", categorySourcedId);",
															"pm.environment.set(\"sourcedId\", sourcedId);",
															"pm.environment.set(\"assmentLineitemSourcedId\", assmentLineitemSourcedId);",
															"pm.environment.set(\"isoDateTime\", isoDateTime);",
															"pm.environment.set(\"isoDateOnly\", isoDateOnly);",
															"",
															"console.log(\"Generated ISO DateTime: \" + isoDateTime);",
															"console.log(\"Generated ISO Date Only: \" + isoDateOnly);",
															"",
															"// API URLs",
															"const courseUrl = `${baseURL}${pm.environment.get(\"customPathPrefix\")}/courses`;",
															"const getAllOrgsUrl = `${baseURL}${pm.environment.get(\"rosterPathPrefix\")}/orgs`;",
															"const getAllTermsUrl = `${baseURL}${pm.environment.get(\"rosterPathPrefix\")}/terms`;",
															"const classUrl = `${baseURL}${pm.environment.get(\"customPathPrefix\")}/classes`;",
															"const scoreScaleUrl = `${baseURL}${pm.environment.get(\"pathPrefix\")}/scoreScales/${scoreScaleSourcedId}`;",
															"const categoryUrl = `${baseURL}${pm.environment.get(\"pathPrefix\")}/categories/${categorySourcedId}`;",
															"const putLineItemUrl = `${baseURL}${pm.environment.get(\"pathPrefix\")}/lineItems/${sourcedId}`;",
															"const putAssessmentLineItemUrl = `${baseURL}${pm.environment.get(\"pathPrefix\")}/assessmentLineItems/${assmentLineitemSourcedId}`;",
															"",
															"",
															"// Define Course API Request Body",
															"let courseRequestBody = {",
															"    \"sourcedId\": pm.environment.get(\"courseSourcedId\"), //required",
															"    \"status\": \"active\", //required",
															"    \"title\": \"QA\", //required",
															"    \"courseCode\": \"courseCode\" //required",
															"}",
															"",
															"",
															"// Define Class API Request Body",
															"let classRequestBody = {",
															"    \"sourcedId\": pm.environment.get(\"classSourcedId\"), //Required",
															"    \"status\": \"active\", //Required",
															"    \"title\": \"title\", //Required",
															"    \"classType\": \"SCHEDULED\", //Required",
															"    \"course\": { //required",
															"        \"href\": \"/courses/\" + pm.environment.get(\"courseSourcedId\"),",
															"        \"sourcedId\": pm.environment.get(\"courseSourcedId\"),",
															"        \"type\": \"course\"",
															"                },",
															"    \"school\": { //required",
															"        \"href\": \"/org/\" + pm.environment.get(\"school_sourcedId\"),",
															"        \"sourcedId\": pm.environment.get(\"school_sourcedId\"),",
															"        \"type\": \"org\"",
															"                },",
															"    \"terms\": [ //required",
															"        {",
															"            \"href\": \"/academicSession/\" + pm.environment.get(\"term_sourcedId\"),",
															"            \"sourcedId\":pm.environment.get(\"term_sourcedId\"),",
															"             \"type\": \"academicSession\"",
															"        }",
															"    ]",
															"}",
															"",
															"",
															"// Define ScoreScale API Request Body",
															"let scoreScaleRequestBody = {",
															"    \"scoreScale\": {",
															"    \"sourcedId\":pm.environment.get(\"scoreScaleSourcedId\"), //required",
															"    \"status\": \"active\", //required",
															"    \"dateLastModified\": isoDateTime, //required",
															"    \"metadata\": {",
															"        \"test\": \"metadata\"",
															"                },",
															"    \"title\": \"QATestProd\", //required",
															"    \"type\": \"QATestProd\", //required",
															"    \"course\": {",
															"            \"href\": \"/course/\" + pm.environment.get(\"courseSourcedId\"),",
															"            \"sourcedId\": pm.environment.get(\"courseSourcedId\"),",
															"            \"type\": \"course\"",
															"        },",
															"    \"class\": {  //required",
															"            \"href\": \"/classes/\" + pm.environment.get(\"classSourcedId\"),",
															"            \"sourcedId\": pm.environment.get(\"classSourcedId\"),",
															"            \"type\": \"class\"",
															"        },",
															"    \"scoreScaleValue\": [ //required",
															"        {",
															"            \"itemValueLHS\": \"0-57\",",
															"            \"itemValueRHS\": \"F\"",
															"        },",
															"        {",
															"            \"itemValueLHS\": \"60-69\",",
															"            \"itemValueRHS\": \"D\"",
															"        }",
															"                        ]",
															"    }",
															"}",
															"",
															"",
															"// Define Category API Request Body",
															"let categoryRequestBody = {",
															"     \"category\": {",
															"        \"sourcedId\": pm.environment.get(\"categorySourcedId\"),",
															"        \"status\": \"active\",",
															"        \"dateLastModified\": isoDateTime,",
															"        \"metadata\": {},",
															"        \"title\": \"title\",",
															"        \"weight\": 3",
															"                }",
															"}",
															"",
															"",
															"// Define putLineItem API Request Body",
															"let putLineItemRequestBody = {",
															"    \"lineItem\": {",
															"        \"sourcedId\": pm.environment.get(\"sourcedId\"),",
															"        \"status\": \"active\",",
															"        \"dateLastModified\": isoDateTime, // Correct UTC ISO8601 format",
															"        \"metadata\": {",
															"            \"extensions\": {",
															"                \"type\": \"DIGITAL_RESOURCE\",",
															"                \"adaptive\": true,",
															"                \"storageName\": \"example_storage_name\",",
															"                \"subject\": \"Mathematics\",",
															"                \"creator\": [",
															"                    \"0bb114e1-6f8a-4d81-8d27-1e641fdeddf7\"",
															"                ],",
															"                \"mediaType\": \"application/pdf\",",
															"                \"keywords\": [",
															"                    \"keyword1\",",
															"                    \"keyword2\"",
															"                ],",
															"                \"datePublished\": isoDateTime, // Correct UTC ISO8601 format",
															"                \"dateToActivate\": isoDateTime, // Correct UTC ISO8601 format",
															"                \"dateToShow\": isoDateTime, // Correct UTC ISO8601 format",
															"                \"dateToStartOn\": isoDateTime, // Correct UTC ISO8601 format",
															"                \"maxAttempts\": 5,",
															"                \"maxSubmits\": 3,",
															"                \"version\": \"1.0\",",
															"                \"applicationId\": \"string\",",
															"                \"competencyId\": null",
															"            }",
															"        },",
															"        \"title\": \"title\",",
															"        \"description\": \"A foundational resource for understanding algebra.\",",
															"        \"assignDate\": isoDateTime, // Correct UTC ISO8601 format",
															"        \"dueDate\": isoDateTime, // Correct UTC ISO8601 format",
															"        \"class\": {",
															"            \"href\": \"/classes/c6b2a92c-6efd-4d0d-989a-dddad7edc98d\",",
															"            \"sourcedId\": pm.environment.get(\"classSourcedId\"),",
															"            \"type\": \"class\"",
															"        },",
															"        \"school\": {",
															"            \"href\": \"/schools/91edfc73-d1ab-4168-93de-85a71d7f318d\",",
															"            \"sourcedId\": pm.environment.get(\"school_sourcedId\"),",
															"            \"type\": \"org\"",
															"        },",
															"        \"scoreScale\": {",
															"            \"href\": \"/scoreScales/5252bd60-6196-4063-9221-a9f27fe52c55\",",
															"            \"sourcedId\": pm.environment.get(\"scoreScaleSourcedId\"),",
															"            \"type\": \"scoreScale\"",
															"        },",
															"        \"category\": {",
															"            \"href\": \"/category/5252bd60-6196-4063-9221-a9f27fe52c55\",",
															"            \"sourcedId\": pm.environment.get(\"categorySourcedId\"),",
															"            \"type\": \"category\"",
															"        },",
															"        \"resultValueMin\": 0,",
															"        \"resultValueMax\": 100,",
															"        \"academicSession\": null",
															"    }",
															"}",
															"",
															"// Define putAssessmentLineItem API Request Body",
															"let putAssessmentLineItemRequestBody = {",
															"    \"assessmentLineItem\": {",
															"        \"sourcedId\": pm.environment.get(\"assmentLineitemSourcedId\"),",
															"        \"status\": \"active\",",
															"        \"dateLastModified\": isoDateTime,",
															"        \"metadata\": {",
															"            \"extensions\": {",
															"                \"fields\": {",
															"                    \"type\": \"PLACEMENT_TEST\",",
															"                    \"adaptive\": true,",
															"                    \"storageName\": \"storageName\",",
															"                    \"subject\": \"subject\",",
															"                    \"creator\": [],",
															"                    \"mediaType\": \"mediaType\",",
															"                    \"keywords\": null,",
															"                    \"datePublished\": null,",
															"                    \"dateToActivate\": null,",
															"                    \"dateToShow\": null,",
															"                    \"dateToStartOn\": null,",
															"                    \"maxAttempts\": null,",
															"                    \"maxSubmits\": null,",
															"                    \"version\": null,",
															"                    \"dueDate\": null,",
															"                    \"assignDate\": null,",
															"                    \"schoolId\": null,",
															"                    \"academicSessionId\": null,",
															"                    \"categoryId\": null,",
															"                    \"applicationId\": null,",
															"                    \"competencyId\": null",
															"                }",
															"            }",
															"        },",
															"        \"title\": \"AssessmentLineItem\",",
															"        \"description\": \"This is QA POSTMAN API Automation generated \",",
															"        \"class\": {",
															"            \"href\": \"https://example.com\",",
															"            \"sourcedId\": pm.environment.get(\"classSourcedId\"),",
															"            \"type\": \"class\"",
															"        },",
															"        \"parentAssessmentLineItem\": null,",
															"        \"scoreScale\": {",
															"            \"href\": \"https://example.com/scoreScale\",",
															"            \"sourcedId\": pm.environment.get(\"scoreScaleSourcedId\"),",
															"            \"type\": \"scoreScale\"",
															"        },",
															"        \"resultValueMin\": 90,",
															"        \"resultValueMax\": 100,",
															"        \"learningObjectiveSet\": null",
															"    }",
															"}",
															"",
															"",
															"// Make the Course POST request",
															"pm.sendRequest({",
															"    url: courseUrl,",
															"    method: 'POST',",
															"    header: headers,",
															"    body: {",
															"        mode: 'raw',",
															"        raw: JSON.stringify(courseRequestBody)",
															"    }",
															"}, function (err, res) {",
															"    if (err) {",
															"        console.error(\"POST Course API Error: \", err);",
															"        pm.environment.unset(\"courseSourcedId\"); // Clear sourcedId on failure",
															"        throw new Error(\"Course POST API request failed.\");",
															"    }",
															"",
															"    if (res.code !== 201) {  // Ensure status is 201 Created",
															"        console.error(\"Unexpected POST Course API Response Code: \" + res.code);",
															"        pm.environment.unset(\"courseSourcedId\"); // Clear sourcedId on failure",
															"        throw new Error(\"Course POST API did not return 201 Created.\");",
															"    }",
															"",
															"    console.log(\"Course POST API succeeded with status: \" + res.code);",
															"",
															"",
															" // Make getAllOrgs Request",
															"    pm.sendRequest({",
															"        url: getAllOrgsUrl,",
															"        method: 'GET',",
															"        header: headers",
															"    }, function (err, res) {",
															"        if (err || res.code !== 200) {",
															"            console.error(\"GET Orgs API Failed. Code:\", res?.code || \"No response\", \"Error:\", err);",
															"            throw new Error(\"GET Orgs API request failed.\");",
															"        }",
															"        console.log(\"GET Orgs API succeeded with status:\", res.code);",
															"        let response = res.json();",
															"        let schoolOrgs = response.orgs.filter(org => org.type === \"SCHOOL\");",
															"",
															"        if (schoolOrgs.length === 0) {",
															"            throw new Error(\"No orgs of type 'SCHOOL' found.\");",
															"        }",
															"",
															"        // Get a random school sourcedId",
															"        let randomIndex = Math.floor(Math.random() * schoolOrgs.length);",
															"        let schoolSourcedId = schoolOrgs[randomIndex].sourcedId;",
															"        console.log(\"Selected school sourcedId: \" + schoolSourcedId);",
															"        // Save to environment/collection variable for later use",
															"        pm.environment.set(\"school_sourcedId\", schoolSourcedId);",
															"",
															"",
															"     // Make getAllterms Request",
															"        pm.sendRequest({",
															"            url: getAllTermsUrl,",
															"            method: 'GET',",
															"            header: headers",
															"        }, function (err, res) {",
															"            if (err || res.code !== 200) {",
															"                console.error(\"GET TERMS API Failed. Code:\", res?.code || \"No response\", \"Error:\", err);",
															"                throw new Error(\"GET TERMS API request failed.\");",
															"            }",
															"",
															"            console.log(\"GET TERMS API succeeded with status:\", res.code);",
															"",
															"            let response = res.json();",
															"            let termSessions = response.academicSessions.filter(session => session.type === \"TERM\");",
															"",
															"            if (termSessions.length === 0) {",
															"                throw new Error(\"No academicSessions of type 'TERM' found.\");",
															"            }",
															"",
															"            // Select a random term sourcedId",
															"            let randomIndex = Math.floor(Math.random() * termSessions.length);",
															"            let termSourcedId = termSessions[randomIndex].sourcedId;",
															"",
															"            console.log(\"Selected TERM sourcedId: \" + termSourcedId);",
															"",
															"            // Save to environment/collection variable",
															"            pm.environment.set(\"term_sourcedId\", termSourcedId);",
															"",
															"            // Make the Class POST request",
															"            pm.sendRequest({",
															"                url: classUrl,",
															"                method: 'POST',",
															"                header: headers,",
															"                body: {",
															"                    mode: 'raw',",
															"                    raw: JSON.stringify(classRequestBody)",
															"                }",
															"            }, function (err, res) {",
															"                if (err) {",
															"                    console.error(\"POST Class API Error: \", err);",
															"                    pm.environment.unset(\"classSourcedId\"); // Clear sourcedId on failure",
															"                    throw new Error(\"Class POST API request failed.\");",
															"                }",
															"",
															"                if (res.code !== 201) {  // Ensure status is 201 Created",
															"                    console.error(\"Unexpected POST Class API Response Code: \" + res.code);",
															"                    pm.environment.unset(\"classSourcedId\"); // Clear sourcedId on failure",
															"                    throw new Error(\"POST Class API did not return 201 Created.\");",
															"                }",
															"",
															"                console.log(\"POST Class API succeeded with status: \" + res.code);",
															"",
															"",
															"                // Make the PUT ScoreScale request",
															"                pm.sendRequest({",
															"                    url: scoreScaleUrl,",
															"                    method: 'PUT',",
															"                    header: headers,",
															"                    body: {",
															"                        mode: 'raw',",
															"                        raw: JSON.stringify(scoreScaleRequestBody)",
															"                    }",
															"                }, function (err, res) {",
															"                    if (err) {",
															"                        console.error(\"PUT ScoreScale API Error: \", err);",
															"                        pm.environment.unset(\"scoreScaleSourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT ScoreScale API request failed.\");",
															"                    }",
															"",
															"                    if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
															"                        console.error(\"Unexpected PUT ScoreScale API Response Code: \" + res.code);",
															"                        pm.environment.unset(\"scoreScaleSourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"PUT ScoreScale API did not return 200 or 201.\");",
															"                    }",
															"",
															"                    console.log(\"PUT ScoreScale API succeeded with status: \" + res.code);",
															"",
															"",
															"",
															"                // Make the putAssessmentLineItem request",
															"                pm.sendRequest({",
															"                    url: putAssessmentLineItemUrl,",
															"                    method: 'PUT',",
															"                    header: headers,",
															"                    body: {",
															"                        mode: 'raw',",
															"                        raw: JSON.stringify(putAssessmentLineItemRequestBody)",
															"                    }",
															"                }, function (err, res) {",
															"                    if (err) {",
															"                        console.error(\"putAssessmentLineItem API Error: \", err);",
															"                        pm.environment.unset(\"sourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"putAssessmentLineItem API request failed.\");",
															"                    }",
															"",
															"                    if (res.code !== 200 && res.code !== 201) {  // Expect 200 OK or 201 Created for PUT",
															"                        console.error(\"Unexpected putAssessmentLineItem API Response Code: \" + res.code);",
															"                        pm.environment.unset(\"sourcedId\"); // Clear sourcedId on failure",
															"                        throw new Error(\"putAssessmentLineItem API did not return 200 or 201.\");",
															"                    }",
															"                    console.log(\"putAssessmentLineItem API succeeded with status: \" + res.code);",
															"                                          ",
															"                    });",
															"                });               ",
															"            });",
															"        });",
															"    });",
															"});",
															"pm.environment.set(\"putLineItemRequestBody\", JSON.stringify(putLineItemRequestBody)); ",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}{{endpoint}}/lineItems/{{assmentLineitemSourcedId}}",
													"host": [
														"{{URL}}{{endpoint}}"
													],
													"path": [
														"lineItems",
														"{{assmentLineitemSourcedId}}"
													],
													"query": [
														{
															"key": "fields",
															"value": "category",
															"disabled": true
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "getAllLineItems",
									"item": [
										{
											"name": "Validate successful retrieval of all LineItems",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// 1. Validate the Status code",
															"pm.test(\"Validate Status Code, It should be 200 OK\", function () {",
															"    pm.expect([200]).to.include(pm.response.code, \"Unexpected status code\");",
															"});",
															"",
															"",
															"pm.test(\"Validate Line Item Types are not PLACEMENT_TEST\", function () {",
															"    const responseJson = pm.response.json();",
															"",
															"    // Check if lineItems array exists and is not empty",
															"    pm.expect(responseJson.lineItems).to.be.an('array');",
															"    pm.expect(responseJson.lineItems.length).to.be.at.least(0); // Expecting at least 0 line items",
															"",
															"    // Loop through each line item in the array",
															"    responseJson.lineItems.forEach(function (lineItem) {",
															"        // Check if metadata and extensions exist",
															"        pm.expect(lineItem.metadata).to.be.an('object', \"Line item should have metadata\");",
															"        pm.expect(lineItem.metadata.extensions).to.be.an('object', \"Metadata should have extensions\");",
															"",
															"        // Check if fields exist within extensions",
															"        if (lineItem.metadata.extensions.fields) {",
															"            // Check if the 'type' field exists",
															"            pm.expect(lineItem.metadata.extensions.fields).to.have.property('type');",
															"",
															"            // Assert that the 'type' is NOT equal to 'PLACEMENT_TEST'",
															"            pm.expect(lineItem.metadata.extensions.fields.type).to.not.equal(\"PLACEMENT_TEST\", `Line item with sourcedId '${lineItem.sourcedId}' has type 'PLACEMENT_TEST' which is not allowed.`);",
															"        } else {",
															"            pm.expect.fail(`Line item with sourcedId '${lineItem.sourcedId}' is missing the 'fields' property in extensions.`);",
															"        }",
															"    });",
															"});",
															"",
															"",
															"",
															"",
															"",
															"",
															"",
															"pm.test(\"Validate JSON Response Structure\", function () {",
															"    const responseJson = pm.response.json();",
															"",
															"    // Validate top-level properties",
															"    pm.expect(responseJson).to.have.property(\"imsx_codeMajor\");",
															"    pm.expect(responseJson.imsx_codeMajor).to.be.a(\"string\");",
															"",
															"    pm.expect(responseJson).to.have.property(\"imsx_severity\");",
															"    pm.expect(responseJson.imsx_severity).to.be.a(\"string\");",
															"",
															"    pm.expect(responseJson).to.have.property(\"lineItems\");",
															"    pm.expect(responseJson.lineItems).to.be.an(\"array\");",
															"",
															"    // Validate each item in the lineItems array",
															"    responseJson.lineItems.forEach(function (lineItem, index) {",
															"        pm.expect(lineItem).to.have.property(\"sourcedId\");",
															"        pm.expect(lineItem.sourcedId).to.be.a(\"string\");",
															"",
															"        pm.expect(lineItem).to.have.property(\"status\");",
															"        pm.expect(lineItem.status).to.be.a(\"string\");",
															"",
															"        pm.expect(lineItem).to.have.property(\"dateLastModified\");",
															"        pm.expect(lineItem.dateLastModified).to.be.a(\"string\");",
															"        pm.expect(new Date(lineItem.dateLastModified)).to.be.a(\"date\", `lineItems[${index}].dateLastModified should be a valid date format`);",
															"",
															"        pm.expect(lineItem).to.have.property(\"metadata\");",
															"        pm.expect(lineItem.metadata).to.be.an(\"object\");",
															"",
															"        // Validate metadata.extensions",
															"        pm.expect(lineItem.metadata).to.have.property(\"extensions\");",
															"        pm.expect(lineItem.metadata.extensions).to.be.an(\"object\");",
															"",
															"        // Validate metadata.extensions.fields",
															"        pm.expect(lineItem.metadata.extensions).to.have.property(\"fields\");",
															"        pm.expect(lineItem.metadata.extensions.fields).to.be.an(\"object\");",
															"",
															"        pm.expect(lineItem.metadata.extensions.fields).to.have.property(\"type\");",
															"        pm.expect(lineItem.metadata.extensions.fields.type).to.be.a(\"string\");",
															"",
															"        pm.expect(lineItem.metadata.extensions.fields).to.have.property(\"adaptive\");",
															"        pm.expect(lineItem.metadata.extensions.fields.adaptive).to.be.a(\"boolean\");",
															"",
															"        pm.expect(lineItem.metadata.extensions.fields).to.have.property(\"storageName\");",
															"        pm.expect(lineItem.metadata.extensions.fields.storageName).to.be.a(\"string\");",
															"",
															"        pm.expect(lineItem.metadata.extensions.fields).to.have.property(\"creator\");",
															"        pm.expect(lineItem.metadata.extensions.fields.creator).to.be.an(\"array\");",
															"        lineItem.metadata.extensions.fields.creator.forEach(function (creatorItem) {",
															"            pm.expect(creatorItem).to.be.a(\"string\");",
															"        });",
															"",
															"        pm.expect(lineItem.metadata.extensions.fields).to.have.property(\"mediaType\");",
															"        pm.expect(lineItem.metadata.extensions.fields.mediaType).to.be.a(\"string\");",
															"",
															"        pm.expect(lineItem.metadata.extensions.fields).to.have.property(\"keywords\");",
															"        pm.expect(lineItem.metadata.extensions.fields.keywords).to.be.an(\"array\");",
															"        lineItem.metadata.extensions.fields.keywords.forEach(function (keywordItem) {",
															"            pm.expect(keywordItem).to.be.a(\"string\");",
															"        });",
															"",
															"        pm.expect(lineItem.metadata.extensions.fields).to.have.property(\"datePublished\");",
															"        pm.expect(lineItem.metadata.extensions.fields.datePublished).to.be.a(\"string\");",
															"        pm.expect(new Date(lineItem.metadata.extensions.fields.datePublished)).to.be.a(\"date\", `lineItems[${index}].metadata.extensions.fields.datePublished should be a valid date format`);",
															"",
															"        pm.expect(lineItem.metadata.extensions.fields).to.have.property(\"dateToActivate\");",
															"        pm.expect(lineItem.metadata.extensions.fields.dateToActivate).to.be.a(\"string\");",
															"        pm.expect(new Date(lineItem.metadata.extensions.fields.dateToActivate)).to.be.a(\"date\", `lineItems[${index}].metadata.extensions.fields.dateToActivate should be a valid date format`);",
															"",
															"        pm.expect(lineItem.metadata.extensions.fields).to.have.property(\"dateToShow\");",
															"        pm.expect(lineItem.metadata.extensions.fields.dateToShow).to.be.a(\"string\");",
															"        pm.expect(new Date(lineItem.metadata.extensions.fields.dateToShow)).to.be.a(\"date\", `lineItems[${index}].metadata.extensions.fields.dateToShow should be a valid date format`);",
															"",
															"        pm.expect(lineItem.metadata.extensions.fields).to.have.property(\"dateToStartOn\");",
															"        pm.expect(lineItem.metadata.extensions.fields.dateToStartOn).to.be.a(\"string\");",
															"        pm.expect(new Date(lineItem.metadata.extensions.fields.dateToStartOn)).to.be.a(\"date\", `lineItems[${index}].metadata.extensions.fields.dateToStartOn should be a valid date format`);",
															"",
															"        pm.expect(lineItem.metadata.extensions.fields).to.have.property(\"maxAttempts\");",
															"        pm.expect(lineItem.metadata.extensions.fields.maxAttempts).to.be.a(\"number\");",
															"",
															"        pm.expect(lineItem.metadata.extensions.fields).to.have.property(\"maxSubmits\");",
															"        pm.expect(lineItem.metadata.extensions.fields.maxSubmits).to.be.a(\"number\");",
															"",
															"        pm.expect(lineItem.metadata.extensions.fields).to.have.property(\"version\");",
															"        pm.expect(lineItem.metadata.extensions.fields.version).to.be.a(\"string\");",
															"",
															"        pm.expect(lineItem.metadata.extensions.fields).to.have.property(\"applicationId\");",
															"        pm.expect(lineItem.metadata.extensions.fields.applicationId).to.be.a(\"string\");",
															"",
															"        pm.expect(lineItem.metadata.extensions.fields).to.have.property(\"competencyId\");",
															"        pm.expect(lineItem.metadata.extensions.fields.competencyId).to.be.a(\"string\");",
															"",
															"        pm.expect(lineItem.metadata.extensions.fields).to.have.property(\"subject\");",
															"        pm.expect(lineItem.metadata.extensions.fields.subject).to.be.a(\"string\");",
															"",
															"        pm.expect(lineItem).to.have.property(\"title\");",
															"        pm.expect(lineItem.title).to.be.a(\"string\");",
															"",
															"        pm.expect(lineItem).to.have.property(\"description\");",
															"        pm.expect(lineItem.description).to.be.a(\"string\");",
															"",
															"        pm.expect(lineItem).to.have.property(\"assignDate\");",
															"        pm.expect(lineItem.assignDate).to.be.a(\"string\");",
															"        pm.expect(new Date(lineItem.assignDate)).to.be.a(\"date\", `lineItems[${index}].assignDate should be a valid date format`);",
															"",
															"        pm.expect(lineItem).to.have.property(\"dueDate\");",
															"        pm.expect(lineItem.dueDate).to.be.a(\"string\");",
															"        pm.expect(new Date(lineItem.dueDate)).to.be.a(\"date\", `lineItems[${index}].dueDate should be a valid date format`);",
															"",
															"        pm.expect(lineItem).to.have.property(\"class\");",
															"        pm.expect(lineItem.class).to.be.an(\"object\");",
															"        pm.expect(lineItem.class).to.have.property(\"href\");",
															"        pm.expect(lineItem.class.href).to.be.a(\"string\");",
															"        pm.expect(lineItem.class).to.have.property(\"sourcedId\");",
															"        pm.expect(lineItem.class.sourcedId).to.be.a(\"string\");",
															"        pm.expect(lineItem.class).to.have.property(\"type\");",
															"        pm.expect(lineItem.class.type).to.be.a(\"string\");",
															"",
															"        pm.expect(lineItem).to.have.property(\"scoreScale\");",
															"        pm.expect(lineItem.scoreScale).to.be.an(\"object\");",
															"        pm.expect(lineItem.scoreScale).to.have.property(\"href\");",
															"        pm.expect(lineItem.scoreScale.href).to.be.a(\"string\");",
															"        pm.expect(lineItem.scoreScale).to.have.property(\"sourcedId\");",
															"        pm.expect(lineItem.scoreScale.sourcedId).to.be.a(\"string\");",
															"        pm.expect(lineItem.scoreScale).to.have.property(\"type\");",
															"        pm.expect(lineItem.scoreScale.type).to.be.a(\"string\");",
															"",
															"        pm.expect(lineItem).to.have.property(\"school\");",
															"        pm.expect(lineItem.school).to.be.an(\"object\");",
															"        pm.expect(lineItem.school).to.have.property(\"href\");",
															"        pm.expect(lineItem.school.href).to.be.a(\"string\");",
															"        pm.expect(lineItem.school).to.have.property(\"sourcedId\");",
															"        pm.expect(lineItem.school.sourcedId).to.be.a(\"string\");",
															"        pm.expect(lineItem.school).to.have.property(\"type\");",
															"        pm.expect(lineItem.school.type).to.be.a(\"string\");",
															"",
															"        pm.expect(lineItem).to.have.property(\"category\");",
															"        pm.expect(lineItem.category).to.be.an(\"object\");",
															"        pm.expect(lineItem.category).to.have.property(\"href\");",
															"        pm.expect(lineItem.category.href).to.be.a(\"string\");",
															"        pm.expect(lineItem.category).to.have.property(\"sourcedId\");",
															"        pm.expect(lineItem.category.sourcedId).to.be.a(\"string\");",
															"        pm.expect(lineItem.category).to.have.property(\"type\");",
															"        pm.expect(lineItem.category.type).to.be.a(\"string\");",
															"",
															"        pm.expect(lineItem).to.have.property(\"gradingPeriod\");",
															"        pm.expect(lineItem.gradingPeriod).to.be.an(\"object\");",
															"        pm.expect(lineItem.gradingPeriod).to.have.property(\"href\");",
															"        pm.expect(lineItem.gradingPeriod.href).to.be.a(\"string\");",
															"        pm.expect(lineItem.gradingPeriod).to.have.property(\"sourcedId\");",
															"        pm.expect(lineItem.gradingPeriod.sourcedId).to.be.a(\"string\");",
															"        pm.expect(lineItem.gradingPeriod).to.have.property(\"type\");",
															"        pm.expect(lineItem.gradingPeriod.type).to.be.a(\"string\");",
															"",
															"        pm.expect(lineItem).to.have.property(\"academicSession\");",
															"        pm.expect(lineItem.academicSession).to.be.an(\"object\");",
															"        pm.expect(lineItem.academicSession).to.have.property(\"href\");",
															"        pm.expect(lineItem.academicSession.href).to.be.a(\"string\");",
															"        pm.expect(lineItem.academicSession).to.have.property(\"sourcedId\");",
															"        pm.expect(lineItem.academicSession.sourcedId).to.be.a(\"string\");",
															"        pm.expect(lineItem.academicSession).to.have.property(\"type\");",
															"        pm.expect(lineItem.academicSession.type).to.be.a(\"string\");",
															"",
															"        pm.expect(lineItem).to.have.property(\"resultValueMin\");",
															"        pm.expect(lineItem.resultValueMin).to.be.a(\"number\");",
															"",
															"        pm.expect(lineItem).to.have.property(\"resultValueMax\");",
															"        pm.expect(lineItem.resultValueMax).to.be.a(\"number\");",
															"",
															"        pm.expect(lineItem).to.have.property(\"learningObjectiveSet\");",
															"        pm.expect(lineItem.learningObjectiveSet).to.be.an(\"array\");",
															"        // You can add more specific validation for the learningObjectiveSet items if needed",
															"    });",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Set headers dynamically from environment variables",
															"pm.request.headers.upsert({ key: \"Authorization\", value: pm.environment.get(\"Auth\") });",
															"pm.request.headers.upsert({ key: \"x-app-key\", value: pm.environment.get(\"x-app-key\") });",
															"pm.request.headers.upsert({ key: \"x-client-id\", value: pm.environment.get(\"x-client-id\") });",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}{{pathPrefix}}/lineItems",
													"host": [
														"{{URL}}{{pathPrefix}}"
													],
													"path": [
														"lineItems"
													]
												}
											},
											"response": []
										},
										{
											"name": "Validate successful retrieval of all LineItems with applied query parameters",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// ✅ Status check",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"// ✅ Response contains LineItems array",
															"const json = pm.response.json();",
															"const items = json.lineItems || [];",
															"",
															"pm.test(\"Response has 'lineItems' array\", function () {",
															"    pm.expect(items).to.be.an(\"array\");",
															"});",
															"",
															"// ✅ Parse query parameters used in request",
															"let queryParams = {};",
															"pm.variables.get(\"queryParams\").split(\"&\").forEach(param => {",
															"    const [key, val] = param.split(\"=\");",
															"    queryParams[key] = decodeURIComponent(val);",
															"});",
															"",
															"console.log(\"Validating with Query Params:\", queryParams);",
															"",
															"// ✅ Validate fields presence",
															"if (queryParams.fields) {",
															"    const expectedFields = queryParams.fields.split(\",\");",
															"    pm.test(\"All items contain selected fields\", function () {",
															"        items.forEach((item, index) => {",
															"            expectedFields.forEach(field => {",
															"                pm.expect(item, `Missing '${field}' in item ${index}`).to.have.property(field);",
															"            });",
															"        });",
															"    });",
															"}",
															"",
															"// ✅ Validate limit enforcement",
															"if (queryParams.limit) {",
															"    const limit = Number(queryParams.limit);",
															"    pm.test(`Returned items should be <= limit (${limit})`, function () {",
															"        pm.expect(items.length).to.be.at.most(limit);",
															"    });",
															"}",
															"",
															"// ✅ Validate sorting",
															"if (queryParams.sort && queryParams.orderBy) {",
															"    const sortField = queryParams.sort;",
															"    const order = queryParams.orderBy.toUpperCase();",
															"",
															"    const actualValues = items.map(item => item[sortField]);",
															"    const sortedValues = [...actualValues].sort((a, b) => {",
															"        if (a === undefined || b === undefined) return 0;",
															"        if (typeof a === \"string\" && typeof b === \"string\") {",
															"            return a.localeCompare(b);",
															"        } else {",
															"            return a - b;",
															"        }",
															"    });",
															"",
															"    if (order === \"DESC\") sortedValues.reverse();",
															"",
															"    pm.test(`Items are sorted by '${sortField}' in ${order} order`, function () {",
															"        pm.expect(actualValues, \"Sorting mismatch\").to.eql(sortedValues);",
															"    });",
															"}",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Set headers dynamically from environment variables",
															"pm.request.headers.upsert({ key: \"Authorization\", value: pm.environment.get(\"Auth\") });",
															"pm.request.headers.upsert({ key: \"x-app-key\", value: pm.environment.get(\"x-app-key\") });",
															"pm.request.headers.upsert({ key: \"x-client-id\", value: pm.environment.get(\"x-client-id\") });",
															"",
															"// Full list of fields",
															"const allFields = [",
															"    \"sourcedId\",",
															"    \"status\",",
															"    \"dateLastModified\",",
															"    \"metadata\",",
															"    \"title\",",
															"    \"description\",",
															"    \"assignDate\",",
															"    \"dueDate\",",
															"    \"category\",",
															"    \"resultValueMin\",",
															"    \"resultValueMax\",",
															"    \"class\",",
															"    \"school\",",
															"    \"scoreScale\",",
															"    \"gradingPeriod\",",
															"    \"academicSession\",",
															"    \"learningObjectiveSet\",",
															"];",
															"",
															"// Fields to exclude from sort and filter",
															"const excludedFields = [",
															"    \"metadata\",",
															"    \"class\",",
															"    \"school\",",
															"    \"scoreScale\",",
															"    \"category\",",
															"    \"gradingPeriod\",",
															"    \"academicSession\",",
															"    \"learningObjectiveSet\",",
															"];",
															"",
															"// Filterable/sortable fields = allFields minus excludedFields",
															"const validSortAndFilterFields = allFields.filter(f => !excludedFields.includes(f));",
															"",
															"const orderByOptions = [\"ASC\", \"DESC\"];",
															"",
															"// Utility: Pick N unique random items from an array",
															"function getRandomItems(array, count) {",
															"    let shuffled = array.slice().sort(() => 0.5 - Math.random());",
															"    return shuffled.slice(0, count);",
															"}",
															"",
															"// Build a simple filter expression based on the field name",
															"function buildRandomFilter(field) {",
															"    switch (field) {",
															"        case \"status\":",
															"            return `status='active'`;",
															"        case \"resultValueMin\":",
															"            return `resultValueMin<'90'`;",
															"        case \"resultValueMax\":",
															"            return `resultValueMax>'50'`;",
															"        case \"dateLastModified\":",
															"            return `dateLastModified>'2024-01-01T00:00:00Z'`;",
															"        case \"title\":",
															"            return `title!='null'`;",
															"        case \"sourcedId\":",
															"            return `sourcedId!='null'`;",
															"        case \"description\":",
															"            return `description!='null'`;",
															"        default:",
															"            return `${field}!='null'`;",
															"    }",
															"}",
															"",
															"// Pick 3 random fields for `fields` (from allFields, including excluded ones)",
															"let selectedFields = getRandomItems(allFields, 3).join(\",\");",
															"",
															"// Pick sort field and filter field only from allowed ones",
															"let sortField = getRandomItems(validSortAndFilterFields, 1)[0];",
															"let filterField = getRandomItems(validSortAndFilterFields, 1)[0];",
															"let filterExpression = buildRandomFilter(filterField);",
															"",
															"// Other params",
															"let orderBy = getRandomItems(orderByOptions, 1)[0];",
															"let limit = Math.floor(Math.random() * 10) + 5;",
															"let offset = Math.floor(Math.random() * 5);",
															"",
															"// Build query param object",
															"let queryParams = {",
															"    sort: sortField,",
															"    fields: selectedFields,",
															"    orderBy,",
															"    filter: filterExpression,",
															"    limit: limit.toString(),",
															"    offset: offset.toString()",
															"};",
															"",
															"// Convert to query string",
															"let queryString = Object.entries(queryParams)",
															"    .map(([key, value]) => `${key}=${encodeURIComponent(value)}`)",
															"    .join(\"&\");",
															"",
															"// Save full URL and query string",
															"let baseUrl = pm.environment.get(\"baseUrl\");",
															"let fullUrl = `${baseUrl}/ims/oneroster/gradebook/v1p2/lineItems?${queryString}`;",
															"",
															"pm.environment.set(\"fullRequestUrl\", fullUrl);",
															"pm.variables.set(\"queryParams\", queryString);",
															"",
															"console.log(\"Dynamic Query Params for LineItems:\", queryParams);",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}{{pathPrefix}}/lineItems?{{queryParams}}",
													"host": [
														"{{URL}}{{pathPrefix}}"
													],
													"path": [
														"lineItems"
													],
													"query": [
														{
															"key": "{{queryParams}}",
															"value": null
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Validate API throws an error for request sent with invalid query params",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// ✅ Status check",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Set headers dynamically from environment variables",
															"pm.request.headers.upsert({ key: \"Authorization\", value: pm.environment.get(\"Auth\") });",
															"pm.request.headers.upsert({ key: \"x-app-key\", value: pm.environment.get(\"x-app-key\") });",
															"pm.request.headers.upsert({ key: \"x-client-id\", value: pm.environment.get(\"x-client-id\") });",
															"",
															"// Full list of fields",
															"const allFields = [",
															"    \"sourcedId\",",
															"    \"status\",",
															"    \"dateLastModified\",",
															"    \"metadata\",",
															"    \"title\",",
															"    \"description\",",
															"    \"assignDate\",",
															"    \"dueDate\",",
															"    \"category\",",
															"    \"resultValueMin\",",
															"    \"resultValueMax\",",
															"    \"class\",",
															"    \"school\",",
															"    \"scoreScale\",",
															"    \"gradingPeriod\",",
															"    \"academicSession\",",
															"    \"learningObjectiveSet\",",
															"];",
															"",
															"// Invalid field names and values",
															"const invalidFields = [\"badField\", \"unknownParam\", \"123key\", \"field@\", \"☃️Field\"];",
															"const invalidSort = [\"sortBy123\", \">>>dateLastModified\", \"title*\", \"!!!!\"];",
															"const invalidOrderBy = [\"UPWARD\", \"DOWN\", \"RANDOM\", \"descend\"];",
															"const invalidFilterPatterns = [",
															"    \"score==25\", \"title==null\", \"status->active\", \"date<<2024\", \"resultValueMin>>>90\"",
															"];",
															"const invalidLimits = [-10, 0, 10000, \"abc\", \"!@#\"];",
															"const invalidOffsets = [-1, \"xyz\", 1.5, \"++\", null];",
															"",
															"// Utility to randomly pick N values",
															"function getRandomItems(array, count) {",
															"    let shuffled = array.slice().sort(() => 0.5 - Math.random());",
															"    return shuffled.slice(0, count);",
															"}",
															"",
															"// Generate 5 invalid combinations",
															"let invalidTestCases = [];",
															"",
															"for (let i = 0; i < 5; i++) {",
															"    const testCase = {",
															"        fields: getRandomItems(invalidFields.concat(allFields), 2).join(\",\"),",
															"        sort: getRandomItems(invalidSort.concat(invalidFields), 1)[0],",
															"        orderBy: getRandomItems(invalidOrderBy, 1)[0],",
															"        filter: getRandomItems(invalidFilterPatterns, 1)[0],",
															"        limit: getRandomItems(invalidLimits, 1)[0],",
															"        offset: getRandomItems(invalidOffsets, 1)[0]",
															"    };",
															"",
															"    // Assemble query string",
															"    let queryString = Object.entries(testCase)",
															"        .map(([key, value]) => `${key}=${encodeURIComponent(value)}`)",
															"        .join(\"&\");",
															"",
															"    invalidTestCases.push(queryString);",
															"}",
															"",
															"// Save them to Postman variables (or log for manual use)",
															"invalidTestCases.forEach((query, index) => {",
															"    pm.variables.set(`invalidQuery_${index + 1}`, query);",
															"    console.log(`Invalid Test Case ${index + 1}:`, query);",
															"});",
															"",
															"// Set the first one for immediate use",
															"let baseUrl = pm.environment.get(\"baseUrl\");",
															"let fullInvalidUrl = `${baseUrl}/ims/oneroster/gradebook/v1p2/assessmentLineItems?${invalidTestCases[0]}`;",
															"pm.environment.set(\"fullRequestUrl\", fullInvalidUrl);",
															"pm.variables.set(\"queryParams\", invalidTestCases[0]);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}{{pathPrefix}}/lineItems?{{queryParams}}",
													"host": [
														"{{URL}}{{pathPrefix}}"
													],
													"path": [
														"lineItems"
													],
													"query": [
														{
															"key": "{{queryParams}}",
															"value": null
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "deleteLineItems",
									"item": []
								}
							]
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}